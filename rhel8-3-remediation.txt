<<<<<<< HEAD
"""1.1.1.1 Ensure mounting of cramfs filesystems is disabled - modprobe"" : [FAILED]

The cramfs filesystem type is a compressed read-only Linux filesystem embedded in small footprint systems. A cramfs image can be used without having to first decompress the image.
        Rationale:
        Removing support for unneeded filesystem types reduces the local attack surface of the server. If this filesystem type is not needed, disable it.

Solution:
Edit or create a file in the /etc/modprobe.d/ directory ending in .conf Example: vim /etc/modprobe.d/cramfs.conf and add the following line:
        install cramfs /bin/true
        Run the following command to unload the cramfs module:
        # rmmod cramfs

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.4.6,800-171|3.4.7,800-53|CM-7,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv7|5.1,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7,LEVEL|1S,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,NIAv2|SS15a,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3

Policy Value:
cmd: /usr/sbin/modprobe -n -v cramfs | /usr/bin/awk '{print} END {if (NR == 0) print ""fail""}'
expect: install /bin/true
system: Linux

Actual Value:
The command '/usr/sbin/modprobe -n -v cramfs | /usr/bin/awk '{print} END {if (NR == 0) print ""fail""}'' returned : 

insmod /lib/modules/4.18.0-240.el8.x86_64/kernel/fs/cramfs/cramfs.ko.xz"
"""1.1.1.3 Ensure mounting of squashfs filesystems is disabled - modprobe"" : [FAILED]

The squashfs filesystem type is a compressed read-only Linux filesystem embedded in small footprint systems (similar to cramfs ). A squashfs image can be used without having to first decompress the image.
        Rationale:
        Removing support for unneeded filesystem types reduces the local attack surface of the system. If this filesystem type is not needed, disable it.

Solution:
Edit or create a file in the /etc/modprobe.d/ directory ending in .conf Example: vim /etc/modprobe.d/squashfs.conf and add the following line:
        install squashfs /bin/true
        Run the following command to unload the squashfs module:
        # rmmod squashfs

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.4.6,800-171|3.4.7,800-53|CM-7,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv7|5.1,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7,LEVEL|1S,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,NIAv2|SS15a,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3

Policy Value:
cmd: /sbin/modprobe -n -v squashfs | /usr/bin/awk '{print} END {if (NR == 0) print ""fail""}'
expect: install /bin/true
system: Linux

Actual Value:
The command '/sbin/modprobe -n -v squashfs | /usr/bin/awk '{print} END {if (NR == 0) print ""fail""}'' returned : 

insmod /lib/modules/4.18.0-240.el8.x86_64/kernel/fs/squashfs/squashfs.ko.xz"
"""1.1.1.4 Ensure mounting of udf filesystems is disabled - modprobe"" : [FAILED]

The udf filesystem type is the universal disk format used to implement ISO/IEC 13346 and ECMA-167 specifications. This is an open vendor filesystem type for data storage on a broad range of media. This filesystem type is necessary to support writing DVDs and newer optical disc formats.
        Rationale:
        Removing support for unneeded filesystem types reduces the local attack surface of the system. If this filesystem type is not needed, disable it.

Solution:
Edit or create a file in the /etc/modprobe.d/ directory ending in .conf Example: vim /etc/modprobe.d/udf.conf and add the following line:
        install udf /bin/true
        Run the following command to unload the udf module:
        # rmmod udf

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.4.6,800-171|3.4.7,800-53|CM-7,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv7|5.1,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7,LEVEL|1S,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,NIAv2|SS15a,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3

Policy Value:
cmd: /sbin/modprobe -n -v udf | /usr/bin/awk '{print} END {if (NR == 0) print ""fail""}'
expect: install /bin/true
system: Linux

Actual Value:
The command '/sbin/modprobe -n -v udf | /usr/bin/awk '{print} END {if (NR == 0) print ""fail""}'' returned : 

insmod /lib/modules/4.18.0-240.el8.x86_64/kernel/lib/crc-itu-t.ko.xz 
insmod /lib/modules/4.18.0-240.el8.x86_64/kernel/fs/udf/udf.ko.xz"
"""1.1.10 Ensure noexec option set on /var/tmp partition"" : [FAILED]

The noexec mount option specifies that the filesystem cannot contain executable binaries.
        Rationale:
        Since the /var/tmp filesystem is only intended for temporary file storage, set this option to ensure that users cannot run executable binaries from /var/tmp .

Solution:
Edit the /etc/fstab file and add noexec to the fourth field (mounting options) for the /var/tmp partition. See the fstab(5) manual page for more information. Run the following command to remount /var/tmp :
        # mount -o remount,noexec /var/tmp

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.7,800-53|AC-6(10),CSCv7|2.6,CSF|PR.AC-4,LEVEL|1S

Policy Value:
cmd: /usr/bin/mount | /usr/bin/grep 'on /var/tmp '
expect: [\s]*[,]?noexec
system: Linux

Actual Value:
The command '/usr/bin/mount | /usr/bin/grep 'on /var/tmp '' did not return any result"
"""1.1.17 Ensure noexec option set on /dev/shm partition"" : [FAILED]

The noexec mount option specifies that the filesystem cannot contain executable binaries.
        Rationale:
        Setting this option on a file system prevents users from executing programs from shared memory. This deters users from introducing potentially malicious software on the system.

Solution:
Edit the /etc/fstab file and add noexec to the fourth field (mounting options) for the /dev/shm partition. See the fstab(5) manual page for more information. Run the following command to remount /dev/shm:
        # mount -o remount,noexec /dev/shm
        Notes:
        Some distributions mount /dev/shm through other means and require /dev/shm to be added to /etc/fstab even though it is already being mounted on boot. Others may configure /dev/shm in other locations and may override /etc/fstab configuration. Consult the documentation appropriate for your distribution.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.7,800-53|AC-6(10),CSCv7|2.6,CSF|PR.AC-4,LEVEL|1S

Policy Value:
cmd: /bin/mount | /bin/grep 'on /dev/shm '
expect: [\s]*[,]?noexec
system: Linux

Actual Value:
The command '/bin/mount | /bin/grep 'on /dev/shm '' returned : 

tmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,seclabel)"
"""1.1.2 Ensure /tmp is configured - mount"" : [FAILED]

The /tmp directory is a world-writable directory used for temporary storage by all users and some applications.
        Rationale:
        Making /tmp its own file system allows an administrator to set the noexec option on the mount, making /tmp useless for an attacker to install executable code. It would also prevent an attacker from establishing a hardlink to a system setuid program and wait for it to be updated. Once the program was updated, the hardlink would be broken and the attacker would have his own copy of the program. If the program happened to have a security vulnerability, the attacker could continue to exploit the known flaw.
        This can be accomplished by either mounting tmpfs to /tmp, or creating a separate partition for /tmp.

Solution:
Configure /etc/fstab as appropriate.
        example: tmpfs	/tmp	tmpfs     defaults,rw,nosuid,nodev,noexec,relatime  0 0
        OR Run the following commands to enable systemd /tmp mounting:
        # systemctl unmask tmp.mount
        # systemctl enable tmp.mount
        Edit /etc/systemd/system/local-fs.target.wants/tmp.mount to configure the /tmp mount:
        [Mount] What=tmpfs Where=/tmp Type=tmpfs Options=mode=1777,strictatime,noexec,nodev,nosuid
        Impact:
        Since the /tmp directory is intended to be world-writable, there is a risk of resource exhaustion if it is not bound to a separate partition.
        Running out of /tmp space is a problem regardless of what kind of filesystem lies under it, but in a default installation a disk-based /tmp will essentially have the whole disk available, as it only creates a single / partition. On the other hand, a RAM-based /tmp as with tmpfs will almost certainly be much smaller, which can lead to applications filling up the filesystem much more easily.
        /tmp utilizing tmpfs can be resized using the size={size} parameter on the Options line on the tmp.mount file

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|9.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3

Policy Value:
cmd: /usr/bin/mount | /bin/grep /tmp
expect: .*on[\s]+/tmp[\s]+type.*
system: Linux

Actual Value:
The command '/usr/bin/mount | /bin/grep /tmp' did not return any result"
"""1.1.2 Ensure /tmp is configured - systemctl"" : [FAILED]

The /tmp directory is a world-writable directory used for temporary storage by all users and some applications.
        Rationale:
        Making /tmp its own file system allows an administrator to set the noexec option on the mount, making /tmp useless for an attacker to install executable code. It would also prevent an attacker from establishing a hardlink to a system setuid program and wait for it to be updated. Once the program was updated, the hardlink would be broken and the attacker would have his own copy of the program. If the program happened to have a security vulnerability, the attacker could continue to exploit the known flaw.
        This can be accomplished by either mounting tmpfs to /tmp, or creating a separate partition for /tmp.

Solution:
Configure /etc/fstab as appropriate.
        example: tmpfs	/tmp	tmpfs     defaults,rw,nosuid,nodev,noexec,relatime  0 0
        OR Run the following commands to enable systemd /tmp mounting:
        # systemctl unmask tmp.mount
        # systemctl enable tmp.mount
        Edit /etc/systemd/system/local-fs.target.wants/tmp.mount to configure the /tmp mount:
        [Mount] What=tmpfs Where=/tmp Type=tmpfs Options=mode=1777,strictatime,noexec,nodev,nosuid
        Impact:
        Since the /tmp directory is intended to be world-writable, there is a risk of resource exhaustion if it is not bound to a separate partition.
        Running out of /tmp space is a problem regardless of what kind of filesystem lies under it, but in a default installation a disk-based /tmp will essentially have the whole disk available, as it only creates a single / partition. On the other hand, a RAM-based /tmp as with tmpfs will almost certainly be much smaller, which can lead to applications filling up the filesystem much more easily.
        /tmp utilizing tmpfs can be resized using the size={size} parameter on the Options line on the tmp.mount file

See Also: https://workbench.cisecurity.org/files/2485

Reference: CIP|007-6-R1,CSCv7|9.1,LEVEL|1S,PCI-DSSv3.1|2.2.2,PCI-DSSv3.1|2.2.3,PCI-DSSv3.2|2.2.2,PCI-DSSv3.2|2.2.3

Policy Value:
cmd: /usr/bin/systemctl is-enabled tmp.mount
expect: enabled
system: Linux

Actual Value:
The command '/usr/bin/systemctl is-enabled tmp.mount' returned : 

disabled"
"""1.1.3 Ensure nodev option set on /tmp partition"" : [FAILED]

The nodev mount option specifies that the filesystem cannot contain special devices.
        Rationale:
        Since the /tmp filesystem is not intended to support devices, set this option to ensure that users cannot attempt to create block or character special devices in /tmp .

Solution:
Edit the /etc/fstab file and add nodev to the fourth field (mounting options) for the /tmp partition. See the fstab(5) manual page for more information. Run the following command to remount /tmp :
        # mount -o remount,nodev /tmp
        OR Edit /etc/systemd/system/local-fs.target.wants/tmp.mount to add nodev to the /tmp mount options:
        [Mount] Options=mode=1777,strictatime,noexec,nodev,nosuid
        Run the following command to remount /tmp :
        # mount -o remount,nodev /tmp

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.7,800-53|AC-6(10),CSCv7|5.1,CSF|PR.AC-4,LEVEL|1S

Policy Value:
cmd: /usr/bin/mount | /usr/bin/grep 'on /tmp '
expect: [\s]*[,]?nodev
system: Linux

Actual Value:
The command '/usr/bin/mount | /usr/bin/grep 'on /tmp '' did not return any result"
"""1.1.4 Ensure nosuid option set on /tmp partition"" : [FAILED]

The nosuid mount option specifies that the filesystem cannot contain setuid files.
        Rationale:
        Since the /tmp filesystem is only intended for temporary file storage, set this option to ensure that users cannot create setuid files in /tmp .

Solution:
Edit the /etc/fstab file and add nosuid to the fourth field (mounting options) for the /tmp partition. See the fstab(5) manual page for more information. Run the following command to remount /tmp :
        # mount -o remount,nosuid /tmp
        OR Edit /etc/systemd/system/local-fs.target.wants/tmp.mount to add nosuid to the /tmp mount options:
        [Mount] Options=mode=1777,strictatime,noexec,nodev,nosuid
        Run the following command to remount /tmp :
        # mount -o remount,nosuid /tmp

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.7,800-53|AC-6(10),CSCv7|5.1,CSF|PR.AC-4,LEVEL|1S

Policy Value:
cmd: /usr/bin/mount | /usr/bin/grep 'on /tmp '
expect: [\s]*[,]?nosuid
system: Linux

Actual Value:
The command '/usr/bin/mount | /usr/bin/grep 'on /tmp '' did not return any result"
"""1.1.5 Ensure noexec option set on /tmp partition"" : [FAILED]

The noexec mount option specifies that the filesystem cannot contain executable binaries.
        Rationale:
        Since the /tmp filesystem is only intended for temporary file storage, set this option to ensure that users cannot run executable binaries from /tmp .

Solution:
Edit the /etc/fstab file and add noexec to the fourth field (mounting options) for the /tmp partition. See the fstab(5) manual page for more information. Run the following command to remount /tmp :
        # mount -o remount,noexec /tmp
        OR Edit /etc/systemd/system/local-fs.target.wants/tmp.mount to add noexec to the /tmp mount options:
        [Mount] Options=mode=1777,strictatime,noexec,nodev,nosuid
        Run the following command to remount /tmp :
        # mount -o remount,noexec /tmp

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.7,800-53|AC-6(10),CSCv7|2.6,CSF|PR.AC-4,LEVEL|1S

Policy Value:
cmd: /usr/bin/mount | /usr/bin/grep 'on /tmp '
expect: [\s]*[,]?noexec
system: Linux

Actual Value:
The command '/usr/bin/mount | /usr/bin/grep 'on /tmp '' did not return any result"
"""1.1.8 Ensure nodev option set on /var/tmp partition"" : [FAILED]

The nodev mount option specifies that the filesystem cannot contain special devices.
        Rationale:
        Since the /var/tmp filesystem is not intended to support devices, set this option to ensure that users cannot attempt to create block or character special devices in /var/tmp .

Solution:
Edit the /etc/fstab file and add nodev to the fourth field (mounting options) for the /var/tmp partition. See the fstab(5) manual page for more information. Run the following command to remount /var/tmp :
        # mount -o remount,nodev /var/tmp

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.7,800-53|AC-6(10),CSCv7|5.1,CSF|PR.AC-4,LEVEL|1S

Policy Value:
cmd: /usr/bin/mount | /usr/bin/grep 'on /var/tmp '
expect: [\s]*[,]?nodev
system: Linux

Actual Value:
The command '/usr/bin/mount | /usr/bin/grep 'on /var/tmp '' did not return any result"
"""1.1.9 Ensure nosuid option set on /var/tmp partition"" : [FAILED]

The nosuid mount option specifies that the filesystem cannot contain setuid files.
        Rationale:
        Since the /var/tmp filesystem is only intended for temporary file storage, set this option to ensure that users cannot create setuid files in /var/tmp .

Solution:
Edit the /etc/fstab file and add nosuid to the fourth field (mounting options) for the /var/tmp partition. See the fstab(5) manual page for more information. Run the following command to remount /var/tmp:
        # mount -o remount,nosuid /var/tmp

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.7,800-53|AC-6(10),CSCv7|5.1,CSF|PR.AC-4,LEVEL|1S

Policy Value:
cmd: /usr/bin/mount | /usr/bin/grep 'on /var/tmp '
expect: [\s]*[,]?nosuid
system: Linux

Actual Value:
The command '/usr/bin/mount | /usr/bin/grep 'on /var/tmp '' did not return any result"
"""1.2.1 Ensure Red Hat Subscription Manager connection is configured"" : [WARNING]

Systems need to be registered with the Red Hat Subscription Manager (RHSM) to receive patch updates. This is usually configured during initial installation.
        Rationale:
        It is important to register with the Red Hat Subscription Manager to make sure that patches are updated on a regular basis. This helps to reduce the exposure time as new vulnerabilities are discovered.

        NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
Run the following command to connect to the Red Hat Subscription Manager:
        # subscription-manager register

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.14.1,800-53|SI-2,CN-L3|8.1.10.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.4.4(e),CN-L3|8.5.4.1(b),CN-L3|8.5.4.1(d),CN-L3|8.5.4.1(e),CSCv7|3.4,CSF|ID.RA-1,CSF|PR.IP-12,ITSG-33|SI-2,LEVEL|1NS,NESA|T7.6.2,NESA|T7.7.1,NIAv2|AM38,NIAv2|AM39,NIAv2|PR9,NIAv2|SS14b,SWIFT-CSCv1|2.2

Policy Value:
cmd: /usr/bin/subscription-manager identity
expect: ManualReviewRequired
system: Linux

Actual Value:
The command '/usr/bin/subscription-manager identity' returned : 

This system is not yet registered. Try 'subscription-manager register --help' for more information."
"""1.2.4 Ensure gpgcheck is globally activated"" : [FAILED]

The gpgcheck option, found in the main section of the /etc/yum.conf and individual /etc/yum/repos.d/* files determines if an RPM package's signature is checked prior to its installation.
        Rationale:
        It is important to ensure that an RPM's package signature is always checked prior to installation to ensure that the software is obtained from a trusted source.

Solution:
Edit /etc/yum.conf and set 'gpgcheck=1' in the [main] section. Edit any failing files in /etc/yum.repos.d/* and set all instances of gpgcheck to '1'.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-53|SI-7(6),CSCv7|3.4,CSF|PR.DS-6,LEVEL|1S,SWIFT-CSCv1|6.2

Policy Value:
expect: ^[\s]*gpgcheck[\s]*=[\s]*1[\s]*$
file: /etc/yum.conf /etc/yum.repos.d/*.repo
regex: ^[\s]*gpgcheck[\s]*=
system: Linux

Actual Value:
Non-compliant file(s):
      /etc/yum.repos.d/redhat.repo - regex not found"
"""1.2.5 Ensure package manager repositories are configured"" : [WARNING]

Systems need to have package manager repositories configured to ensure they receive the latest patches and updates.
        Rationale:
        If a system's package repositories are misconfigured important patches may not be identified or a rogue repository could introduce compromised software.

        NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
Configure your package manager repositories according to site policy.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.14.1,800-53|SI-2,CN-L3|8.1.10.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.4.4(e),CN-L3|8.5.4.1(b),CN-L3|8.5.4.1(d),CN-L3|8.5.4.1(e),CSCv7|3.4,CSF|ID.RA-1,CSF|PR.IP-12,ITSG-33|SI-2,LEVEL|1NS,NESA|T7.6.2,NESA|T7.7.1,NIAv2|PR9,SWIFT-CSCv1|2.2

Policy Value:
cmd: /usr/bin/yum repolist
expect: ManualReviewRequired
system: Linux

Actual Value:
The command '/usr/bin/yum repolist' returned : 

Updating Subscription Management repositories.
Unable to read consumer identity

This system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.

repo id                                               repo name
local-repo-in-iso-AppStream-by-yum-repo-config-helper Red Hat Enterprise Linux \8 - AppStream - \x86_64 (DVD)
local-repo-in-iso-BaseOS-by-yum-repo-config-helper    Red Hat Enterprise Linux \8 - BaseOS - \x86_64 (DVD)"
"""1.3.2 Ensure sudo commands use pty"" : [FAILED]

sudo can be configured to run only from a psuedo-pty
        Rationale:
        Attackers can run a malicious program using sudo which would fork a background process that remains even when the main program has finished executing.

Solution:
edit the file /etc/sudoers or a file in /etc/sudoers.d/ with visudo -f and add the following line:
        Defaults use_pty
        Impact:
        editing the sudo configuration incorrectly can cause sudo to stop functioning.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.1,800-53|AC-3(7),CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSCv7|5.1,CSF|PR.AC-4,CSF|PR.PT-3,LEVEL|1S

Policy Value:
cmd: /usr/bin/grep -s -E '^[[:space:]]*Defaults[[:space:]]+([^#]+,[[:space:]]*)?use_pty' /etc/sudoers /etc/sudoers.d/* | /usr/bin/awk '{print} END {if (NR != 0) print ""pass"" ; else print ""fail""}'
expect: ^pass$
system: Linux

Actual Value:
The command '/usr/bin/grep -s -E '^[[:space:]]*Defaults[[:space:]]+([^#]+,[[:space:]]*)?use_pty' /etc/sudoers /etc/sudoers.d/* | /usr/bin/awk '{print} END {if (NR != 0) print ""pass"" ; else print ""fail""}'' returned : 

fail"
"""1.3.3 Ensure sudo log file exists"" : [FAILED]

sudo can use a custom log file
        Rationale:
        A sudo log file simplifies auditing of sudo commands

Solution:
edit the file /etc/sudoers or a file in /etc/sudoers.d/ with visudo -f and add the following line:
        Defaults  logfile=""<PATH TO CUSTOM LOG FILE>""
            **Example
            Defaults  logfile=""/var/log/sudo.log""
            Impact:
            editing the sudo configuration incorrectly can cause sudo to stop functioning

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSCv7|6.3,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,LEVEL|1S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1

Policy Value:
cmd: /usr/bin/grep -s -E '^[[:space:]]*Defaults[[:space:]]+([^#]+,[[:space:]]*)?logfile=' /etc/sudoers /etc/sudoers.d/* | /usr/bin/awk '{print} END {if (NR != 0) print ""pass"" ; else print ""fail""}'
expect: ^pass$
system: Linux

Actual Value:
The command '/usr/bin/grep -s -E '^[[:space:]]*Defaults[[:space:]]+([^#]+,[[:space:]]*)?logfile=' /etc/sudoers /etc/sudoers.d/* | /usr/bin/awk '{print} END {if (NR != 0) print ""pass"" ; else print ""fail""}'' returned : 

fail"
"""1.4.1 Ensure AIDE is installed"" : [FAILED]

AIDE takes a snapshot of filesystem state including modification times, permissions, and file hashes which can then be used to compare against the current state of the filesystem to detect modifications to the system.
        Rationale:
        By monitoring the filesystem state compromised files can be detected to prevent or limit the exposure of accidental or malicious misconfigurations or modified binaries.

Solution:
Run the following command to install AIDE:
        # dnf install aide
        Configure AIDE as appropriate for your environment. Consult the AIDE documentation for options. Initialize AIDE: Run the following commands:
        # aide --init
        # mv /var/lib/aide/aide.db.new.gz /var/lib/aide/aide.db.gz

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.4.8,800-53|CM-7(5),CSCv7|14.9,CSF|PR.IP-1,CSF|PR.PT-3,ISO/IEC-27001|A.12.5.1,ISO/IEC-27001|A.12.6.2,LEVEL|1S,PCI-DSSv3.1|12.3.7,PCI-DSSv3.2|12.3.7,SWIFT-CSCv1|2.3,TBA-FIISB|44.2.2,TBA-FIISB|49.2.3

Policy Value:
operator: gt
required: YES
rpm: aide-0.0.0-0
system: Linux

Actual Value:
The package 'aide-0.0.0-0' is not installed"
"""1.4.2 Ensure filesystem integrity is regularly checked"" : [FAILED]

Periodic checking of the filesystem integrity is needed to detect changes to the filesystem.
                Rationale:
                Periodic file checking allows the system administrator to determine on a regular basis if critical files have been changed in an unauthorized fashion.

Solution:
Run the following commands:
                # cp ./config/aidecheck.service /etc/systemd/system/aidecheck.service # cp ./config/aidecheck.timer /etc/systemd/system/aidecheck.timer # chmod 0644 /etc/systemd/system/aidecheck.*  # systemctl reenable aidecheck.timer # systemctl restart aidecheck.timer # systemctl daemon-reload
                OR Run the following command:
                # crontab -u root -e
                Add the following line to the crontab:
                0 5 * * * /usr/sbin/aide --check

See Also: https://workbench.cisecurity.org/files/2485

Reference: CSCv7|14.9,LEVEL|1S

Policy Value:
FAILED"
"""1.5.1 Ensure permissions on bootloader config are configured - grubenv"" : [FAILED]

The grub configuration file contains information on boot settings and passwords for unlocking boot options.
                The grub configuration is usually grub.cfg and grubenv stored in/boot/grub2/`
                Rationale:
                Setting the permissions to read and write for root only prevents non-root users from seeing the boot parameters or changing them. Non-root users who read the boot parameters may be able to identify weaknesses in security upon boot and be able to exploit them.

Solution:
Run the following commands to set permissions on your grub configuration:
                # chown root:root /boot/grub2/grub.cfg
                # chmod og-rwx /boot/grub2/grub.cfg
                # chown root:root /boot/grub2/grubenv
                # chmod og-rwx /boot/grub2/grubenv
                Notes:
                This recommendation is designed around the grub bootloader, if LILO or another bootloader is in use in your environment enact equivalent settings.
                Replace /boot/grub2/grub.cfg and /boot/grub2/grubenv with the appropriate configuration file(s) for your environment

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-53|SI-7(9),CN-L3|8.1.2.3,CN-L3|8.1.4.6,CSCv7|5.1,CSF|PR.DS-6,LEVEL|1S,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4

Policy Value:
file: /boot/grub2/grubenv
group: root
mask: 177
owner: root
system: Linux

Actual Value:
The file /boot/grub2/grubenv with fmode owner: root group: root mode: 0644 attr: -------------------- uid: 0 gid: 0 uneven permissions : FALSE  does not match the policy value owner: root group: root mask: 0177 uneven permissions : TRUE 

/boot/grub2/grubenv"
"""1.5.2 Ensure bootloader password is set"" : [FAILED]

Setting the boot loader password will require that anyone rebooting the system must enter a password before being able to set command line boot parameters
                Rationale:
                Requiring a boot password upon execution of the boot loader will prevent an unauthorized user from entering boot parameters or changing the boot partition. This prevents users from weakening security (e.g. turning off SELinux at boot time).

Solution:
Create an encrypted password with grub2-setpassword :
                # grub2-setpassword Enter password: <password> Confirm password: <password>
                    Run the following command to update the grub2 configuration:
                    # grub2-mkconfig -o /boot/grub2/grub.cfg
                    Impact:
                    If password protection is enabled, only the designated superuser can edit a Grub 2 menu item by pressing ""e"" or access the GRUB 2 command line by pressing ""c""
                    If GRUB 2 is set up to boot automatically to a password-protected menu entry the user has no option to back out of the password prompt to select another menu entry. Holding the SHIFT key will not display the menu in this case. The user must enter the correct username and password. If unable, the configuration files will have to be edited via the LiveCD or other means to fix the problem
                    You can add --unrestricted to the menu entries to allow the system to boot without entering a password. Password will still be required to edit menu items.
                    Notes:
                    This recommendation is designed around the grub2 bootloader, if LILO or another bootloader is in use in your environment enact equivalent settings.
                    Replace `/boot/grub2/grub.cfg with the appropriate grub configuration file for your environment
                    The superuser/user information and password do not have to be contained in the /etc/grub.d/00_header file. The information can be placed in any /etc/grub.d file as long as that file is incorporated into grub.cfg. The user may prefer to enter this data into a custom file, such as /etc/grub.d/40_custom so it is not overwritten should the Grub package be updated. If placing the information in a custom file, do not include the ""cat << EOF"" and ""EOF"" lines as the content is automatically added from these files.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.1,800-53|AC-3,CN-L3|8.1.10.2(c),CN-L3|8.1.4.11(b),CN-L3|8.1.4.2(f),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv7|5.1,CSF|PR.AC-4,CSF|PR.PT-3,ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|1S,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,TBA-FIISB|31.1

Policy Value:
expect: ^[\s]*GRUB2_PASSWORD[\s]*=[^\s]+$
file: /boot/grub2/user.cfg
regex: ^[\s]*GRUB2_PASSWORD
system: Linux

Actual Value:
No files found: /boot/grub2/user.cfg"
"""1.6.1 Ensure core dumps are restricted - sysctl.conf sysctl.d"" : [FAILED]

A core dump is the memory of an executable program. It is generally used to determine why a program aborted. It can also be used to glean confidential information from a core file. The system provides the ability to set a soft limit for core dumps, but this can be overridden by the user.
        Rationale:
        Setting a hard limit on core dumps prevents users from overriding the soft variable. If core dumps are required, consider setting limits for user groups (see limits.conf(5) ). In addition, setting the fs.suid_dumpable variable to 0 will prevent setuid programs from dumping core.

Solution:
Add the following line to /etc/security/limits.conf or a /etc/security/limits.d/* file:
        * hard core 0
        Set the following parameter in /etc/sysctl.conf or a /etc/sysctl.d/* file:
        fs.suid_dumpable = 0
        Run the following command to set the active kernel parameter:
        # sysctl -w fs.suid_dumpable=0
        If systemd-coredump is installed: edit /etc/systemd/coredump.conf and add/modify the following lines:
        Storage=none ProcessSizeMax=0
        Run the command:
        systemctl daemon-reload

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.7,800-53|AC-6(10),CSCv7|5.1,CSF|PR.AC-4,LEVEL|1S

Policy Value:
cmd: /usr/bin/grep -s -E '^[[:space:]]*fs\.suid_dumpable[[:space:]]*=[[:space:]]*0[[:space:]]*$' /etc/sysctl.conf /etc/sysctl.d/* | /usr/bin/awk '{print} END {if (NR != 0) print ""pass"" ; else print ""fail""}'
expect: ^pass$
system: Linux

Actual Value:
The command '/usr/bin/grep -s -E '^[[:space:]]*fs\.suid_dumpable[[:space:]]*=[[:space:]]*0[[:space:]]*$' /etc/sysctl.conf /etc/sysctl.d/* | /usr/bin/awk '{print} END {if (NR != 0) print ""pass"" ; else print ""fail""}'' returned : 

fail"
"""1.6.2 Ensure address space layout randomization (ASLR) is enabled - sysctl.conf sysctl.d"" : [FAILED]

Address space layout randomization (ASLR) is an exploit mitigation technique which randomly arranges the address space of key data areas of a process.
        Rationale:
        Randomly placing virtual memory regions will make it difficult to write memory page exploits as the memory placement will be consistently shifting.

Solution:
Set the following parameter in /etc/sysctl.conf or a /etc/sysctl.d/* file:
        kernel.randomize_va_space = 2
        Run the following command to set the active kernel parameter:
        # sysctl -w kernel.randomize_va_space=2

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-53|SI-16,CSCv7|8.3,LEVEL|1S

Policy Value:
cmd: /usr/bin/grep -s -E '^[[:space:]]*kernel\.randomize_va_space[[:space:]]*=[[:space:]]*2[[:space:]]*$' /etc/sysctl.conf /etc/sysctl.d/* | /usr/bin/awk '{print} END {if (NR != 0) print ""pass"" ; else print ""fail""}'
dont_echo_cmd: YES
expect: ^pass$
system: Linux

Actual Value:
The command returned : 

fail"
"""1.8.1.1 Ensure message of the day is configured properly - banner text"" : [FAILED]

The contents of the /etc/motd file are displayed to users after login and function as a message of the day for authenticated users.
        Unix-based systems have typically displayed information about the OS release and patch level upon logging in to the system. This information can be useful to developers who are developing software for a particular OS platform. If mingetty(8) supports the following options, they display operating system information: m - machine architecture r - operating system release s - operating system name v - operating system version
        Rationale:
        Warning messages inform users who are attempting to login to the system of their legal status regarding the system and must include the name of the organization that owns the system and any monitoring policies that are in place. Displaying OS and patch level information in login banners also has the side effect of providing detailed system information to attackers attempting to target specific exploits of a system. Authorized users can easily get this information by running the "" uname -a "" command once they have logged in.

Solution:
Edit the /etc/motd file with the appropriate contents according to your site policy, remove any instances of m , r , s , v or references to the OS platform OR If the motd is not used, this file can be removed. Run the following command to remove the motd file:
        # rm /etc/motd

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.9,800-53|AC-8,CSCv7|5.1,ITSG-33|AC-8,LEVEL|1S,NESA|M1.3.6,TBA-FIISB|45.2.4

Policy Value:
All activities performed on this system will be monitored.

Actual Value:
First ERROR: This is != All activities
This is a singapore MINISTRY OF DEFENCE protected computer system. Unauthorised access, use, reproduction, possession, modification, interception, damage or transfer (including such attempts) of any content in this system are serious offenses under the Computer Misuse Act and Cybersecurity Act (Chapter 50A) . If found guilty, an offender can be fined up to $100,000 and/or imprisoned up to 20 years . If you are not authorised to use this system, DO NOT LOG IN OR ATTEMPT TO LOG IN!"
"""1.8.1.2 Ensure local login warning banner is configured properly - banner text"" : [FAILED]

The contents of the /etc/issue file are displayed to users prior to login for local terminals.
        Unix-based systems have typically displayed information about the OS release and patch level upon logging in to the system. This information can be useful to developers who are developing software for a particular OS platform. If mingetty(8) supports the following options, they display operating system information: m - machine architecture r - operating system release s - operating system name v - operating system version - or the operating system's name
        Rationale:
        Warning messages inform users who are attempting to login to the system of their legal status regarding the system and must include the name of the organization that owns the system and any monitoring policies that are in place. Displaying OS and patch level information in login banners also has the side effect of providing detailed system information to attackers attempting to target specific exploits of a system. Authorized users can easily get this information by running the "" uname -a "" command once they have logged in.

Solution:
Edit the /etc/issue file with the appropriate contents according to your site policy, remove any instances of m , r , s , v or references to the OS platform
        # echo ""Authorized uses only. All activity may be monitored and reported."" > /etc/issue

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.9,800-53|AC-8,CSCv7|5.1,ITSG-33|AC-8,LEVEL|1S,NESA|M1.3.6,TBA-FIISB|45.2.4

Policy Value:
All activities performed on this system will be monitored.

Actual Value:
First ERROR: This is != All activities
This is a singapore MINISTRY OF DEFENCE protected computer system. Unauthorised access, use, reproduction, possession, modification, interception, damage or transfer (including such attempts) of any content in this system are serious offenses under the Computer Misuse Act and Cybersecurity Act (Chapter 50A) . If found guilty, an offender can be fined up to $100,000 and/or imprisoned up to 20 years . If you are not authorised to use this system, DO NOT LOG IN OR ATTEMPT TO LOG IN!"
"""1.8.1.3 Ensure remote login warning banner is configured properly - banner text"" : [FAILED]

The contents of the /etc/issue.net file are displayed to users prior to login for remote connections from configured services.
        Unix-based systems have typically displayed information about the OS release and patch level upon logging in to the system. This information can be useful to developers who are developing software for a particular OS platform. If mingetty(8) supports the following options, they display operating system information: m - machine architecture r - operating system release s - operating system name v - operating system version
        Rationale:
        Warning messages inform users who are attempting to login to the system of their legal status regarding the system and must include the name of the organization that owns the system and any monitoring policies that are in place. Displaying OS and patch level information in login banners also has the side effect of providing detailed system information to attackers attempting to target specific exploits of a system. Authorized users can easily get this information by running the "" uname -a "" command once they have logged in.

Solution:
Edit the /etc/issue.net file with the appropriate contents according to your site policy, remove any instances of m , r , s , v or references to the OS platform
        # echo ""Authorized uses only. All activity may be monitored and reported."" > /etc/issue.net

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.9,800-53|AC-8,CSCv7|5.1,ITSG-33|AC-8,LEVEL|1S,NESA|M1.3.6,TBA-FIISB|45.2.4

Policy Value:
All activities performed on this system will be monitored.

Actual Value:
First ERROR: This is != All activities
This is a singapore MINISTRY OF DEFENCE protected computer system. Unauthorised access, use, reproduction, possession, modification, interception, damage or transfer (including such attempts) of any content in this system are serious offenses under the Computer Misuse Act and Cybersecurity Act (Chapter 50A) . If found guilty, an offender can be fined up to $100,000 and/or imprisoned up to 20 years . If you are not authorised to use this system, DO NOT LOG IN OR ATTEMPT TO LOG IN!"
"""1.9 Ensure updates, patches, and additional security software are installed"" : [WARNING]

Periodically patches are released for included software either due to security flaws or to include additional functionality.
        Rationale:
        Newer patches may contain security enhancements that would not be available through the latest full update. As a result, it is recommended that the latest software patches be used to take advantage of the latest functionality. As with any software installation, organizations need to determine if a given update meets their requirements and verify the compatibility and supportability of any additional software against the update revision that is selected.

        NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
Use your package manager to update all packages on the system according to site policy. The following command will install all available security updates:
        # dnf update --security
        Notes:
        Site policy may mandate a testing period before install onto production systems for available updates.
        The audit and remediation here only cover security updates. Non-security updates can be audited with and comparing against site policy:
        # dnf check-update

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.14.1,800-53|SI-2,CN-L3|8.1.10.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.4.4(e),CN-L3|8.5.4.1(b),CN-L3|8.5.4.1(d),CN-L3|8.5.4.1(e),CSCv7|3.4,CSF|ID.RA-1,CSF|PR.IP-12,ITSG-33|SI-2,LEVEL|1S,NESA|T7.6.2,NESA|T7.7.1,NIAv2|AM38,NIAv2|AM39,NIAv2|PR9,NIAv2|SS14b,SWIFT-CSCv1|2.2

Policy Value:
cmd: /usr/bin/yum check-update --security
expect: ManualReviewRequired
system: Linux

Actual Value:
The command '/usr/bin/yum check-update --security' returned : 

Errors during downloading metadata for repository 'local-repo-in-iso-BaseOS-by-yum-repo-config-helper':
  - Curl error (37): Couldn't read a file:// file for file:///mnt/usb/BaseOS/repodata/repomd.xml [Couldn't open file /mnt/usb/BaseOS/repodata/repomd.xml]

Error: Failed to download metadata for repo 'local-repo-in-iso-BaseOS-by-yum-repo-config-helper': Cannot download repomd.xml: Cannot download repodata/repomd.xml: All mirrors were tried
Updating Subscription Management repositories.
Unable to read consumer identity

This system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.

Red Hat Enterprise Linux \8 - BaseOS - \x86_64  0.0  B/s |   0  B     00:00"
"""2.2.1.1 Ensure time synchronization is in use"" : [FAILED]

System time should be synchronized between all systems in an environment. This is typically done by establishing an authoritative time server or set of servers and having all systems synchronize their clocks to them.
                Rationale:
                Time synchronization is important to support time sensitive security mechanisms like Kerberos and also ensures log files have consistent time records across the enterprise, which aids in forensic investigations.

Solution:
On physical systems or virtual systems where host based time synchronization is not available install chrony: Run the folloing command to install chrony:
                # dnf install chrony
                On virtual systems where host based time synchronization is available consult your virtualization software documentation and setup host based synchronization.
                Notes:
                systemd-timesyncd is part of systemd. Some versions of systemd have been compiled without systemd-timesycnd. On these distributions, chrony or NTP should be used instead of systemd-timesycnd.

See Also: https://workbench.cisecurity.org/files/2485

Reference: CSCv7|6.1,LEVEL|1NS

Policy Value:
FAILED"
"""2.2.1.2 Ensure chrony is configured - NTP server"" : [WARNING]

chrony is a daemon which implements the Network Time Protocol (NTP) is designed to synchronize system clocks across a variety of systems and use a source that is highly accurate. More information on chrony can be found at http://chrony.tuxfamily.org/. chrony can be configured to be a client and/or a server.
                Rationale:
                If chrony is in use on the system proper configuration is vital to ensuring time synchronization is working properly.
                This recommendation only applies if chrony is in use on the system.

                NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance.

Solution:
Add or edit server or pool lines to /etc/chrony.conf as appropriate:
                server <remote-server>
                    Configure chrony to run as the chrony user

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.3.7,800-53|AU-8(1),CSCv7|6.1,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.4,ITSG-33|AU-8(1),LEVEL|1S,NESA|T3.6.7,NIAv2|NS44,NIAv2|NS45,NIAv2|NS46,NIAv2|NS47

Policy Value:
WARNING"
"""2.2.1.2 Ensure chrony is configured - OPTIONS"" : [WARNING]

chrony is a daemon which implements the Network Time Protocol (NTP) is designed to synchronize system clocks across a variety of systems and use a source that is highly accurate. More information on chrony can be found at http://chrony.tuxfamily.org/. chrony can be configured to be a client and/or a server.
                Rationale:
                If chrony is in use on the system proper configuration is vital to ensuring time synchronization is working properly.
                This recommendation only applies if chrony is in use on the system.

                NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance.

Solution:
Add or edit server or pool lines to /etc/chrony.conf as appropriate:
                server <remote-server>
                    Configure chrony to run as the chrony user

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|6.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3

Policy Value:
WARNING"
"""3.1.2 Ensure packet redirect sending is disabled - 'net.ipv4.conf.all.send_redirects = 0'"" : [FAILED]

ICMP Redirects are used to send routing information to other hosts. As a host itself does not act as a router (in a host only configuration), there is no need to send redirects.
        Rationale:
        An attacker could use a compromised host to send invalid ICMP redirects to other router devices in an attempt to corrupt routing and have users access a system set up by the attacker as opposed to a valid system.

Solution:
Set the following parameters in /etc/sysctl.conf or a /etc/sysctl.d/* file:
        net.ipv4.conf.all.send_redirects = 0 net.ipv4.conf.default.send_redirects = 0
        Run the following commands to set the active kernel parameters:
        # sysctl -w net.ipv4.conf.all.send_redirects=0 # sysctl -w net.ipv4.conf.default.send_redirects=0 # sysctl -w net.ipv4.route.flush=1

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|5.1,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/sysctl net.ipv4.conf.all.send_redirects
expect: ^[\s]*net\.ipv4\.conf\.all\.send_redirects[\s]*=[\s]*0[\s]*$
system: Linux

Actual Value:
The command '/usr/sbin/sysctl net.ipv4.conf.all.send_redirects' returned : 

net.ipv4.conf.all.send_redirects = 1"
"""3.1.2 Ensure packet redirect sending is disabled - 'net.ipv4.conf.default.send_redirects = 0'"" : [FAILED]

ICMP Redirects are used to send routing information to other hosts. As a host itself does not act as a router (in a host only configuration), there is no need to send redirects.
        Rationale:
        An attacker could use a compromised host to send invalid ICMP redirects to other router devices in an attempt to corrupt routing and have users access a system set up by the attacker as opposed to a valid system.

Solution:
Set the following parameters in /etc/sysctl.conf or a /etc/sysctl.d/* file:
        net.ipv4.conf.all.send_redirects = 0 net.ipv4.conf.default.send_redirects = 0
        Run the following commands to set the active kernel parameters:
        # sysctl -w net.ipv4.conf.all.send_redirects=0 # sysctl -w net.ipv4.conf.default.send_redirects=0 # sysctl -w net.ipv4.route.flush=1

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|5.1,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/sysctl net.ipv4.conf.default.send_redirects
expect: ^[\s]*net\.ipv4\.conf\.default\.send_redirects[\s]*=[\s]*0[\s]*$
system: Linux

Actual Value:
The command '/usr/sbin/sysctl net.ipv4.conf.default.send_redirects' returned : 

net.ipv4.conf.default.send_redirects = 1"
"""3.2.1 Ensure source routed packets are not accepted - files 'net.ipv4.conf.default.accept_source_route = 0'"" : [FAILED]

In networking, source routing allows a sender to partially or fully specify the route packets take through a network. In contrast, non-source routed packets travel a path determined by routers in the network. In some cases, systems may not be routable or reachable from some locations (e.g. private addresses vs. Internet routable), and so source routed packets would need to be used.
        Rationale:
        Setting net.ipv4.conf.all.accept_source_route, net.ipv4.conf.default.accept_source_route, net.ipv6.conf.all.accept_source_route and net.ipv6.conf.default.accept_source_route to 0 disables the system from accepting source routed packets. Assume this system was capable of routing packets to Internet routable addresses on one interface and private addresses on another interface. Assume that the private addresses were not routable to the Internet routable addresses and vice versa. Under normal routing circumstances, an attacker from the Internet routable addresses could not use the system as a way to reach the private address systems. If, however, source routed packets were allowed, they could be used to gain access to the private address systems as the route could be specified, rather than rely on routing protocols that did not allow this routing.

Solution:
Set the following parameters in /etc/sysctl.conf or a /etc/sysctl.d/* file:
        net.ipv4.conf.all.accept_source_route = 0 net.ipv4.conf.default.accept_source_route = 0 net.ipv6.conf.all.accept_source_route = 0 net.ipv6.conf.default.accept_source_route = 0
        Run the following commands to set the active kernel parameters:
        # sysctl -w net.ipv4.conf.all.accept_source_route=0 # sysctl -w net.ipv4.conf.default.accept_source_route=0 # sysctl -w net.ipv6.conf.all.accept_source_route=0 # sysctl -w net.ipv6.conf.default.accept_source_route=0 # sysctl -w net.ipv4.route.flush=1 # sysctl -w net.ipv6.route.flush=1

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|5.1,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/bin/grep -s -E '^[[:space:]]*net\.ipv4\.conf\.default\.accept_source_route[[:space:]]*=[[:space:]]*0[[:space:]]*$' /etc/sysctl.conf /etc/sysctl.d/*.conf /usr/lib/sysctl.d/*.conf /run/sysctl.d/*.conf | /usr/bin/awk '{print} END {if (NR != 0) print ""pass"" ; else print ""fail""}'
expect: ^pass$
system: Linux

Actual Value:
The command '/usr/bin/grep -s -E '^[[:space:]]*net\.ipv4\.conf\.default\.accept_source_route[[:space:]]*=[[:space:]]*0[[:space:]]*$' /etc/sysctl.conf /etc/sysctl.d/*.conf /usr/lib/sysctl.d/*.conf /run/sysctl.d/*.conf | /usr/bin/awk '{print} END {if (NR != 0) print ""pass"" ; else print ""fail""}'' returned : 

fail"
"""3.2.1 Ensure source routed packets are not accepted - 'net.ipv4.conf.default.accept_source_route = 0'"" : [FAILED]

In networking, source routing allows a sender to partially or fully specify the route packets take through a network. In contrast, non-source routed packets travel a path determined by routers in the network. In some cases, systems may not be routable or reachable from some locations (e.g. private addresses vs. Internet routable), and so source routed packets would need to be used.
        Rationale:
        Setting net.ipv4.conf.all.accept_source_route, net.ipv4.conf.default.accept_source_route, net.ipv6.conf.all.accept_source_route and net.ipv6.conf.default.accept_source_route to 0 disables the system from accepting source routed packets. Assume this system was capable of routing packets to Internet routable addresses on one interface and private addresses on another interface. Assume that the private addresses were not routable to the Internet routable addresses and vice versa. Under normal routing circumstances, an attacker from the Internet routable addresses could not use the system as a way to reach the private address systems. If, however, source routed packets were allowed, they could be used to gain access to the private address systems as the route could be specified, rather than rely on routing protocols that did not allow this routing.

Solution:
Set the following parameters in /etc/sysctl.conf or a /etc/sysctl.d/* file:
        net.ipv4.conf.all.accept_source_route = 0 net.ipv4.conf.default.accept_source_route = 0 net.ipv6.conf.all.accept_source_route = 0 net.ipv6.conf.default.accept_source_route = 0
        Run the following commands to set the active kernel parameters:
        # sysctl -w net.ipv4.conf.all.accept_source_route=0 # sysctl -w net.ipv4.conf.default.accept_source_route=0 # sysctl -w net.ipv6.conf.all.accept_source_route=0 # sysctl -w net.ipv6.conf.default.accept_source_route=0 # sysctl -w net.ipv4.route.flush=1 # sysctl -w net.ipv6.route.flush=1

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|5.1,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/sysctl net.ipv4.conf.default.accept_source_route
expect: ^[\s]*net\.ipv4\.conf\.default\.accept_source_route[\s]*=[\s]*0[\s]*$
system: Linux

Actual Value:
The command '/usr/sbin/sysctl net.ipv4.conf.default.accept_source_route' returned : 

net.ipv4.conf.default.accept_source_route = 1"
"""3.2.2 Ensure ICMP redirects are not accepted - 'net.ipv4.conf.all.accept_redirects = 0'"" : [FAILED]

ICMP redirect messages are packets that convey routing information and tell your host (acting as a router) to send packets via an alternate path. It is a way of allowing an outside routing device to update your system routing tables. By setting net.ipv4.conf.all.accept_redirects and net.ipv6.conf.all.accept_redirects to 0, the system will not accept any ICMP redirect messages, and therefore, won't allow outsiders to update the system's routing tables.
        Rationale:
        Attackers could use bogus ICMP redirect messages to maliciously alter the system routing tables and get them to send packets to incorrect networks and allow your system packets to be captured.

Solution:
Set the following parameters in /etc/sysctl.conf or a /etc/sysctl.d/* file:
        net.ipv4.conf.all.accept_redirects = 0 net.ipv4.conf.default.accept_redirects = 0 net.ipv6.conf.all.accept_redirects = 0 net.ipv6.conf.default.accept_redirects = 0
        Run the following commands to set the active kernel parameters:
        # sysctl -w net.ipv4.conf.all.accept_redirects=0 # sysctl -w net.ipv4.conf.default.accept_redirects=0 # sysctl -w net.ipv6.conf.all.accept_redirects=0 # sysctl -w net.ipv6.conf.default.accept_redirects=0 # sysctl -w net.ipv4.route.flush=1 # sysctl -w net.ipv6.route.flush=1

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|5.1,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/sysctl net.ipv4.conf.all.accept_redirects
expect: ^[\s]*net\.ipv4\.conf\.all\.accept_redirects[\s]*=[\s]*0[\s]*$
system: Linux

Actual Value:
The command '/usr/sbin/sysctl net.ipv4.conf.all.accept_redirects' returned : 

net.ipv4.conf.all.accept_redirects = 1"
"""3.2.2 Ensure ICMP redirects are not accepted - 'net.ipv4.conf.default.accept_redirects = 0'"" : [FAILED]

ICMP redirect messages are packets that convey routing information and tell your host (acting as a router) to send packets via an alternate path. It is a way of allowing an outside routing device to update your system routing tables. By setting net.ipv4.conf.all.accept_redirects and net.ipv6.conf.all.accept_redirects to 0, the system will not accept any ICMP redirect messages, and therefore, won't allow outsiders to update the system's routing tables.
        Rationale:
        Attackers could use bogus ICMP redirect messages to maliciously alter the system routing tables and get them to send packets to incorrect networks and allow your system packets to be captured.

Solution:
Set the following parameters in /etc/sysctl.conf or a /etc/sysctl.d/* file:
        net.ipv4.conf.all.accept_redirects = 0 net.ipv4.conf.default.accept_redirects = 0 net.ipv6.conf.all.accept_redirects = 0 net.ipv6.conf.default.accept_redirects = 0
        Run the following commands to set the active kernel parameters:
        # sysctl -w net.ipv4.conf.all.accept_redirects=0 # sysctl -w net.ipv4.conf.default.accept_redirects=0 # sysctl -w net.ipv6.conf.all.accept_redirects=0 # sysctl -w net.ipv6.conf.default.accept_redirects=0 # sysctl -w net.ipv4.route.flush=1 # sysctl -w net.ipv6.route.flush=1

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|5.1,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/sysctl net.ipv4.conf.default.accept_redirects
expect: ^[\s]*net\.ipv4\.conf\.default\.accept_redirects[\s]*=[\s]*0[\s]*$
system: Linux

Actual Value:
The command '/usr/sbin/sysctl net.ipv4.conf.default.accept_redirects' returned : 

net.ipv4.conf.default.accept_redirects = 1"
"""3.2.3 Ensure secure ICMP redirects are not accepted - 'net.ipv4.conf.all.secure_redirects = 0'"" : [FAILED]

Secure ICMP redirects are the same as ICMP redirects, except they come from gateways listed on the default gateway list. It is assumed that these gateways are known to your system, and that they are likely to be secure.
        Rationale:
        It is still possible for even known gateways to be compromised. Setting net.ipv4.conf.all.secure_redirects to 0 protects the system from routing table updates by possibly compromised known gateways.

Solution:
Set the following parameters in /etc/sysctl.conf or a /etc/sysctl.d/* file:
        net.ipv4.conf.all.secure_redirects = 0 net.ipv4.conf.default.secure_redirects = 0
        Run the following commands to set the active kernel parameters:
        # sysctl -w net.ipv4.conf.all.secure_redirects=0 # sysctl -w net.ipv4.conf.default.secure_redirects=0 # sysctl -w net.ipv4.route.flush=1

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|5.1,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/sysctl net.ipv4.conf.all.secure_redirects
expect: ^[\s]*net\.ipv4\.conf\.all\.secure_redirects[\s]*=[\s]*0[\s]*$
system: Linux

Actual Value:
The command '/usr/sbin/sysctl net.ipv4.conf.all.secure_redirects' returned : 

net.ipv4.conf.all.secure_redirects = 1"
"""3.2.3 Ensure secure ICMP redirects are not accepted - 'net.ipv4.conf.default.secure_redirects = 0'"" : [FAILED]

Secure ICMP redirects are the same as ICMP redirects, except they come from gateways listed on the default gateway list. It is assumed that these gateways are known to your system, and that they are likely to be secure.
        Rationale:
        It is still possible for even known gateways to be compromised. Setting net.ipv4.conf.all.secure_redirects to 0 protects the system from routing table updates by possibly compromised known gateways.

Solution:
Set the following parameters in /etc/sysctl.conf or a /etc/sysctl.d/* file:
        net.ipv4.conf.all.secure_redirects = 0 net.ipv4.conf.default.secure_redirects = 0
        Run the following commands to set the active kernel parameters:
        # sysctl -w net.ipv4.conf.all.secure_redirects=0 # sysctl -w net.ipv4.conf.default.secure_redirects=0 # sysctl -w net.ipv4.route.flush=1

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|5.1,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/sysctl net.ipv4.conf.default.secure_redirects
expect: ^[\s]*net\.ipv4\.conf\.default\.secure_redirects[\s]*=[\s]*0[\s]*$
system: Linux

Actual Value:
The command '/usr/sbin/sysctl net.ipv4.conf.default.secure_redirects' returned : 

net.ipv4.conf.default.secure_redirects = 1"
"""3.2.4 Ensure suspicious packets are logged - 'net.ipv4.conf.all.log_martians = 1'"" : [FAILED]

When enabled, this feature logs packets with un-routable source addresses to the kernel log.
        Rationale:
        Enabling this feature and logging these packets allows an administrator to investigate the possibility that an attacker is sending spoofed packets to their system.

Solution:
Set the following parameters in /etc/sysctl.conf or a /etc/sysctl.d/* file:
        net.ipv4.conf.all.log_martians = 1 net.ipv4.conf.default.log_martians = 1
        Run the following commands to set the active kernel parameters:
        # sysctl -w net.ipv4.conf.all.log_martians=1 # sysctl -w net.ipv4.conf.default.log_martians=1 # sysctl -w net.ipv4.route.flush=1

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSCv7|6.2,CSCv7|6.3,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,LEVEL|1S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1

Policy Value:
cmd: /usr/sbin/sysctl net.ipv4.conf.all.log_martians
expect: ^[\s]*net\.ipv4\.conf\.all\.log_martians[\s]*=[\s]*1[\s]*$
system: Linux

Actual Value:
The command '/usr/sbin/sysctl net.ipv4.conf.all.log_martians' returned : 

net.ipv4.conf.all.log_martians = 0"
"""3.2.4 Ensure suspicious packets are logged - 'net.ipv4.conf.default.log_martians = 1'"" : [FAILED]

When enabled, this feature logs packets with un-routable source addresses to the kernel log.
        Rationale:
        Enabling this feature and logging these packets allows an administrator to investigate the possibility that an attacker is sending spoofed packets to their system.

Solution:
Set the following parameters in /etc/sysctl.conf or a /etc/sysctl.d/* file:
        net.ipv4.conf.all.log_martians = 1 net.ipv4.conf.default.log_martians = 1
        Run the following commands to set the active kernel parameters:
        # sysctl -w net.ipv4.conf.all.log_martians=1 # sysctl -w net.ipv4.conf.default.log_martians=1 # sysctl -w net.ipv4.route.flush=1

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSCv7|6.2,CSCv7|6.3,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,LEVEL|1S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1

Policy Value:
cmd: /usr/sbin/sysctl net.ipv4.conf.default.log_martians
expect: ^[\s]*net\.ipv4\.conf\.default\.log_martians[\s]*=[\s]*1[\s]*$
system: Linux

Actual Value:
The command '/usr/sbin/sysctl net.ipv4.conf.default.log_martians' returned : 

net.ipv4.conf.default.log_martians = 0"
"""3.2.7 Ensure Reverse Path Filtering is enabled - files 'net.ipv4.conf.default.rp_filter = 1'"" : [FAILED]

Setting net.ipv4.conf.all.rp_filter and net.ipv4.conf.default.rp_filter to 1 forces the Linux kernel to utilize reverse path filtering on a received packet to determine if the packet was valid. Essentially, with reverse path filtering, if the return packet does not go out the same interface that the corresponding source packet came from, the packet is dropped (and logged if log_martians is set).
        Rationale:
        Setting these flags is a good way to deter attackers from sending your system bogus packets that cannot be responded to. One instance where this feature breaks down is if asymmetrical routing is employed. This would occur when using dynamic routing protocols (bgp, ospf, etc) on your system. If you are using asymmetrical routing on your system, you will not be able to enable this feature without breaking the routing.

Solution:
Run the following command to restore the default net.ipv4.conf.all.rp_filter = 1 parameter and set the active kernel parameter:
        # grep -Els ""^s*net.ipv4.conf.all.rp_filters*=s*0"" /etc/sysctl.conf /etc/sysctl.d/*.conf /usr/lib/sysctl.d/*.conf /run/sysctl.d/*.conf | while read filename; do sed -ri ""s/^s*(net.ipv4.net.ipv4.conf.all.rp_filters*)(=)(s*S+b).*$/# *REMOVED* 1/"" $filename; done; sysctl -w net.ipv4.conf.all.rp_filter=1; sysctl -w net.ipv4.route.flush=1
        Set the following parameter in /etc/sysctl.conf or a /etc/sysctl.d/* file:
        net.ipv4.conf.default.rp_filter=1
        Run the following commands to set the active kernel parameter:
        # sysctl -w net.ipv4.conf.default.rp_filter=1 # sysctl -w net.ipv4.route.flush=1

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|5.1,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/bin/grep -s -E '^[[:space:]]*net\.ipv4\.conf\.default\.rp_filter[[:space:]]*=[[:space:]]*1[[:space:]]*$' /etc/sysctl.conf /etc/sysctl.d/*.conf /usr/lib/sysctl.d/*.conf /run/sysctl.d/*.conf | /usr/bin/awk '{print} END {if (NR != 0) print ""pass"" ; else print ""fail""}'
expect: ^pass$
system: Linux

Actual Value:
The command '/usr/bin/grep -s -E '^[[:space:]]*net\.ipv4\.conf\.default\.rp_filter[[:space:]]*=[[:space:]]*1[[:space:]]*$' /etc/sysctl.conf /etc/sysctl.d/*.conf /usr/lib/sysctl.d/*.conf /run/sysctl.d/*.conf | /usr/bin/awk '{print} END {if (NR != 0) print ""pass"" ; else print ""fail""}'' returned : 

fail"
"""3.2.7 Ensure Reverse Path Filtering is enabled - 'net.ipv4.conf.default.rp_filter = 1'"" : [FAILED]

Setting net.ipv4.conf.all.rp_filter and net.ipv4.conf.default.rp_filter to 1 forces the Linux kernel to utilize reverse path filtering on a received packet to determine if the packet was valid. Essentially, with reverse path filtering, if the return packet does not go out the same interface that the corresponding source packet came from, the packet is dropped (and logged if log_martians is set).
        Rationale:
        Setting these flags is a good way to deter attackers from sending your system bogus packets that cannot be responded to. One instance where this feature breaks down is if asymmetrical routing is employed. This would occur when using dynamic routing protocols (bgp, ospf, etc) on your system. If you are using asymmetrical routing on your system, you will not be able to enable this feature without breaking the routing.

Solution:
Run the following command to restore the default net.ipv4.conf.all.rp_filter = 1 parameter and set the active kernel parameter:
        # grep -Els ""^s*net.ipv4.conf.all.rp_filters*=s*0"" /etc/sysctl.conf /etc/sysctl.d/*.conf /usr/lib/sysctl.d/*.conf /run/sysctl.d/*.conf | while read filename; do sed -ri ""s/^s*(net.ipv4.net.ipv4.conf.all.rp_filters*)(=)(s*S+b).*$/# *REMOVED* 1/"" $filename; done; sysctl -w net.ipv4.conf.all.rp_filter=1; sysctl -w net.ipv4.route.flush=1
        Set the following parameter in /etc/sysctl.conf or a /etc/sysctl.d/* file:
        net.ipv4.conf.default.rp_filter=1
        Run the following commands to set the active kernel parameter:
        # sysctl -w net.ipv4.conf.default.rp_filter=1 # sysctl -w net.ipv4.route.flush=1

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|5.1,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/sysctl net.ipv4.conf.default.rp_filter
expect: ^[\s]*net\.ipv4\.conf\.default\.rp_filter[\s]*=[\s]*1[\s]*$
system: Linux

Actual Value:
The command '/usr/sbin/sysctl net.ipv4.conf.default.rp_filter' returned : 

net.ipv4.conf.default.rp_filter = 0"
"""3.2.9 Ensure IPv6 router advertisements are not accepted - 'net.ipv6.conf.all.accept_ra = 0'"" : [FAILED]

This setting disables the system's ability to accept IPv6 router advertisements.
        Rationale:
        It is recommended that systems do not accept router advertisements as they could be tricked into routing traffic to compromised machines. Setting hard routes within the system (usually a single default route to a trusted router) protects the system from bad routes.

Solution:
Set the following parameters in /etc/sysctl.conf or a /etc/sysctl.d/* file:
        net.ipv6.conf.all.accept_ra = 0 net.ipv6.conf.default.accept_ra = 0
        Run the following commands to set the active kernel parameters:
        # sysctl -w net.ipv6.conf.all.accept_ra=0
        # sysctl -w net.ipv6.conf.default.accept_ra=0
        # sysctl -w net.ipv6.route.flush=1

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|5.1,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/sysctl net.ipv6.conf.all.accept_ra
expect: ^[\s]*net\.ipv6\.conf\.all\.accept_ra[\s]*=[\s]*0[\s]*$
system: Linux

Actual Value:
The command '/usr/sbin/sysctl net.ipv6.conf.all.accept_ra' returned : 

net.ipv6.conf.all.accept_ra = 1"
"""3.2.9 Ensure IPv6 router advertisements are not accepted - 'net.ipv6.conf.default.accept_ra = 0'"" : [FAILED]

This setting disables the system's ability to accept IPv6 router advertisements.
        Rationale:
        It is recommended that systems do not accept router advertisements as they could be tricked into routing traffic to compromised machines. Setting hard routes within the system (usually a single default route to a trusted router) protects the system from bad routes.

Solution:
Set the following parameters in /etc/sysctl.conf or a /etc/sysctl.d/* file:
        net.ipv6.conf.all.accept_ra = 0 net.ipv6.conf.default.accept_ra = 0
        Run the following commands to set the active kernel parameters:
        # sysctl -w net.ipv6.conf.all.accept_ra=0
        # sysctl -w net.ipv6.conf.default.accept_ra=0
        # sysctl -w net.ipv6.route.flush=1

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|5.1,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/sysctl net.ipv6.conf.default.accept_ra
expect: ^[\s]*net\.ipv6\.conf\.default\.accept_ra[\s]*=[\s]*0[\s]*$
system: Linux

Actual Value:
The command '/usr/sbin/sysctl net.ipv6.conf.default.accept_ra' returned : 

net.ipv6.conf.default.accept_ra = 1"
"""3.4.2.4 Ensure default zone is set"" : [WARNING]

A firewall zone defines the trust level for a connection, interface or source address binding. This is a one to many relation, which means that a connection, interface or source can only be part of one zone, but a zone can be used for many network connections, interfaces and sources.
        The default zone is the zone that is used for everything that is not explicitely bound/assigned to another zone.
        That means that if there is no zone assigned to a connection, interface or source, only the default zone is used. The default zone is not always listed as being used for an interface or source as it will be used for it either way. This depends on the manager of the interfaces.
        Connections handled by NetworkManager are listed as NetworkManager requests to add the zone binding for the interface used by the connection. Also interfaces under control of the network service are listed also because the service requests it.
        Rationale:
        Because the default zone is the zone that is used for everything that is not explicitly bound/assigned to another zone, it is important for the default zone to set

        NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
Run the following command to set the default zone:
        # firewall-cmd --set-default-zone=<NAME_OF_ZONE>
            Example:
            # firewall-cmd --set-default-zone=public

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-171|3.13.5,800-53|SC-7,CN-L3|8.1.10.6(j),CSCv7|9.4,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7,LEVEL|1S,NESA|T4.5.4,NIAv2|GS1,NIAv2|GS2a,NIAv2|GS2b,TBA-FIISB|43.1

Policy Value:
cmd: /usr/bin/firewall-cmd --get-default-zone
expect: 
system: Linux

Actual Value:
The command '/usr/bin/firewall-cmd --get-default-zone' returned : 

public"
"""3.4.2.5 Ensure network interfaces are assigned to appropriate zone"" : [WARNING]

firewall zones define the trust level of network connections or interfaces.
        Rationale:
        A network interface not assigned to the appropriate zone can allow unexpected or undesired network traffic to be accepted on the interface

        NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
Run the following command to assign an interface to the approprate zone.
        # firewall-cmd --zone=<Zone NAME> --change-interface=<INTERFACE NAME>
            Example:
            # firewall-cmd --zone=customezone --change-interface=eth0
            Impact:
            Changing firewall settings while connected over network can result in being locked out of the system.
            Default Value:
            If the zone is not set in the configuration file, the interfaces will be assigned to the default zone defined in the firewalld configuration

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-171|3.13.5,800-53|SC-7,CN-L3|8.1.10.6(j),CSCv7|9.4,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7,LEVEL|1NS,NESA|T4.5.4,NIAv2|GS1,NIAv2|GS2a,NIAv2|GS2b,TBA-FIISB|43.1

Policy Value:
cmd: /usr/bin/nmcli -t connection show | /usr/bin/awk -F: '{if($4){print $4}}' | while read INT; do /usr/bin/firewall-cmd --get-active-zones | /usr/bin/grep -B1 $INT; done
expect: 
system: Linux

Actual Value:
The command '/usr/bin/nmcli -t connection show | /usr/bin/awk -F: '{if($4){print $4}}' | while read INT; do /usr/bin/firewall-cmd --get-active-zones | /usr/bin/grep -B1 $INT; done' returned : 

public
  interfaces: eth1 eth2
public
  interfaces: eth1 eth2"
"""3.4.2.6 Ensure unnecessary services and ports are not accepted"" : [WARNING]

Services and ports can be accepted or explicitly rejected or dropped by a zone.
        For every zone, you can set a default behavior that handles incoming traffic that is not further specified. Such behavior is defined by setting the target of the zone. There are three options - default, ACCEPT, REJECT, and DROP.
        By setting the target to ACCEPT, you accept all incoming packets except those disabled by a specific rule.
        If you set the target to REJECT or DROP, you disable all incoming packets except those that you have allowed in specific rules. When packets are rejected, the source machine is informed about the rejection, while there is no information sent when the packets are dropped.
        Rationale:
        To reduce the attack surface of a system, all services and ports should be blocked unless required

        NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
Run the following command to remove an unnecessary service:
        # firewall-cmd --remove-service=<service>
            Example:
            #firewall-cmd --remove-service=cockpit
            Run the following command to remove an unnecessary port:
            # firewall-cmd --remove-port=<port-number>/<port-type>
                Example:
                # firewall-cmd --remove-port=25/tcp
                Run the following command to make new settings persistent:
                # firewall-cmd --runtime-to-permanent

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-171|3.13.5,800-53|SC-7,CN-L3|8.1.10.6(j),CSCv7|9.4,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7,LEVEL|1NS,NESA|T4.5.4,NIAv2|GS1,NIAv2|GS2a,NIAv2|GS2b,TBA-FIISB|43.1

Policy Value:
cmd: /usr/bin/firewall-cmd --get-active-zones | /usr/bin/awk '!/:/ {print $1}' | while read ZN; do /usr/bin/firewall-cmd --list-all --zone=$ZN; done
expect: 
system: Linux

Actual Value:
The command '/usr/bin/firewall-cmd --get-active-zones | /usr/bin/awk '!/:/ {print $1}' | while read ZN; do /usr/bin/firewall-cmd --list-all --zone=$ZN; done' returned : 

public (active)
  target: DROP
  icmp-block-inversion: no
  interfaces: eth1 eth2
  sources: 
  services: cockpit dhcpv6-client ssh
  ports: 
  protocols: 
  masquerade: no
  forward-ports: 
  source-ports: 
  icmp-blocks: 
  rich rules:"
"""3.4.3.1 Ensure iptables are flushed - ipv4"" : [WARNING]

nftables is a replacement for iptables, ip6tables, ebtables and arptables
        Rationale:
        It is possible to mix iptables and nftables. However, this increases complexity and also the chance to introduce errors. For simplicity flush out all iptables rules, and ensure it is not loaded

        NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
Run the following commands to flush iptables: For iptables:
        # iptables -F
        For ip6tables
        # ip6tables -F

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.4.6,800-171|3.4.7,800-53|CM-7,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv7|9.4,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7,LEVEL|1NS,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,NIAv2|SS15a,SWIFT-CSCv1|2.3

Policy Value:
cmd: /usr/sbin/iptables -L
expect: 
system: Linux

Actual Value:
The command '/usr/sbin/iptables -L' returned : 

Chain INPUT (policy ACCEPT)
target     prot opt source               destination         

Chain FORWARD (policy ACCEPT)
target     prot opt source               destination         

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination"
"""3.4.3.1 Ensure iptables are flushed - ipv6"" : [WARNING]

nftables is a replacement for iptables, ip6tables, ebtables and arptables
        Rationale:
        It is possible to mix iptables and nftables. However, this increases complexity and also the chance to introduce errors. For simplicity flush out all iptables rules, and ensure it is not loaded

        NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
Run the following commands to flush iptables: For iptables:
        # iptables -F
        For ip6tables
        # ip6tables -F

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.4.6,800-171|3.4.7,800-53|CM-7,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv7|9.4,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7,LEVEL|1NS,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,NIAv2|SS15a,SWIFT-CSCv1|2.3

Policy Value:
cmd: /usr/sbin/ip6tables -L
expect: 
system: Linux

Actual Value:
The command '/usr/sbin/ip6tables -L' returned : 

Chain INPUT (policy ACCEPT)
target     prot opt source               destination         

Chain FORWARD (policy ACCEPT)
target     prot opt source               destination         

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination"
"""3.4.3.3 Ensure base chains exist - 'hook forward'"" : [FAILED]

Chains are containers for rules. They exist in two kinds, base chains and regular chains. A base chain is an entry point for packets from the networking stack, a regular chain may be used as jump target and is used for better rule organization.
        Rationale:
        If a base chain doesn't exist with a hook for input, forward, and delete, packets that would flow through those chains will not be touched by nftables.

Solution:
Run the following command to create the base chains:
        # nft create chain inet <table name> <base chain name> { type filter hook <(input|forward|output)> priority 0 ; }
            Example:
            # nft create chain inet filter input { type filter hook input priority 0 ; }  # nft create chain inet filter forward { type filter hook forward priority 0 ; }  # nft create chain inet filter output { type filter hook output priority 0 ; }
            Impact:
            if configuring nftables over ssh, creating a base chain with a policy of drop will cause loss of connectivity.
            Ensure that a rule allowing ssh has been added to the base chain prior to setting the base chain's policy to drop

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|9.4,CSF|PR.AC-5,CSF|PR.PT-4,ITSG-33|SC-7(12),LEVEL|1S,NESA|T4.5.3,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/nft list ruleset | /usr/bin/grep 'hook forward'
expect: type[\s]+filter[\s]+hook[\s]+forward[\s]+priority[\s]+0;
system: Linux

Actual Value:
The command '/usr/sbin/nft list ruleset | /usr/bin/grep 'hook forward'' returned : 

type filter hook forward priority filter; policy accept;
		type filter hook forward priority filter; policy accept;
		type filter hook forward priority filter; policy accept;
		type filter hook forward priority 150; policy accept;
		type filter hook forward priority mangle; policy accept;
		type filter hook forward priority 150; policy accept;
		type filter hook forward priority mangle; policy accept;
		type filter hook forward priority filter + 10; policy accept;"
"""3.4.3.3 Ensure base chains exist - 'hook input'"" : [FAILED]

Chains are containers for rules. They exist in two kinds, base chains and regular chains. A base chain is an entry point for packets from the networking stack, a regular chain may be used as jump target and is used for better rule organization.
        Rationale:
        If a base chain doesn't exist with a hook for input, forward, and delete, packets that would flow through those chains will not be touched by nftables.

Solution:
Run the following command to create the base chains:
        # nft create chain inet <table name> <base chain name> { type filter hook <(input|forward|output)> priority 0 ; }
            Example:
            # nft create chain inet filter input { type filter hook input priority 0 ; }  # nft create chain inet filter forward { type filter hook forward priority 0 ; }  # nft create chain inet filter output { type filter hook output priority 0 ; }
            Impact:
            if configuring nftables over ssh, creating a base chain with a policy of drop will cause loss of connectivity.
            Ensure that a rule allowing ssh has been added to the base chain prior to setting the base chain's policy to drop

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|9.4,CSF|PR.AC-5,CSF|PR.PT-4,ITSG-33|SC-7(12),LEVEL|1S,NESA|T4.5.3,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/nft list ruleset | /usr/bin/grep 'hook input'
expect: type[\s]+filter[\s]+hook[\s]+input[\s]+priority[\s]+0;
system: Linux

Actual Value:
The command '/usr/sbin/nft list ruleset | /usr/bin/grep 'hook input'' returned : 

type filter hook input priority filter; policy accept;
		type filter hook input priority filter; policy accept;
		type filter hook input priority filter; policy accept;
		type filter hook input priority 150; policy accept;
		type filter hook input priority mangle; policy accept;
		type nat hook input priority 100; policy accept;
		type filter hook input priority 150; policy accept;
		type filter hook input priority mangle; policy accept;
		type nat hook input priority 100; policy accept;
		type filter hook input priority filter + 10; policy accept;"
"""3.4.3.3 Ensure base chains exist - 'hook output'"" : [FAILED]

Chains are containers for rules. They exist in two kinds, base chains and regular chains. A base chain is an entry point for packets from the networking stack, a regular chain may be used as jump target and is used for better rule organization.
        Rationale:
        If a base chain doesn't exist with a hook for input, forward, and delete, packets that would flow through those chains will not be touched by nftables.

Solution:
Run the following command to create the base chains:
        # nft create chain inet <table name> <base chain name> { type filter hook <(input|forward|output)> priority 0 ; }
            Example:
            # nft create chain inet filter input { type filter hook input priority 0 ; }  # nft create chain inet filter forward { type filter hook forward priority 0 ; }  # nft create chain inet filter output { type filter hook output priority 0 ; }
            Impact:
            if configuring nftables over ssh, creating a base chain with a policy of drop will cause loss of connectivity.
            Ensure that a rule allowing ssh has been added to the base chain prior to setting the base chain's policy to drop

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|9.4,CSF|PR.AC-5,CSF|PR.PT-4,ITSG-33|SC-7(12),LEVEL|1S,NESA|T4.5.3,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/nft list ruleset | /usr/bin/grep 'hook output'
expect: type[\s]+filter[\s]+hook[\s]+output[\s]+priority[\s]+0;
system: Linux

Actual Value:
The command '/usr/sbin/nft list ruleset | /usr/bin/grep 'hook output'' returned : 

type filter hook output priority filter; policy accept;
		type filter hook output priority filter; policy accept;
		type filter hook output priority filter; policy accept;
		type filter hook output priority 150; policy accept;
		type filter hook output priority raw; policy accept;
		type route hook output priority mangle; policy accept;
		type nat hook output priority -100; policy accept;
		type filter hook output priority 150; policy accept;
		type filter hook output priority raw; policy accept;
		type route hook output priority mangle; policy accept;
		type nat hook output priority -100; policy accept;
		type filter hook output priority out; policy accept;
		type filter hook output priority filter + 10; policy accept;"
"""3.4.3.4 Ensure loopback traffic is configured"" : [WARNING]

Configure the loopback interface to accept traffic. Configure all other interfaces to deny traffic to the loopback network
        Rationale:
        Loopback traffic is generated between processes on machine and is typically critical to operation of the system. The loopback interface is the only place that loopback network traffic should be seen, all other interfaces should ignore traffic on this network as an anti-spoofing measure.

        NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
Run the following commands to implement the loopback rules:
        # nft add rule inet filter input iif lo accept
        # nft create rule inet filter input ip saddr 127.0.0.0/8 counter drop
        # nft add rule inet filter input ip6 saddr ::1 counter drop

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|19.4,CSCv7|9.4,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/iptables -L INPUT -v -n; /usr/sbin/iptables -L OUTPUT -v -n
expect: ManualReviewRequired
system: Linux

Actual Value:
The command '/usr/sbin/iptables -L INPUT -v -n; /usr/sbin/iptables -L OUTPUT -v -n' returned : 

Chain INPUT (policy ACCEPT 15129 packets, 1291K bytes)
 pkts bytes target     prot opt in     out     source               destination         
Chain OUTPUT (policy ACCEPT 5393 packets, 1172K bytes)
 pkts bytes target     prot opt in     out     source               destination"
"""3.4.3.5 Ensure outbound and established connections are configured"" : [WARNING]

Configure the firewall rules for new outbound, and established connections
        Rationale:
        If rules are not in place for new outbound, and established connections all packets will be dropped by the default policy preventing network usage.

        NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
Configure nftables in accordance with site policy. The following commands will implement a policy to allow all outbound connections and all established connections:
        # nft add rule inet filter input ip protocol tcp ct state established accept  # nft add rule inet filter input ip protocol udp ct state established accept  # nft add rule inet filter input ip protocol icmp ct state established accept  # nft add rule inet filter output ip protocol tcp ct state new,related,established accept  # nft add rule inet filter output ip protocol udp ct state new,related,established accept  # nft add rule inet filter output ip protocol icmp ct state new,related,established accept

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|9.4,ITSG-33|SC-7(12),LEVEL|1NS,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/iptables -L -v -n
expect: ManualReviewRequired
system: Linux

Actual Value:
The command '/usr/sbin/iptables -L -v -n' returned : 

Chain INPUT (policy ACCEPT 15138 packets, 1292K bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain OUTPUT (policy ACCEPT 5401 packets, 1173K bytes)
 pkts bytes target     prot opt in     out     source               destination"
"""3.4.3.6 Ensure default deny firewall policy - Chain FORWARD"" : [FAILED]

Base chain policy is the default verdict that will be applied to packets reaching the end of the chain.
        Rationale:
        There are two policies: accept (Default) and drop. If the policy is set to accept, the firewall will accept any packet that is not configured to be denied and the packet will continue transversing the network stack.
        It is easier to white list acceptable usage than to black list unacceptable usage.

Solution:
Run the following command for the base chains with the input, forward, and output hooks to implement a default DROP policy:
        # nft chain <table family> <table name> <chain name> { policy drop ; }
            Example:
            # nft chain inet filter input { policy drop ; }  # nft chain inet filter forward { policy drop ; }  # nft chain inet filter output { policy drop ; }
            Impact:
            if configuring nftables over ssh, creating a base chain with a policy of drop will cause loss of connectivity.
            Ensure that a rule allowing ssh has been added to the base chain prior to setting the base chain's policy to drop
            Default Value:
            accept

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|9.4,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/iptables --list | /usr/bin/grep 'Chain FORWARD'
expect: ^Chain FORWARD \(policy (DROP|REJECT)\)
regex: ^Chain FORWARD \(policy (DROP|REJECT)\)
system: Linux

Actual Value:
The command '/usr/sbin/iptables --list | /usr/bin/grep 'Chain FORWARD'' returned : 

Chain FORWARD (policy ACCEPT)"
"""3.4.3.6 Ensure default deny firewall policy - Chain INPUT"" : [FAILED]

Base chain policy is the default verdict that will be applied to packets reaching the end of the chain.
        Rationale:
        There are two policies: accept (Default) and drop. If the policy is set to accept, the firewall will accept any packet that is not configured to be denied and the packet will continue transversing the network stack.
        It is easier to white list acceptable usage than to black list unacceptable usage.

Solution:
Run the following command for the base chains with the input, forward, and output hooks to implement a default DROP policy:
        # nft chain <table family> <table name> <chain name> { policy drop ; }
            Example:
            # nft chain inet filter input { policy drop ; }  # nft chain inet filter forward { policy drop ; }  # nft chain inet filter output { policy drop ; }
            Impact:
            if configuring nftables over ssh, creating a base chain with a policy of drop will cause loss of connectivity.
            Ensure that a rule allowing ssh has been added to the base chain prior to setting the base chain's policy to drop
            Default Value:
            accept

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|9.4,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/iptables --list | /usr/bin/grep 'Chain INPUT'
expect: ^Chain INPUT \(policy (DROP|REJECT)\)
regex: ^Chain INPUT \(policy (DROP|REJECT)\)
system: Linux

Actual Value:
The command '/usr/sbin/iptables --list | /usr/bin/grep 'Chain INPUT'' returned : 

Chain INPUT (policy ACCEPT)"
"""3.4.3.6 Ensure default deny firewall policy - Chain OUTPUT"" : [FAILED]

Base chain policy is the default verdict that will be applied to packets reaching the end of the chain.
        Rationale:
        There are two policies: accept (Default) and drop. If the policy is set to accept, the firewall will accept any packet that is not configured to be denied and the packet will continue transversing the network stack.
        It is easier to white list acceptable usage than to black list unacceptable usage.

Solution:
Run the following command for the base chains with the input, forward, and output hooks to implement a default DROP policy:
        # nft chain <table family> <table name> <chain name> { policy drop ; }
            Example:
            # nft chain inet filter input { policy drop ; }  # nft chain inet filter forward { policy drop ; }  # nft chain inet filter output { policy drop ; }
            Impact:
            if configuring nftables over ssh, creating a base chain with a policy of drop will cause loss of connectivity.
            Ensure that a rule allowing ssh has been added to the base chain prior to setting the base chain's policy to drop
            Default Value:
            accept

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|9.4,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/iptables --list | /usr/bin/grep 'Chain OUTPUT'
expect: ^Chain OUTPUT \(policy (DROP|REJECT)\)
regex: ^Chain OUTPUT \(policy (DROP|REJECT)\)
system: Linux

Actual Value:
The command '/usr/sbin/iptables --list | /usr/bin/grep 'Chain OUTPUT'' returned : 

Chain OUTPUT (policy ACCEPT)"
"""3.4.3.7 Ensure nftables service is enabled"" : [FAILED]

The nftables service allows for the loading of nftables rulesets during boot, or starting of the nftables service
        Rationale:
        The nftables service restores the nftables rules from the rules files referenced in the /etc/sysconfig/nftables.conf file durring boot or the starting of the nftables service

Solution:
Run the following command to enable the nftables service:
        # systemctl --now enable nftables

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.4.6,800-171|3.4.7,800-53|CM-7,CIP|007-6-R1,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv7|9.4,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7,LEVEL|1S,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,NIAv2|SS15a,PCI-DSSv3.1|2.2.2,PCI-DSSv3.1|2.2.3,PCI-DSSv3.2|2.2.2,PCI-DSSv3.2|2.2.3,SWIFT-CSCv1|2.3

Policy Value:
cmd: /usr/bin/systemctl is-enabled nftables | /usr/bin/awk '{print} END {if(NR==0) print ""disabled"" }'
dont_echo_cmd: YES
expect: enabled
system: Linux

Actual Value:
The command returned : 

disabled"
"""3.4.3.8 Ensure nftables rules are permanent"" : [WARNING]

nftables is a subsystem of the Linux kernel providing filtering and classification of network packets/datagrams/frames.
        The nftables service reads the /etc/sysconfig/nftables.conf file for a nftables file or files to include in the nftables ruleset.
        A nftables ruleset containing the input, forward, and output base chains allow network traffic to be filtered.
        Rationale:
        Changes made to nftables ruleset only affect the live system, you will also need to configure the nftables ruleset to apply on boot

        NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
Edit the /etc/sysconfig/nftables.conf file and un-comment or add a line with include <Absolute path to nftables rules file> for each nftables file you want included in the nftables ruleset on boot example:
            # vi /etc/sysconfig/nftables.conf
            Add the line:
            include ""/etc/nftables/nftables.rules""

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.1,800-171|3.1.2,800-53|AC-3(3),CSCv7|9.4,CSF|PR.AC-4,CSF|PR.PT-3,ITSG-33|AC-3(3),LEVEL|1S,NESA|T5.5.4,NESA|T7.5.3

Policy Value:
cmd: /usr/bin/cat /etc/sysconfig/nftables.conf
expect: 
system: Linux

Actual Value:
The command '/usr/bin/cat /etc/sysconfig/nftables.conf' returned : 

# Uncomment the include statement here to load the default config sample
# in /etc/nftables for nftables service.

#include ""/etc/nftables/main.nft""

# To customize, either edit the samples in /etc/nftables, append further
# commands to the end of this file or overwrite it after first service
# start by calling: 'nft list ruleset >/etc/sysconfig/nftables.conf'."
"""3.4.4.1.1 Ensure default deny firewall policy - Chain FORWARD"" : [FAILED]

A default deny all policy on connections ensures that any unconfigured network usage will be rejected.
        Rationale:
        With a default accept policy the firewall will accept any packet that is not configured to be denied. It is easier to white list acceptable usage than to black list unacceptable usage.

Solution:
Run the following commands to implement a default DROP policy:
        # iptables -P INPUT DROP # iptables -P OUTPUT DROP # iptables -P FORWARD DROP
        Notes:
        Changing firewall settings while connected over network can result in being locked out of the system.
        Remediation will only affect the active system firewall, be sure to configure the default policy in your firewall management to apply on boot as well.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|9.4,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/iptables --list | /usr/bin/grep 'Chain FORWARD'
expect: ^Chain FORWARD \(policy (DROP|REJECT)\)
regex: ^Chain FORWARD \(policy (DROP|REJECT)\)
system: Linux

Actual Value:
The command '/usr/sbin/iptables --list | /usr/bin/grep 'Chain FORWARD'' returned : 

Chain FORWARD (policy ACCEPT)"
"""3.4.4.1.1 Ensure default deny firewall policy - Chain INPUT"" : [FAILED]

A default deny all policy on connections ensures that any unconfigured network usage will be rejected.
        Rationale:
        With a default accept policy the firewall will accept any packet that is not configured to be denied. It is easier to white list acceptable usage than to black list unacceptable usage.

Solution:
Run the following commands to implement a default DROP policy:
        # iptables -P INPUT DROP # iptables -P OUTPUT DROP # iptables -P FORWARD DROP
        Notes:
        Changing firewall settings while connected over network can result in being locked out of the system.
        Remediation will only affect the active system firewall, be sure to configure the default policy in your firewall management to apply on boot as well.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|9.4,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/iptables --list | /usr/bin/grep 'Chain INPUT'
expect: ^Chain INPUT \(policy (DROP|REJECT)\)
regex: ^Chain INPUT \(policy (DROP|REJECT)\)
system: Linux

Actual Value:
The command '/usr/sbin/iptables --list | /usr/bin/grep 'Chain INPUT'' returned : 

Chain INPUT (policy ACCEPT)"
"""3.4.4.1.1 Ensure default deny firewall policy - Chain OUTPUT"" : [FAILED]

A default deny all policy on connections ensures that any unconfigured network usage will be rejected.
        Rationale:
        With a default accept policy the firewall will accept any packet that is not configured to be denied. It is easier to white list acceptable usage than to black list unacceptable usage.

Solution:
Run the following commands to implement a default DROP policy:
        # iptables -P INPUT DROP # iptables -P OUTPUT DROP # iptables -P FORWARD DROP
        Notes:
        Changing firewall settings while connected over network can result in being locked out of the system.
        Remediation will only affect the active system firewall, be sure to configure the default policy in your firewall management to apply on boot as well.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|9.4,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/iptables --list | /usr/bin/grep 'Chain OUTPUT'
expect: ^Chain OUTPUT \(policy (DROP|REJECT)\)
regex: ^Chain OUTPUT \(policy (DROP|REJECT)\)
system: Linux

Actual Value:
The command '/usr/sbin/iptables --list | /usr/bin/grep 'Chain OUTPUT'' returned : 

Chain OUTPUT (policy ACCEPT)"
"""3.4.4.1.2 Ensure loopback traffic is configured"" : [WARNING]

Configure the loopback interface to accept traffic. Configure all other interfaces to deny traffic to the loopback network (127.0.0.0/8).
        Rationale:
        Loopback traffic is generated between processes on machine and is typically critical to operation of the system. The loopback interface is the only place that loopback network (127.0.0.0/8) traffic should be seen, all other interfaces should ignore traffic on this network as an anti-spoofing measure.

        NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
Run the following commands to implement the loopback rules:
        # iptables -A INPUT -i lo -j ACCEPT # iptables -A OUTPUT -o lo -j ACCEPT # iptables -A INPUT -s 127.0.0.0/8 -j DROP
        Notes:
        Changing firewall settings while connected over network can result in being locked out of the system.
        Remediation will only affect the active system firewall, be sure to configure the default policy in your firewall management to apply on boot as well.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|9.4,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/iptables -L INPUT -v -n; /usr/sbin/iptables -L OUTPUT -v -n
expect: ManualReviewRequired
system: Linux

Actual Value:
The command '/usr/sbin/iptables -L INPUT -v -n; /usr/sbin/iptables -L OUTPUT -v -n' returned : 

Chain INPUT (policy ACCEPT 15226 packets, 1302K bytes)
 pkts bytes target     prot opt in     out     source               destination         
Chain OUTPUT (policy ACCEPT 5487 packets, 1186K bytes)
 pkts bytes target     prot opt in     out     source               destination"
"""3.4.4.1.3 Ensure outbound and established connections are configured"" : [WARNING]

Configure the firewall rules for new outbound, and established connections.
        Rationale:
        If rules are not in place for new outbound, and established connections all packets will be dropped by the default policy preventing network usage.

        NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
Configure iptables in accordance with site policy. The following commands will implement a policy to allow all outbound connections and all established connections:
        # iptables -A OUTPUT -p tcp -m state --state NEW,ESTABLISHED -j ACCEPT # iptables -A OUTPUT -p udp -m state --state NEW,ESTABLISHED -j ACCEPT # iptables -A OUTPUT -p icmp -m state --state NEW,ESTABLISHED -j ACCEPT # iptables -A INPUT -p tcp -m state --state ESTABLISHED -j ACCEPT # iptables -A INPUT -p udp -m state --state ESTABLISHED -j ACCEPT # iptables -A INPUT -p icmp -m state --state ESTABLISHED -j ACCEPT
        Notes:
        Changing firewall settings while connected over network can result in being locked out of the system.
        Remediation will only affect the active system firewall, be sure to configure the default policy in your firewall management to apply on boot as well.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|9.4,ITSG-33|SC-7(12),LEVEL|1NS,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/iptables -L -v -n
expect: ManualReviewRequired
system: Linux

Actual Value:
The command '/usr/sbin/iptables -L -v -n' returned : 

Chain INPUT (policy ACCEPT 15241 packets, 1304K bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain OUTPUT (policy ACCEPT 5503 packets, 1189K bytes)
 pkts bytes target     prot opt in     out     source               destination"
"""3.4.4.1.4 Ensure firewall rules exist for all open ports"" : [WARNING]

Any ports that have been opened on non-loopback addresses need firewall rules to govern traffic.
        Rationale:
        Without a firewall rule configured for open ports default firewall policy will drop all packets to these ports.

        NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
For each port identified in the audit which does not have a firewall rule establish a proper rule for accepting inbound connections:
        # iptables -A INPUT -p <protocol> --dport <port> -m state --state NEW -j ACCEPT
            Notes:
            Changing firewall settings while connected over network can result in being locked out of the system.
            Remediation will only affect the active system firewall, be sure to configure the default policy in your firewall management to apply on boot as well.
            The remediation command opens up the port to traffic from all sources. Consult iptables documentation and set any restrictions in compliance with site policy.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|9.2,CSCv7|9.4,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/bin/netstat -ln; /usr/sbin/iptables -L INPUT -v -n
expect: ManualReviewRequired
system: Linux

Actual Value:
The command '/usr/bin/netstat -ln; /usr/sbin/iptables -L INPUT -v -n' returned : 

bash: /usr/bin/netstat: No such file or directory
Chain INPUT (policy ACCEPT 15261 packets, 1306K bytes)
 pkts bytes target     prot opt in     out     source               destination"
"""3.4.4.2.1 Ensure IPv6 default deny firewall policy - 'Chain FORWARD'"" : [FAILED]

A default deny all policy on connections ensures that any unconfigured network usage will be rejected.
        Rationale:
        With a default accept policy the firewall will accept any packet that is not configured to be denied. It is easier to white list acceptable usage than to black list unacceptable usage.

Solution:
Run the following commands to implement a default DROP policy:
        # ip6tables -P INPUT DROP # ip6tables -P OUTPUT DROP # ip6tables -P FORWARD DROP
        Notes:
        Changing firewall settings while connected over network can result in being locked out of the system.
        Remediation will only affect the active system firewall, be sure to configure the default policy in your firewall management to apply on boot as well.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|9.4,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/ip6tables --list | /usr/bin/grep 'Chain FORWARD'
expect: ^Chain FORWARD \(policy (DROP|REJECT)\)
system: Linux

Actual Value:
The command '/usr/sbin/ip6tables --list | /usr/bin/grep 'Chain FORWARD'' returned : 

Chain FORWARD (policy ACCEPT)"
"""3.4.4.2.1 Ensure IPv6 default deny firewall policy - 'Chain INPUT'"" : [FAILED]

A default deny all policy on connections ensures that any unconfigured network usage will be rejected.
        Rationale:
        With a default accept policy the firewall will accept any packet that is not configured to be denied. It is easier to white list acceptable usage than to black list unacceptable usage.

Solution:
Run the following commands to implement a default DROP policy:
        # ip6tables -P INPUT DROP # ip6tables -P OUTPUT DROP # ip6tables -P FORWARD DROP
        Notes:
        Changing firewall settings while connected over network can result in being locked out of the system.
        Remediation will only affect the active system firewall, be sure to configure the default policy in your firewall management to apply on boot as well.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|9.4,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/ip6tables --list | /usr/bin/grep 'Chain INPUT'
expect: ^Chain INPUT \(policy (DROP|REJECT)\)
system: Linux

Actual Value:
The command '/usr/sbin/ip6tables --list | /usr/bin/grep 'Chain INPUT'' returned : 

Chain INPUT (policy ACCEPT)"
"""3.4.4.2.1 Ensure IPv6 default deny firewall policy - 'Chain OUTPUT'"" : [FAILED]

A default deny all policy on connections ensures that any unconfigured network usage will be rejected.
        Rationale:
        With a default accept policy the firewall will accept any packet that is not configured to be denied. It is easier to white list acceptable usage than to black list unacceptable usage.

Solution:
Run the following commands to implement a default DROP policy:
        # ip6tables -P INPUT DROP # ip6tables -P OUTPUT DROP # ip6tables -P FORWARD DROP
        Notes:
        Changing firewall settings while connected over network can result in being locked out of the system.
        Remediation will only affect the active system firewall, be sure to configure the default policy in your firewall management to apply on boot as well.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|9.4,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/ip6tables --list | /usr/bin/grep 'Chain OUTPUT'
expect: ^Chain OUTPUT \(policy (DROP|REJECT)\)
system: Linux

Actual Value:
The command '/usr/sbin/ip6tables --list | /usr/bin/grep 'Chain OUTPUT'' returned : 

Chain OUTPUT (policy ACCEPT)"
"""3.4.4.2.2 Ensure IPv6 loopback traffic is configured"" : [WARNING]

Configure the loopback interface to accept traffic. Configure all other interfaces to deny traffic to the loopback network (::1).
                Rationale:
                Loopback traffic is generated between processes on machine and is typically critical to operation of the system. The loopback interface is the only place that loopback network (::1) traffic should be seen, all other interfaces should ignore traffic on this network as an anti-spoofing measure.

                NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
Run the following commands to implement the loopback rules:
                # ip6tables -A INPUT -i lo -j ACCEPT # ip6tables -A OUTPUT -o lo -j ACCEPT # ip6tables -A INPUT -s ::1 -j DROP
                Notes:
                Changing firewall settings while connected over network can result in being locked out of the system.
                Remediation will only affect the active system firewall, be sure to configure the default policy in your firewall management to apply on boot as well.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|9.4,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/ip6tables -L INPUT -v -n; /usr/sbin/ip6tables -L OUTPUT -v -n
expect: ManualReviewRequired
system: Linux

Actual Value:
The command '/usr/sbin/ip6tables -L INPUT -v -n; /usr/sbin/ip6tables -L OUTPUT -v -n' returned : 

Chain INPUT (policy ACCEPT 1 packets, 72 bytes)
 pkts bytes target     prot opt in     out     source               destination         
Chain OUTPUT (policy ACCEPT 18 packets, 1104 bytes)
 pkts bytes target     prot opt in     out     source               destination"
"""3.4.4.2.3 Ensure IPv6 outbound and established connections are configured"" : [WARNING]

Configure the firewall rules for new outbound, and established IPv6 connections.
                Rationale:
                If rules are not in place for new outbound, and established connections all packets will be dropped by the default policy preventing network usage.

                NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
Configure iptables in accordance with site policy. The following commands will implement a policy to allow all outbound connections and all established connections:
                # ip6tables -A OUTPUT -p tcp -m state --state NEW,ESTABLISHED -j ACCEPT # ip6tables -A OUTPUT -p udp -m state --state NEW,ESTABLISHED -j ACCEPT # ip6tables -A OUTPUT -p icmp -m state --state NEW,ESTABLISHED -j ACCEPT # ip6tables -A INPUT -p tcp -m state --state ESTABLISHED -j ACCEPT # ip6tables -A INPUT -p udp -m state --state ESTABLISHED -j ACCEPT # ip6tables -A INPUT -p icmp -m state --state ESTABLISHED -j ACCEPT
                Notes:
                Changing firewall settings while connected over network can result in being locked out of the system.
                Remediation will only affect the active system firewall, be sure to configure the default policy in your firewall management to apply on boot as well.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|9.4,ITSG-33|SC-7(12),LEVEL|1NS,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /sbin/ip6tables -L -v -n
expect: 
system: Linux

Actual Value:
The command '/sbin/ip6tables -L -v -n' returned : 

Chain INPUT (policy ACCEPT 1 packets, 72 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain OUTPUT (policy ACCEPT 18 packets, 1104 bytes)
 pkts bytes target     prot opt in     out     source               destination"
"""3.4.4.2.4 Ensure IPv6 firewall rules exist for all open ports - firewall rules"" : [WARNING]

Any ports that have been opened on non-loopback addresses need firewall rules to govern traffic.
                Rationale:
                Without a firewall rule configured for open ports default firewall policy will drop all packets to these ports.

                NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
For each port identified in the audit which does not have a firewall rule establish a proper rule for accepting inbound connections:
                # ip6tables -A INPUT -p <protocol> --dport <port> -m state --state NEW -j ACCEPT
                    Notes:
                    Changing firewall settings while connected over network can result in being locked out of the system.
                    Remediation will only affect the active system firewall, be sure to configure the default policy in your firewall management to apply on boot as well.
                    The remediation command opens up the port to traffic from all sources. Consult iptables documentation and set any restrictions in compliance with site policy.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|9.4,ITSG-33|SC-7(12),LEVEL|1NS,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /sbin/ip6tables -L -v -n
expect: 
system: Linux

Actual Value:
The command '/sbin/ip6tables -L -v -n' returned : 

Chain INPUT (policy ACCEPT 1 packets, 72 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain OUTPUT (policy ACCEPT 18 packets, 1104 bytes)
 pkts bytes target     prot opt in     out     source               destination"
"""3.4.4.2.4 Ensure IPv6 firewall rules exist for all open ports - ports"" : [WARNING]

Any ports that have been opened on non-loopback addresses need firewall rules to govern traffic.
                Rationale:
                Without a firewall rule configured for open ports default firewall policy will drop all packets to these ports.

                NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
For each port identified in the audit which does not have a firewall rule establish a proper rule for accepting inbound connections:
                # ip6tables -A INPUT -p <protocol> --dport <port> -m state --state NEW -j ACCEPT
                    Notes:
                    Changing firewall settings while connected over network can result in being locked out of the system.
                    Remediation will only affect the active system firewall, be sure to configure the default policy in your firewall management to apply on boot as well.
                    The remediation command opens up the port to traffic from all sources. Consult iptables documentation and set any restrictions in compliance with site policy.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|9.4,ITSG-33|SC-7(12),LEVEL|1NS,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/ss -6tuln; /usr/sbin/ip6tables -L INPUT -v -n
expect: 
system: Linux

Actual Value:
The command '/usr/sbin/ss -6tuln; /usr/sbin/ip6tables -L INPUT -v -n' returned : 

Netid   State    Recv-Q   Send-Q     Local Address:Port     Peer Address:Port   
tcp     LISTEN   0        128                 [::]:22               [::]:*      
Chain INPUT (policy ACCEPT 1 packets, 72 bytes)
 pkts bytes target     prot opt in     out     source               destination"
"""4.2.1.3 Ensure rsyslog default file permissions configured"" : [FAILED]

rsyslog will create logfiles that do not already exist on the system. This setting controls what permissions will be applied to these newly created files.
        Rationale:
        It is important to ensure that log files have the correct permissions to ensure that sensitive data is archived and protected.

Solution:
Edit the /etc/rsyslog.conf and /etc/rsyslog.d/*.conf files and set $FileCreateMode to 0640 or more restrictive:
        $FileCreateMode 0640

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.3.8,800-53|AU-9,CN-L3|7.1.2.3(d),CN-L3|7.1.3.3(f),CN-L3|8.1.3.5(c),CN-L3|8.1.4.3(c),CSCv7|5.1,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.2,ITSG-33|AU-9,LEVEL|1S,NESA|M5.2.3,NESA|M5.5.2,NESA|T3.6.4,NESA|T8.2.9,NIAv2|SM5,NIAv2|SM6

Policy Value:
cmd: /usr/bin/grep '$FileCreateMode' /etc/rsyslog.conf /etc/rsyslog.d/*.conf
expect: .*?:\$FileCreateMode 0640
system: Linux

Actual Value:
The command '/usr/bin/grep '$FileCreateMode' /etc/rsyslog.conf /etc/rsyslog.d/*.conf' returned : 

/usr/bin/grep: /etc/rsyslog.d/*.conf: No such file or directory"
"""4.2.1.4 Ensure logging is configured"" : [WARNING]

The /etc/rsyslog.conf and /etc/rsyslog.d/*.conf files specifies rules for logging and which files are to be used to log certain classes of messages.
        Rationale:
        A great deal of important security-related information is sent via rsyslog (e.g., successful and failed su attempts, failed login attempts, root login attempts, etc.).

        NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
Edit the following lines in the /etc/rsyslog.conf and /etc/rsyslog.d/*.conf files as appropriate for your environment:
        *.emerg                                  :omusrmsg:* auth,authpriv.*                          /var/log/secure mail.*                                  -/var/log/mail mail.info                               -/var/log/mail.info mail.warning                            -/var/log/mail.warn mail.err                                 /var/log/mail.err news.crit                               -/var/log/news/news.crit news.err                                -/var/log/news/news.err news.notice                             -/var/log/news/news.notice *.=warning;*.=err                       -/var/log/warn *.crit                                   /var/log/warn *.*;mail.none;news.none                 -/var/log/messages local0,local1.*                         -/var/log/localmessages local2,local3.*                         -/var/log/localmessages local4,local5.*                         -/var/log/localmessages local6,local7.*                         -/var/log/localmessages
        Run the following command to reload the rsyslogd configuration:
        # systemctl restart rsyslog

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSCv7|6.2,CSCv7|6.3,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,LEVEL|1NS,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1

Policy Value:
cmd: /usr/bin/ls -l /var/log/
expect: 
system: Linux

Actual Value:
The command '/usr/bin/ls -l /var/log/' returned : 

total 11644
drwxr-xr-x. 2 root root     263 Feb 23 18:29 anaconda
drwx------. 2 root root      23 Feb 23 18:30 audit
-rw-------. 1 root root    6655 Mar  4 17:40 boot.log
-rw-------. 1 root root  199875 Mar  3 13:22 boot.log-20210303
-rw-------. 1 root root  126051 Mar  4 03:51 boot.log-20210304
-rw-------. 1 root root    1152 Mar  4 18:49 btmp
-rw-rw----. 1 root utmp       0 Feb 23 18:26 btmp-20210303
-rw-------. 1 root root   33568 Mar  4 20:11 cron
-rw-r--r--. 1 root root   27847 Mar  4 20:12 dnf.librepo.log
-rw-r--r--. 1 root root  101039 Mar  4 20:12 dnf.log
-rw-r--r--. 1 root root    3829 Mar  4 20:12 dnf.rpm.log
-rw-r-----. 1 root root    9672 Mar  4 18:51 firewalld
-rw-r--r--. 1 root root    1224 Mar  4 20:12 hawkey.log
-rw-rw-r--. 1 root utmp  291708 Mar  4 20:00 lastlog
-rw-------. 1 root root       0 Feb 23 18:26 maillog
-rw-------. 1 root root 9581781 Mar  4 20:14 messages
drwx------. 2 root root       6 Feb 23 18:26 private
drwxr-xr-x. 2 root root      43 Feb 26 12:08 rhsm
-rw-------. 1 root root   67883 Mar  4 20:14 secure
-rw-------. 1 root root       0 Feb 23 18:26 spooler
drwxr-x---. 2 sssd sssd      73 Feb 23 18:30 sssd
drwxr-xr-x. 2 root root      23 Feb 23 18:30 tuned
-rw-rw-r--. 1 root utmp  203904 Mar  4 20:02 wtmp"
"""4.2.1.5 Ensure rsyslog is configured to send logs to a remote log host"" : [FAILED]

The rsyslog utility supports the ability to send logs it gathers to a remote log host running syslogd(8) or to receive messages from remote hosts, reducing administrative overhead.
        Rationale:
        Storing log data on a remote host protects log integrity from local attacks. If an attacker gains root access on the local system, they could tamper with or remove log data that is stored on the local system

Solution:
Edit the /etc/rsyslog.conf and /etc/rsyslog.d/*.conf files and add the following line (where loghost.example.com is the name of your central log host).
        *.* @@loghost.example.com
        Run the following command to reload the rsyslogd configuration:
        # systemctl restart rsyslog

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.3.8,800-53|AU-9(2),CN-L3|8.1.3.5(d),CN-L3|8.1.4.3(c),CSCv7|6.6,CSCv7|6.8,CSF|PR.PT-1,ITSG-33|AU-9(2),LEVEL|1S,NESA|M5.2.3,NESA|M5.5.2,NIAv2|SS13e

Policy Value:
cmd: /usr/bin/grep '^*.*[^I][^I]*@' /etc/rsyslog.conf /etc/rsyslog.d/*.conf
expect: .*?:[\s]*\*\.\*[\s]+\@\@10\.0\.0\.2[\s]*$
regex: .*?:[\s]*\*\.\*[\s]+
system: Linux

Actual Value:
The command '/usr/bin/grep '^*.*[^I][^I]*@' /etc/rsyslog.conf /etc/rsyslog.d/*.conf' returned : 

/usr/bin/grep: /etc/rsyslog.d/*.conf: No such file or directory"
"""4.2.1.6 Ensure remote rsyslog messages are only accepted on designated log hosts. - InputTCPServerRun"" : [WARNING]

By default, rsyslog does not listen for log messages coming in from remote systems. The ModLoad tells rsyslog to load the imtcp.so module so it can listen over a network via TCP. The InputTCPServerRun option instructs rsyslogd to listen on the specified TCP port.
        Rationale:
        The guidance in the section ensures that remote log hosts are configured to only accept rsyslog data from hosts within the specified domain and that those systems that are not designed to be log hosts do not accept any remote rsyslog messages. This provides protection from spoofed log data and ensures that system administrators are reviewing reasonably complete syslog data in a central location.

        NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
For hosts that are designated as log hosts, edit the /etc/rsyslog.conf file and un-comment or add the following lines:
        $ModLoad imtcp  $InputTCPServerRun 514
        For hosts that are not designated as log hosts, edit the /etc/rsyslog.conf file and comment or remove the following lines:
        # $ModLoad imtcp  # $InputTCPServerRun 514
        Run the following command to reload the rsyslogd configuration:
        # systemctl restart rsyslog

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.4.6,800-171|3.4.7,800-53|CM-7,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv7|9.2,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7,LEVEL|1NS,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,NIAv2|SS15a,SWIFT-CSCv1|2.3

Policy Value:
cmd: /usr/bin/grep -h '$InputTCPServerRun' /etc/rsyslog.conf /etc/rsyslog.d/*.conf
expect: ^[\s]*\$InputTCPServerRun[\s]+514[\s]*$
system: Linux

Actual Value:
The command '/usr/bin/grep -h '$InputTCPServerRun' /etc/rsyslog.conf /etc/rsyslog.d/*.conf' returned : 

/usr/bin/grep: /etc/rsyslog.d/*.conf: No such file or directory"
"""4.2.1.6 Ensure remote rsyslog messages are only accepted on designated log hosts. - ModLoad imtcp"" : [WARNING]

By default, rsyslog does not listen for log messages coming in from remote systems. The ModLoad tells rsyslog to load the imtcp.so module so it can listen over a network via TCP. The InputTCPServerRun option instructs rsyslogd to listen on the specified TCP port.
        Rationale:
        The guidance in the section ensures that remote log hosts are configured to only accept rsyslog data from hosts within the specified domain and that those systems that are not designed to be log hosts do not accept any remote rsyslog messages. This provides protection from spoofed log data and ensures that system administrators are reviewing reasonably complete syslog data in a central location.

        NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
For hosts that are designated as log hosts, edit the /etc/rsyslog.conf file and un-comment or add the following lines:
        $ModLoad imtcp  $InputTCPServerRun 514
        For hosts that are not designated as log hosts, edit the /etc/rsyslog.conf file and comment or remove the following lines:
        # $ModLoad imtcp  # $InputTCPServerRun 514
        Run the following command to reload the rsyslogd configuration:
        # systemctl restart rsyslog

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.4.6,800-171|3.4.7,800-53|CM-7,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv7|9.2,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7,LEVEL|1NS,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,NIAv2|SS15a,SWIFT-CSCv1|2.3

Policy Value:
cmd: /usr/bin/grep -h '$ModLoad imtcp' /etc/rsyslog.conf /etc/rsyslog.d/*.conf
expect: ^[\s]*\$ModLoad[\s]+imtcp[\s]*$
system: Linux

Actual Value:
The command '/usr/bin/grep -h '$ModLoad imtcp' /etc/rsyslog.conf /etc/rsyslog.d/*.conf' returned : 

/usr/bin/grep: /etc/rsyslog.d/*.conf: No such file or directory"
"""4.2.2.1 Ensure journald is configured to send logs to rsyslog"" : [FAILED]

Data from journald may be stored in volatile memory or persisted locally on the server. Utilities exist to accept remote export of journald logs, however, use of the rsyslog service provides a consistent means of log collection and export.
        Rationale:
        Storing log data on a remote host protects log integrity from local attacks. If an attacker gains root access on the local system, they could tamper with or remove log data that is stored on the local system.

Solution:
Edit the /etc/systemd/journald.conf file and add the following line:
        ForwardToSyslog=yes

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSCv7|6.5,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,LEVEL|1S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1

Policy Value:
cmd: /usr/bin/grep -e ^[\s]*ForwardToSyslog /etc/systemd/journald.conf | /usr/bin/awk '{print} END {if (NR == 0) print ""fail""}'
expect: ^[\s]*ForwardToSyslog[\s]*=[\s]*yes[\s]*$
system: Linux

Actual Value:
The command '/usr/bin/grep -e ^[\s]*ForwardToSyslog /etc/systemd/journald.conf | /usr/bin/awk '{print} END {if (NR == 0) print ""fail""}'' returned : 

fail"
"""4.2.2.2 Ensure journald is configured to compress large log files"" : [FAILED]

The journald system includes the capability of compressing overly large files to avoid filling up the system with logs or making the logs unmanageably large.
        Rationale:
        Uncompressed large files may unexpectedly fill a filesystem leading to resource unavailability. Compressing logs prior to write can prevent sudden, unexpected filesystem impacts.

Solution:
Edit the /etc/systemd/journald.conf file and add the following line:
        Compress=yes

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|6.4,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3

Policy Value:
cmd: /usr/bin/grep -e ^[\s]*Compress /etc/systemd/journald.conf | /usr/bin/awk '{print} END {if (NR == 0) print ""fail""}'
expect: ^[\s]*Compress[\s]*=[\s]*yes[\s]*$
system: Linux

Actual Value:
The command '/usr/bin/grep -e ^[\s]*Compress /etc/systemd/journald.conf | /usr/bin/awk '{print} END {if (NR == 0) print ""fail""}'' returned : 

fail"
"""4.2.2.3 Ensure journald is configured to write logfiles to persistent disk"" : [FAILED]

Data from journald may be stored in volatile memory or persisted locally on the server. Logs in memory will be lost upon a system reboot. By persisting logs to local disk on the server they are protected from loss.
        Rationale:
        Writing log data to disk will provide the ability to forensically reconstruct events which may have impacted the operations or security of a system even after a system crash or reboot.

Solution:
Edit the /etc/systemd/journald.conf file and add the following line:
        Storage=persistent

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.3.8,800-53|AU-9,CN-L3|7.1.2.3(d),CN-L3|7.1.3.3(f),CN-L3|8.1.3.5(c),CN-L3|8.1.4.3(c),CSCv7|6.2,CSCv7|6.3,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.2,ITSG-33|AU-9,LEVEL|1S,NESA|M5.2.3,NESA|M5.5.2,NESA|T3.6.4,NESA|T8.2.9,NIAv2|SM5,NIAv2|SM6

Policy Value:
cmd: /usr/bin/grep -e ^[\s]*Storage /etc/systemd/journald.conf | /usr/bin/awk '{print} END {if (NR == 0) print ""fail""}'
expect: ^[\s]*Storage[\s]*=[\s]*persistent[\s]*$
system: Linux

Actual Value:
The command '/usr/bin/grep -e ^[\s]*Storage /etc/systemd/journald.conf | /usr/bin/awk '{print} END {if (NR == 0) print ""fail""}'' returned : 

fail"
"""4.2.3 Ensure permissions on all logfiles are configured"" : [FAILED]

Log files stored in /var/log/ contain logged information from many services on the system, or on log hosts others as well.
        Rationale:
        It is important to ensure that log files have the correct permissions to ensure that sensitive data is archived and protected.

Solution:
Run the following commands to set permissions on all existing log files:
        find /var/log -type f -exec chmod g-wx,o-rwx ""{}"" + -o -type d -exec chmod g-w,o-rwx ""{}"" +
        Notes:
        You may also need to change the configuration for your logging software or services for any logs that had incorrect permissions.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|5.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3

Policy Value:
cmd: /usr/bin/find /var/log -type f -perm /037 -ls -o -type d -perm /026 -ls | /usr/bin/awk '{print} END {if (NR == 0) print ""pass"" ; else print ""fail""}'
expect: ^pass$
system: Linux

Actual Value:
The command '/usr/bin/find /var/log -type f -perm /037 -ls -o -type d -perm /026 -ls | /usr/bin/awk '{print} END {if (NR == 0) print ""pass"" ; else print ""fail""}'' returned : 

201327372      4 drwxr-xr-x   8  root     root         4096 Mar  4 03:51 /var/log
201505468     20 -rw-rw-r--   1  root     utmp       291708 Mar  4 20:00 /var/log/lastlog
201585123    200 -rw-rw-r--   1  root     utmp       203904 Mar  4 20:02 /var/log/wtmp
 67678458      0 drwxr-xr-x   2  root     root           23 Feb 23 18:30 /var/log/tuned
 68119718    252 -rw-r--r--   1  root     root       257292 Mar  4 18:53 /var/log/tuned/tuned.log
   270348      0 drwxr-xr-x   2  root     root           43 Feb 26 12:08 /var/log/rhsm
     7414     28 -rw-r--r--   1  root     root        28374 Mar  4 20:09 /var/log/rhsm/rhsmcertd.log
     7415      4 -rw-r--r--   1  root     root         2245 Mar  4 20:09 /var/log/rhsm/rhsm.log
201326724      0 drwxr-xr-x   2  root     root          263 Feb 23 18:29 /var/log/anaconda
201587209    128 -rw-r--r--   1  root     root       101039 Mar  4 20:12 /var/log/dnf.log
201587210     28 -rw-r--r--   1  root     root        27847 Mar  4 20:12 /var/log/dnf.librepo.log
201587211      4 -rw-r--r--   1  root     root         3829 Mar  4 20:12 /var/log/dnf.rpm.log
201587214      4 -rw-r--r--   1  root     root         1224 Mar  4 20:12 /var/log/hawkey.log
201587203      0 -rw-r--r--   1  nobody   nobody          0 Mar  3 01:39 /var/log/.myaccess
201585124      0 -rw-rw----   1  root     utmp            0 Feb 23 18:26 /var/log/btmp-20210303
fail"
"""4.3 Ensure logrotate is configured"" : [WARNING]

The system includes the capability of rotating log files regularly to avoid filling up the system with logs or making the logs unmanageably large. The file /etc/logrotate.d/syslog is the configuration file used to rotate log files created by syslog or rsyslog.
        Rationale:
        By keeping the log files smaller and more manageable, a system administrator can easily archive these files to another system and spend less time looking through inordinately large log files.

        NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance.

Solution:
Edit /etc/logrotate.conf and /etc/logrotate.d/* to ensure logs are rotated according to site policy.
        Notes:
        If no maxage setting is set for logrotate a situation can occur where logrotate is interrupted and fails to delete rotated logfiles. It is recommended to set this to a value greater than the longest any log file should exist on your system to ensure that any such logfile is removed but standard rotation settings are not overridden.

See Also: https://workbench.cisecurity.org/files/2485

Reference: CSCv7|6.4,LEVEL|1NS

Policy Value:
WARNING"
"""5.1.3 Ensure permissions on /etc/cron.hourly are configured"" : [FAILED]

This directory contains system cron jobs that need to run on an hourly basis. The files in this directory cannot be manipulated by the crontab command, but are instead edited by system administrators using a text editor. The commands below restrict read/write and search access to user and group root, preventing regular users from accessing this directory.
        Rationale:
        Granting write access to this directory for non-privileged users could provide them the means for gaining unauthorized elevated privileges. Granting read access to this directory could give an unprivileged user insight in how to gain elevated privileges or circumvent auditing controls.

Solution:
Run the following commands to set ownership and permissions on /etc/cron.hourly :
        # chown root:root /etc/cron.hourly  # chmod og-rwx /etc/cron.hourly

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|5.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3

Policy Value:
file: /etc/cron.hourly
group: root
mask: 077
owner: root
system: Linux

Actual Value:
The file /etc/cron.hourly with fmode owner: root group: root mode: 0750 attr: -------------------- uid: 0 gid: 0 uneven permissions : FALSE  does not match the policy value owner: root group: root mask: 0077 uneven permissions : TRUE 

/etc/cron.hourly"
"""5.1.4 Ensure permissions on /etc/cron.daily are configured"" : [FAILED]

The /etc/cron.daily directory contains system cron jobs that need to run on a daily basis. The files in this directory cannot be manipulated by the crontab command, but are instead edited by system administrators using a text editor. The commands below restrict read/write and search access to user and group root, preventing regular users from accessing this directory.
        Rationale:
        Granting write access to this directory for non-privileged users could provide them the means for gaining unauthorized elevated privileges. Granting read access to this directory could give an unprivileged user insight in how to gain elevated privileges or circumvent auditing controls.

Solution:
Run the following commands to set ownership and permissions on /etc/cron.daily :
        # chown root:root /etc/cron.daily  # chmod og-rwx /etc/cron.daily

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|5.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3

Policy Value:
file: /etc/cron.daily
group: root
mask: 077
owner: root
system: Linux

Actual Value:
The file /etc/cron.daily with fmode owner: root group: root mode: 0750 attr: -------------------- uid: 0 gid: 0 uneven permissions : FALSE  does not match the policy value owner: root group: root mask: 0077 uneven permissions : TRUE 

/etc/cron.daily"
"""5.1.5 Ensure permissions on /etc/cron.weekly are configured"" : [FAILED]

The /etc/cron.weekly directory contains system cron jobs that need to run on a weekly basis. The files in this directory cannot be manipulated by the crontab command, but are instead edited by system administrators using a text editor. The commands below restrict read/write and search access to user and group root, preventing regular users from accessing this directory.
        Rationale:
        Granting write access to this directory for non-privileged users could provide them the means for gaining unauthorized elevated privileges. Granting read access to this directory could give an unprivileged user insight in how to gain elevated privileges or circumvent auditing controls.

Solution:
Run the following commands to set ownership and permissions on /etc/cron.weekly :
        # chown root:root /etc/cron.weekly  # chmod og-rwx /etc/cron.weekly

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|5.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3

Policy Value:
file: /etc/cron.weekly
group: root
mask: 077
owner: root
system: Linux

Actual Value:
The file /etc/cron.weekly with fmode owner: root group: root mode: 0750 attr: -------------------- uid: 0 gid: 0 uneven permissions : FALSE  does not match the policy value owner: root group: root mask: 0077 uneven permissions : TRUE 

/etc/cron.weekly"
"""5.1.6 Ensure permissions on /etc/cron.monthly are configured"" : [FAILED]

The /etc/cron.monthly directory contains system cron jobs that need to run on a monthly basis. The files in this directory cannot be manipulated by the crontab command, but are instead edited by system administrators using a text editor. The commands below restrict read/write and search access to user and group root, preventing regular users from accessing this directory.
        Rationale:
        Granting write access to this directory for non-privileged users could provide them the means for gaining unauthorized elevated privileges. Granting read access to this directory could give an unprivileged user insight in how to gain elevated privileges or circumvent auditing controls.

Solution:
Run the following commands to set ownership and permissions on /etc/cron.monthly :
        # chown root:root /etc/cron.monthly  # chmod og-rwx /etc/cron.monthly

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|5.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3

Policy Value:
file: /etc/cron.monthly
group: root
mask: 077
owner: root
system: Linux

Actual Value:
The file /etc/cron.monthly with fmode owner: root group: root mode: 0750 attr: -------------------- uid: 0 gid: 0 uneven permissions : FALSE  does not match the policy value owner: root group: root mask: 0077 uneven permissions : TRUE 

/etc/cron.monthly"
"""5.1.7 Ensure permissions on /etc/cron.d are configured"" : [FAILED]

The /etc/cron.d directory contains system cron jobs that need to run in a similar manner to the hourly, daily weekly and monthly jobs from /etc/crontab , but require more granular control as to when they run. The files in this directory cannot be manipulated by the crontab command, but are instead edited by system administrators using a text editor. The commands below restrict read/write and search access to user and group root, preventing regular users from accessing this directory.
        Rationale:
        Granting write access to this directory for non-privileged users could provide them the means for gaining unauthorized elevated privileges. Granting read access to this directory could give an unprivileged user insight in how to gain elevated privileges or circumvent auditing controls.

Solution:
Run the following commands to set ownership and permissions on /etc/cron.d :
        # chown root:root /etc/cron.d  # chmod og-rwx /etc/cron.d

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|5.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3

Policy Value:
file: /etc/cron.d
group: root
mask: 077
owner: root
system: Linux

Actual Value:
The file /etc/cron.d with fmode owner: root group: root mode: 0755 attr: -------------------- uid: 0 gid: 0 uneven permissions : FALSE  does not match the policy value owner: root group: root mask: 0077 uneven permissions : TRUE 

/etc/cron.d"
"""5.1.8 Ensure at/cron is restricted to authorized users - at.allow"" : [FAILED]

Configure /etc/cron.allow and /etc/at.allow to allow specific users to use these services. If /etc/cron.allow or /etc/at.allow do not exist, then /etc/at.deny and /etc/cron.deny are checked. Any user not specifically defined in those files is allowed to use at and cron. By removing the files, only users in /etc/cron.allow and /etc/at.allow are allowed to use at and cron. Note that even though a given user is not listed in cron.allow , cron jobs can still be run as that user. The cron.allow file only controls administrative access to the crontab command for scheduling and modifying cron jobs.
        Rationale:
        On many systems, only the system administrator is authorized to schedule cron jobs. Using the cron.allow file to control who can run cron jobs enforces this policy. It is easier to manage an allow list than a deny list. In a deny list, you could potentially add a user ID to the system and forget to add it to the deny files.

Solution:
Run the following commands to remove /etc/cron.deny and /etc/at.deny and create and set permissions and ownership for /etc/cron.allow and /etc/at.allow :
        # rm /etc/cron.deny # rm /etc/at.deny  # touch /etc/cron.allow # touch /etc/at.allow  # chmod og-rwx /etc/cron.allow # chmod og-rwx /etc/at.allow  # chown root:root /etc/cron.allow # chown root:root /etc/at.allow

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.7,800-53|AC-6(10),CSCv7|16,CSF|PR.AC-4,LEVEL|1S,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4

Policy Value:
file: /etc/at.allow
group: root
mask: 177
owner: root
system: Linux

Actual Value:
The file /etc/at.allow with fmode owner: root group: root mode: 0644 attr: -------------------- uid: 0 gid: 0 uneven permissions : FALSE  does not match the policy value owner: root group: root mask: 0177 uneven permissions : TRUE 

/etc/at.allow"
"""5.1.8 Ensure at/cron is restricted to authorized users - cron.allow"" : [FAILED]

Configure /etc/cron.allow and /etc/at.allow to allow specific users to use these services. If /etc/cron.allow or /etc/at.allow do not exist, then /etc/at.deny and /etc/cron.deny are checked. Any user not specifically defined in those files is allowed to use at and cron. By removing the files, only users in /etc/cron.allow and /etc/at.allow are allowed to use at and cron. Note that even though a given user is not listed in cron.allow , cron jobs can still be run as that user. The cron.allow file only controls administrative access to the crontab command for scheduling and modifying cron jobs.
        Rationale:
        On many systems, only the system administrator is authorized to schedule cron jobs. Using the cron.allow file to control who can run cron jobs enforces this policy. It is easier to manage an allow list than a deny list. In a deny list, you could potentially add a user ID to the system and forget to add it to the deny files.

Solution:
Run the following commands to remove /etc/cron.deny and /etc/at.deny and create and set permissions and ownership for /etc/cron.allow and /etc/at.allow :
        # rm /etc/cron.deny # rm /etc/at.deny  # touch /etc/cron.allow # touch /etc/at.allow  # chmod og-rwx /etc/cron.allow # chmod og-rwx /etc/at.allow  # chown root:root /etc/cron.allow # chown root:root /etc/at.allow

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.7,800-53|AC-6(10),CSCv7|16,CSF|PR.AC-4,LEVEL|1S,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4

Policy Value:
file: /etc/cron.allow
group: root
mask: 177
owner: root
system: Linux

Actual Value:
The file /etc/cron.allow with fmode owner: root group: root mode: 0644 attr: -------------------- uid: 0 gid: 0 uneven permissions : FALSE  does not match the policy value owner: root group: root mask: 0177 uneven permissions : TRUE 

/etc/cron.allow"
"""5.2.10 Ensure SSH root login is disabled"" : [FAILED]

The PermitRootLogin parameter specifies if the root user can log in using ssh. The default is no.
        Rationale:
        Disallowing root logins over SSH requires system admins to authenticate using their own individual account, then escalating to root via sudo or su. This in turn limits opportunity for non-repudiation and provides a clear audit trail in the event of a security incident

Solution:
Edit the /etc/ssh/sshd_config file to set the parameter as follows:
        PermitRootLogin no
        Default Value:
        PermitRootLogin without-password

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.15,800-171|3.1.2,800-53|AC-17(4),CSCv7|4.3,CSF|PR.AC-3,CSF|PR.PT-4,ITSG-33|AC-17(4),LEVEL|1S,SWIFT-CSCv1|5.1

Policy Value:
expect: ^[\s]*PermitRootLogin[\s]+no[\s]*$
file: /etc/ssh/sshd_config
regex: ^[\s]*PermitRootLogin[\s]
system: Linux

Actual Value:
Non-compliant file(s):
      /etc/ssh/sshd_config - regex '^[\s]*PermitRootLogin[\s]' found - expect '^[\s]*PermitRootLogin[\s]+no[\s]*$' not found in the following lines:
          43: PermitRootLogin yes"
"""5.2.14 Ensure SSH LoginGraceTime is set to one minute or less"" : [FAILED]

The LoginGraceTime parameter specifies the time allowed for successful authentication to the SSH server. The longer the Grace period is the more open unauthenticated connections can exist. Like other session controls in this session the Grace Period should be limited to appropriate organizational limits to ensure the service is available for needed access.
        Rationale:
        Setting the LoginGraceTime parameter to a low number will minimize the risk of successful brute force attacks to the SSH server. It will also limit the number of concurrent unauthenticated connections While the recommended setting is 60 seconds (1 Minute), set the number based on site policy.

Solution:
Edit the /etc/ssh/sshd_config file to set the parameter as follows:
        LoginGraceTime 60
        Default Value:
        LoginGraceTime 120

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.11,800-53|AC-12,CN-L3|7.1.2.2(d),CN-L3|7.1.3.7(b),CN-L3|8.1.4.1(b),CSCv7|5.1,HIPAA|164.312(a)(2)(iii),ITSG-33|AC-12,LEVEL|1S,NIAv2|NS49,PCI-DSSv3.1|12.3.8,PCI-DSSv3.1|8.1.8,PCI-DSSv3.2|12.3.8,PCI-DSSv3.2|8.1.8

Policy Value:
expect: ^[\s]*LoginGraceTime[\s]+([1-9]|[1-5][0-9]|60)[\s]*$
file: /etc/ssh/sshd_config
regex: ^[\s]*LoginGraceTime[\s]
system: Linux

Actual Value:
Non-compliant file(s):
      /etc/ssh/sshd_config - regex '^[\s]*LoginGraceTime[\s]' found - expect '^[\s]*LoginGraceTime[\s]+([1-9]|[1-5][0-9]|60)[\s]*$' not found in the following lines:
          42: LoginGraceTime 80"
"""5.2.18 Ensure SSH MaxStartups is configured"" : [FAILED]

The MaxStartups parameter specifies the maximum number of concurrent unauthenticated connections to the SSH daemon.
        Rationale:
        To protect a system from denial of service due to a large number of pending authentication connection attempts, use the rate limiting function of MaxStartups to protect availability of sshd logins and prevent overwhelming the daemon.

Solution:
Edit the /etc/ssh/sshd_config file to set the parameter as follows:
        maxstartups 10:30:60

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-53|AC-10,CSCv7|5.1,ITSG-33|AC-10,LEVEL|1S,NESA|T5.5.1

Policy Value:
cmd: /usr/sbin/sshd -T | /usr/bin/grep maxstartups | /usr/bin/awk '{print} END {if (NR == 0) print ""fail""}'
expect: ^[\s]*maxstartups[\s]+10:30:100[\s]*$
system: Linux

Actual Value:
The command '/usr/sbin/sshd -T | /usr/bin/grep maxstartups | /usr/bin/awk '{print} END {if (NR == 0) print ""fail""}'' returned : 

maxstartups 4:30:4"
"""5.2.3 Ensure permissions on SSH private host key files are configured"" : [FAILED]

An SSH private key is one of two files used in SSH public key authentication. In this authentication method, The possession of the private key is proof of identity. Only a private key that corresponds to a public key will be able to authenticate successfully. The private keys need to be stored and handled carefully, and no copies of the private key should be distributed.
        Rationale:
        If an unauthorized user obtains the private SSH host key file, the host could be impersonated

Solution:
Run the following commands to set ownership and permissions on the private SSH host key files
        # find /etc/ssh -xdev -type f -name 'ssh_host_*_key' -exec chown root:root {} ;
        # find /etc/ssh -xdev -type f -name 'ssh_host_*_key' -exec chmod 0600 {} ;

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|5.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3

Policy Value:
file: /etc/ssh/ssh_host_*_key
group: root
mask: 7177
owner: root
system: Linux

Actual Value:
The file /etc/ssh/ssh_host_ecdsa_key with fmode owner: root group: ssh_keys mode: 0640 attr: -------------------- uid: 0 gid: 995 uneven permissions : FALSE  does not match the policy value owner: root group: root mask: 7177 uneven permissions : TRUE 
The file /etc/ssh/ssh_host_ed25519_key with fmode owner: root group: ssh_keys mode: 0640 attr: -------------------- uid: 0 gid: 995 uneven permissions : FALSE  does not match the policy value owner: root group: root mask: 7177 uneven permissions : TRUE 
The file /etc/ssh/ssh_host_rsa_key with fmode owner: root group: ssh_keys mode: 0640 attr: -------------------- uid: 0 gid: 995 uneven permissions : FALSE  does not match the policy value owner: root group: root mask: 7177 uneven permissions : TRUE 

/etc/ssh/ssh_host_ecdsa_key, /etc/ssh/ssh_host_ed25519_key, /etc/ssh/ssh_host_rsa_key"
"""5.3.1 Create custom authselect profile"" : [FAILED]

A custom profile can be created by copying and customizing one of the default profiles. The default profiles include: sssd, winbind, or the nis.
        Rationale:
        A custom profile is required to customize many of the pam options

Solution:
Run the following command to create a custom authselect profile:
        # authselect create-profile <custom-profile name> -b <default profile to copy>
            Example:
            # authselect create-profile custom-profile -b sssd --symlink-meta

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.5.1,800-53|IA-2,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv7|5.1,CSF|PR.AC-1,ITSG-33|IA-2,LEVEL|1S,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM14b,NIAv2|AM2,NIAv2|AM8,TBA-FIISB|35.1,TBA-FIISB|36.1

Policy Value:
cmd: /usr/bin/authselect current | /usr/bin/grep 'Profile[[:space:]]*ID:'
expect: ^[\s]*Profile[\s]*ID:[\s]*sssd[\s]*$
system: Linux

Actual Value:
The command '/usr/bin/authselect current | /usr/bin/grep 'Profile[[:space:]]*ID:'' did not return any result"
"""5.3.2 Select authselect profile"" : [WARNING]

You can select a profile for the authselect utility for a specific host. The profile will be applied to every user logging into the host.
        You can create and deploy a custom profile by customizing one of the default profiles, the sssd, winbind, or the nis profile.
        Rationale:
        When you deploy a profile, the profile is applied to every user logging into the given host

        NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
Run the following command to select a custom authselect profile
        # authselect select custom/<CUSTOM PROFILE NAME> {with-<OPTIONS>}
            Example:
            # authselect select custom/custom-profile with-sudo with-faillock without-nullok

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.5.1,800-53|IA-2,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv7|16,CSF|PR.AC-1,ITSG-33|IA-2,LEVEL|1S,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM14b,NIAv2|AM2,NIAv2|AM8,TBA-FIISB|35.1,TBA-FIISB|36.1

Policy Value:
cmd: /usr/bin/authselect current
expect: 
system: Linux

Actual Value:
The command '/usr/bin/authselect current' returned : 

No existing configuration detected."
"""5.3.3 Ensure authselect includes with-faillock - 'authselect'"" : [FAILED]

The pam_faillock.so module maintains a list of failed authentication attempts per user during a specified interval and locks the account in case there were more than deny consecutive failed authentications. It stores the failure records into per-user files in the tally directory
        Rationale:
        Locking out user IDs after n unsuccessful consecutive login attempts mitigates brute force password attacks against your systems.

Solution:
Run the following command to include the with-faillock option
        # authselect select <PROFILE NAME> with-faillock
            Example:
            # authselect select custom/custom-profile with-sudo with-faillock without-nullok

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.5.1,800-53|IA-2,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv7|16.7,CSF|PR.AC-1,ITSG-33|IA-2,LEVEL|1S,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM14b,NIAv2|AM2,NIAv2|AM8,TBA-FIISB|35.1,TBA-FIISB|36.1

Policy Value:
cmd: /usr/bin/authselect current | /usr/bin/grep with-faillock
expect: ^[\s]*-[\s]*with-faillock[\s]*$
system: Linux

Actual Value:
The command '/usr/bin/authselect current | /usr/bin/grep with-faillock' did not return any result"
"""5.3.3 Ensure authselect includes with-faillock - 'authselect.conf'"" : [FAILED]

The pam_faillock.so module maintains a list of failed authentication attempts per user during a specified interval and locks the account in case there were more than deny consecutive failed authentications. It stores the failure records into per-user files in the tally directory
        Rationale:
        Locking out user IDs after n unsuccessful consecutive login attempts mitigates brute force password attacks against your systems.

Solution:
Run the following command to include the with-faillock option
        # authselect select <PROFILE NAME> with-faillock
            Example:
            # authselect select custom/custom-profile with-sudo with-faillock without-nullok

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.8,800-53|AC-7,CN-L3|8.1.4.1(b),CSCv7|16.7,ITSG-33|AC-7,LEVEL|1S,NESA|T5.5.1,NIAv2|AM24,TBA-FIISB|36.2.4,TBA-FIISB|45.1.2,TBA-FIISB|45.2.1,TBA-FIISB|45.2.2

Policy Value:
cmd: /usr/bin/grep with-faillock /etc/authselect/authselect.conf
expect: ^[\s]*with-faillock[\s]*$
system: Linux

Actual Value:
The command '/usr/bin/grep with-faillock /etc/authselect/authselect.conf' returned : 

/usr/bin/grep: /etc/authselect/authselect.conf: No such file or directory"
"""5.4.1 Ensure password creation requirements are configured - dcredit"" : [FAILED]

The pam_pwquality.so module checks the strength of passwords. It performs checks such as making sure a password is not a dictionary word, it is a certain length, contains a mix of characters (e.g. alphabet, numeric, other) and more. The following are definitions of the pam_pwquality.so options.
        try_first_pass - retrieve the password from a previous stacked PAM module. If not available, then prompt the user for a password.
        retry=3 - Allow 3 tries before sending back a failure.
        minlen=14 - password must be 14 characters or more
        ** Either of the following can be used to enforce complex passwords:**
        minclass=4 - provide at least four classes of characters for the new password
        OR
        dcredit=-1 - provide at least one digit
        ucredit=-1 - provide at least one uppercase character
        ocredit=-1 - provide at least one special character
        lcredit=-1 - provide at least one lowercase character
        The settings shown above are one possible policy. Alter these values to conform to your own organization's password policies
        Rationale:
        Strong passwords protect systems from being hacked through brute force methods.

Solution:
Edit the file /etc/security/pwquality.conf and add or modify the following line for password length to conform to site policy
        minlen = 14
        Edit the file /etc/security/pwquality.conf and add or modify the following line for password complexity to conform to site policy
        minclass = 4
        OR
        dcredit = -1 ucredit = -1 ocredit = -1 lcredit = -1
        Run the following to update the system-auth and password-auth files
        CP=$(authselect current | awk 'NR == 1 {print $3}' | grep custom/) for FN in system-auth password-auth; do 	[[ -n $CP ]] && PTF=/etc/authselect/$CP/$FN || PTF=/etc/authselect/$FN 	[[ -z $(grep -E '^s*passwords+requisites+pam_pwquality.sos+.*enforce-for-roots*.*$' $PTF) ]] && sed -ri 's/^s*(passwords+requisites+pam_pwquality.sos+)(.*)$/12 enforce-for-root/' $PTF 	[[ -n $(grep -E '^s*passwords+requisites+pam_pwquality.sos+.*s+retry=S+s*.*$' $PTF) ]] && sed -ri '/pwquality/s/retry=S+/retry=3/' $PTF || sed -ri 's/^s*(passwords+requisites+pam_pwquality.sos+)(.*)$/12 retry=3/' $PTF done authselect apply-changes
        Notes:
        all default authselect profiles have pam_pwquality enabled with the expectation that options will be specified in pwquality.conf

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.5.7,800-53|IA-5(1),CIP|007-6-R5,CN-L3|7.1.2.7(e),CN-L3|7.1.3.1(b),CSCv7|4.4,CSF|PR.AC-1,HIPAA|164.308(a)(5)(ii)(D),ISO/IEC-27001|A.9.4.3,ITSG-33|IA-5(1),LEVEL|1S,NESA|T5.2.3,NIAv2|AM19a,NIAv2|AM19b,NIAv2|AM19c,NIAv2|AM19d,NIAv2|AM22a,PCI-DSSv3.1|8.2.3,PCI-DSSv3.2|8.2.3,SWIFT-CSCv1|4.1,TBA-FIISB|26.2.1,TBA-FIISB|26.2.4

Policy Value:
expect: ^[\s]*dcredit[\s]*=[\s]*-1[\s]*$
file: /etc/security/pwquality.conf
regex: ^[\s]*dcredit[\s]*=
system: Linux

Actual Value:
The file ""/etc/security/pwquality.conf"" does not contain ""^[\s]*dcredit[\s]*="""
"""5.4.1 Ensure password creation requirements are configured - lcredit"" : [FAILED]

The pam_pwquality.so module checks the strength of passwords. It performs checks such as making sure a password is not a dictionary word, it is a certain length, contains a mix of characters (e.g. alphabet, numeric, other) and more. The following are definitions of the pam_pwquality.so options.
        try_first_pass - retrieve the password from a previous stacked PAM module. If not available, then prompt the user for a password.
        retry=3 - Allow 3 tries before sending back a failure.
        minlen=14 - password must be 14 characters or more
        ** Either of the following can be used to enforce complex passwords:**
        minclass=4 - provide at least four classes of characters for the new password
        OR
        dcredit=-1 - provide at least one digit
        ucredit=-1 - provide at least one uppercase character
        ocredit=-1 - provide at least one special character
        lcredit=-1 - provide at least one lowercase character
        The settings shown above are one possible policy. Alter these values to conform to your own organization's password policies
        Rationale:
        Strong passwords protect systems from being hacked through brute force methods.

Solution:
Edit the file /etc/security/pwquality.conf and add or modify the following line for password length to conform to site policy
        minlen = 14
        Edit the file /etc/security/pwquality.conf and add or modify the following line for password complexity to conform to site policy
        minclass = 4
        OR
        dcredit = -1 ucredit = -1 ocredit = -1 lcredit = -1
        Run the following to update the system-auth and password-auth files
        CP=$(authselect current | awk 'NR == 1 {print $3}' | grep custom/) for FN in system-auth password-auth; do 	[[ -n $CP ]] && PTF=/etc/authselect/$CP/$FN || PTF=/etc/authselect/$FN 	[[ -z $(grep -E '^s*passwords+requisites+pam_pwquality.sos+.*enforce-for-roots*.*$' $PTF) ]] && sed -ri 's/^s*(passwords+requisites+pam_pwquality.sos+)(.*)$/12 enforce-for-root/' $PTF 	[[ -n $(grep -E '^s*passwords+requisites+pam_pwquality.sos+.*s+retry=S+s*.*$' $PTF) ]] && sed -ri '/pwquality/s/retry=S+/retry=3/' $PTF || sed -ri 's/^s*(passwords+requisites+pam_pwquality.sos+)(.*)$/12 retry=3/' $PTF done authselect apply-changes
        Notes:
        all default authselect profiles have pam_pwquality enabled with the expectation that options will be specified in pwquality.conf

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.5.7,800-53|IA-5(1),CIP|007-6-R5,CN-L3|7.1.2.7(e),CN-L3|7.1.3.1(b),CSCv7|4.4,CSF|PR.AC-1,HIPAA|164.308(a)(5)(ii)(D),ISO/IEC-27001|A.9.4.3,ITSG-33|IA-5(1),LEVEL|1S,NESA|T5.2.3,NIAv2|AM19a,NIAv2|AM19b,NIAv2|AM19c,NIAv2|AM19d,NIAv2|AM22a,PCI-DSSv3.1|8.2.3,PCI-DSSv3.2|8.2.3,SWIFT-CSCv1|4.1,TBA-FIISB|26.2.1,TBA-FIISB|26.2.4

Policy Value:
expect: ^[\s]*lcredit[\s]*=[\s]*-1[\s]*$
file: /etc/security/pwquality.conf
regex: ^[\s]*lcredit[\s]*=
system: Linux

Actual Value:
The file ""/etc/security/pwquality.conf"" does not contain ""^[\s]*lcredit[\s]*="""
"""5.4.1 Ensure password creation requirements are configured - minlen"" : [FAILED]

The pam_pwquality.so module checks the strength of passwords. It performs checks such as making sure a password is not a dictionary word, it is a certain length, contains a mix of characters (e.g. alphabet, numeric, other) and more. The following are definitions of the pam_pwquality.so options.
        try_first_pass - retrieve the password from a previous stacked PAM module. If not available, then prompt the user for a password.
        retry=3 - Allow 3 tries before sending back a failure.
        minlen=14 - password must be 14 characters or more
        ** Either of the following can be used to enforce complex passwords:**
        minclass=4 - provide at least four classes of characters for the new password
        OR
        dcredit=-1 - provide at least one digit
        ucredit=-1 - provide at least one uppercase character
        ocredit=-1 - provide at least one special character
        lcredit=-1 - provide at least one lowercase character
        The settings shown above are one possible policy. Alter these values to conform to your own organization's password policies
        Rationale:
        Strong passwords protect systems from being hacked through brute force methods.

Solution:
Edit the file /etc/security/pwquality.conf and add or modify the following line for password length to conform to site policy
        minlen = 14
        Edit the file /etc/security/pwquality.conf and add or modify the following line for password complexity to conform to site policy
        minclass = 4
        OR
        dcredit = -1 ucredit = -1 ocredit = -1 lcredit = -1
        Run the following to update the system-auth and password-auth files
        CP=$(authselect current | awk 'NR == 1 {print $3}' | grep custom/) for FN in system-auth password-auth; do 	[[ -n $CP ]] && PTF=/etc/authselect/$CP/$FN || PTF=/etc/authselect/$FN 	[[ -z $(grep -E '^s*passwords+requisites+pam_pwquality.sos+.*enforce-for-roots*.*$' $PTF) ]] && sed -ri 's/^s*(passwords+requisites+pam_pwquality.sos+)(.*)$/12 enforce-for-root/' $PTF 	[[ -n $(grep -E '^s*passwords+requisites+pam_pwquality.sos+.*s+retry=S+s*.*$' $PTF) ]] && sed -ri '/pwquality/s/retry=S+/retry=3/' $PTF || sed -ri 's/^s*(passwords+requisites+pam_pwquality.sos+)(.*)$/12 retry=3/' $PTF done authselect apply-changes
        Notes:
        all default authselect profiles have pam_pwquality enabled with the expectation that options will be specified in pwquality.conf

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.5.7,800-53|IA-5(1),CIP|007-6-R5,CN-L3|7.1.2.7(e),CN-L3|7.1.3.1(b),CSCv7|4.4,CSF|PR.AC-1,HIPAA|164.308(a)(5)(ii)(D),ISO/IEC-27001|A.9.4.3,ITSG-33|IA-5(1),LEVEL|1S,NESA|T5.2.3,NIAv2|AM19a,NIAv2|AM19b,NIAv2|AM19c,NIAv2|AM19d,NIAv2|AM22a,PCI-DSSv3.1|8.2.3,PCI-DSSv3.2|8.2.3,SWIFT-CSCv1|4.1,TBA-FIISB|26.2.1,TBA-FIISB|26.2.4

Policy Value:
expect: ^[\s]*minlen[\s]*=[\s]*(1[4-9]|[2-9][0-9])[\s]*$
file: /etc/security/pwquality.conf
regex: ^[\s]*minlen[\s]*=
system: Linux

Actual Value:
The file ""/etc/security/pwquality.conf"" does not contain ""^[\s]*minlen[\s]*="""
"""5.4.1 Ensure password creation requirements are configured - ocredit"" : [FAILED]

The pam_pwquality.so module checks the strength of passwords. It performs checks such as making sure a password is not a dictionary word, it is a certain length, contains a mix of characters (e.g. alphabet, numeric, other) and more. The following are definitions of the pam_pwquality.so options.
        try_first_pass - retrieve the password from a previous stacked PAM module. If not available, then prompt the user for a password.
        retry=3 - Allow 3 tries before sending back a failure.
        minlen=14 - password must be 14 characters or more
        ** Either of the following can be used to enforce complex passwords:**
        minclass=4 - provide at least four classes of characters for the new password
        OR
        dcredit=-1 - provide at least one digit
        ucredit=-1 - provide at least one uppercase character
        ocredit=-1 - provide at least one special character
        lcredit=-1 - provide at least one lowercase character
        The settings shown above are one possible policy. Alter these values to conform to your own organization's password policies
        Rationale:
        Strong passwords protect systems from being hacked through brute force methods.

Solution:
Edit the file /etc/security/pwquality.conf and add or modify the following line for password length to conform to site policy
        minlen = 14
        Edit the file /etc/security/pwquality.conf and add or modify the following line for password complexity to conform to site policy
        minclass = 4
        OR
        dcredit = -1 ucredit = -1 ocredit = -1 lcredit = -1
        Run the following to update the system-auth and password-auth files
        CP=$(authselect current | awk 'NR == 1 {print $3}' | grep custom/) for FN in system-auth password-auth; do 	[[ -n $CP ]] && PTF=/etc/authselect/$CP/$FN || PTF=/etc/authselect/$FN 	[[ -z $(grep -E '^s*passwords+requisites+pam_pwquality.sos+.*enforce-for-roots*.*$' $PTF) ]] && sed -ri 's/^s*(passwords+requisites+pam_pwquality.sos+)(.*)$/12 enforce-for-root/' $PTF 	[[ -n $(grep -E '^s*passwords+requisites+pam_pwquality.sos+.*s+retry=S+s*.*$' $PTF) ]] && sed -ri '/pwquality/s/retry=S+/retry=3/' $PTF || sed -ri 's/^s*(passwords+requisites+pam_pwquality.sos+)(.*)$/12 retry=3/' $PTF done authselect apply-changes
        Notes:
        all default authselect profiles have pam_pwquality enabled with the expectation that options will be specified in pwquality.conf

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.5.7,800-53|IA-5(1),CIP|007-6-R5,CN-L3|7.1.2.7(e),CN-L3|7.1.3.1(b),CSCv7|4.4,CSF|PR.AC-1,HIPAA|164.308(a)(5)(ii)(D),ISO/IEC-27001|A.9.4.3,ITSG-33|IA-5(1),LEVEL|1S,NESA|T5.2.3,NIAv2|AM19a,NIAv2|AM19b,NIAv2|AM19c,NIAv2|AM19d,NIAv2|AM22a,PCI-DSSv3.1|8.2.3,PCI-DSSv3.2|8.2.3,SWIFT-CSCv1|4.1,TBA-FIISB|26.2.1,TBA-FIISB|26.2.4

Policy Value:
expect: ^[\s]*ocredit[\s]*=[\s]*-1[\s]*$
file: /etc/security/pwquality.conf
regex: ^[\s]*ocredit[\s]*=
system: Linux

Actual Value:
The file ""/etc/security/pwquality.conf"" does not contain ""^[\s]*ocredit[\s]*="""
"""5.4.1 Ensure password creation requirements are configured - ucredit"" : [FAILED]

The pam_pwquality.so module checks the strength of passwords. It performs checks such as making sure a password is not a dictionary word, it is a certain length, contains a mix of characters (e.g. alphabet, numeric, other) and more. The following are definitions of the pam_pwquality.so options.
        try_first_pass - retrieve the password from a previous stacked PAM module. If not available, then prompt the user for a password.
        retry=3 - Allow 3 tries before sending back a failure.
        minlen=14 - password must be 14 characters or more
        ** Either of the following can be used to enforce complex passwords:**
        minclass=4 - provide at least four classes of characters for the new password
        OR
        dcredit=-1 - provide at least one digit
        ucredit=-1 - provide at least one uppercase character
        ocredit=-1 - provide at least one special character
        lcredit=-1 - provide at least one lowercase character
        The settings shown above are one possible policy. Alter these values to conform to your own organization's password policies
        Rationale:
        Strong passwords protect systems from being hacked through brute force methods.

Solution:
Edit the file /etc/security/pwquality.conf and add or modify the following line for password length to conform to site policy
        minlen = 14
        Edit the file /etc/security/pwquality.conf and add or modify the following line for password complexity to conform to site policy
        minclass = 4
        OR
        dcredit = -1 ucredit = -1 ocredit = -1 lcredit = -1
        Run the following to update the system-auth and password-auth files
        CP=$(authselect current | awk 'NR == 1 {print $3}' | grep custom/) for FN in system-auth password-auth; do 	[[ -n $CP ]] && PTF=/etc/authselect/$CP/$FN || PTF=/etc/authselect/$FN 	[[ -z $(grep -E '^s*passwords+requisites+pam_pwquality.sos+.*enforce-for-roots*.*$' $PTF) ]] && sed -ri 's/^s*(passwords+requisites+pam_pwquality.sos+)(.*)$/12 enforce-for-root/' $PTF 	[[ -n $(grep -E '^s*passwords+requisites+pam_pwquality.sos+.*s+retry=S+s*.*$' $PTF) ]] && sed -ri '/pwquality/s/retry=S+/retry=3/' $PTF || sed -ri 's/^s*(passwords+requisites+pam_pwquality.sos+)(.*)$/12 retry=3/' $PTF done authselect apply-changes
        Notes:
        all default authselect profiles have pam_pwquality enabled with the expectation that options will be specified in pwquality.conf

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.5.7,800-53|IA-5(1),CIP|007-6-R5,CN-L3|7.1.2.7(e),CN-L3|7.1.3.1(b),CSCv7|4.4,CSF|PR.AC-1,HIPAA|164.308(a)(5)(ii)(D),ISO/IEC-27001|A.9.4.3,ITSG-33|IA-5(1),LEVEL|1S,NESA|T5.2.3,NIAv2|AM19a,NIAv2|AM19b,NIAv2|AM19c,NIAv2|AM19d,NIAv2|AM22a,PCI-DSSv3.1|8.2.3,PCI-DSSv3.2|8.2.3,SWIFT-CSCv1|4.1,TBA-FIISB|26.2.1,TBA-FIISB|26.2.4

Policy Value:
expect: ^[\s]*ucredit[\s]*=[\s]*-1[\s]*$
file: /etc/security/pwquality.conf
regex: ^[\s]*ucredit[\s]*=
system: Linux

Actual Value:
The file ""/etc/security/pwquality.conf"" does not contain ""^[\s]*ucredit[\s]*="""
"""5.4.2 Ensure lockout for failed password attempts is configured - password-auth 'auth [default=die] pam_faillock.so'"" : [FAILED]

Lock out users after n unsuccessful consecutive login attempts.
        deny= - Number of attempts before the account is locked
        unlock_time= - Time in seconds before the account is unlocked
        Set the lockout number and unlock time to follow local site policy.
        Rationale:
        Locking out user IDs after n unsuccessful consecutive login attempts mitigates brute force password attacks against your systems.

Solution:
Set password lockouts and unlock times to conform to site policy Run the following to update the system-auth and password-auth files. This script will update/add the deny=5 and unlock_time=900 options. This script should be modified as needed to follow local site policy.
        CP=$(authselect current | awk 'NR == 1 {print $3}' | grep custom/) for FN in system-auth password-auth; do 	[[ -n $CP ]] && PTF=/etc/authselect/$CP/$FN || PTF=/etc/authselect/$FN 	[[ -n $(grep -E '^s*auths+requireds+pam_faillock.sos+.*deny=S+s*.*$' $PTF) ]] && sed -ri '/pam_faillock.so/s/deny=S+/deny=5/g' $PTF || sed -ri 's/^^s*(auths+requireds+pam_faillock.sos+)(.*[^{}])({.*}|)$/12 deny=5 3/' $PTF 	[[ -n $(grep -E '^s*auths+requireds+pam_faillock.sos+.*unlock_time=S+s*.*$' $PTF) ]] && sed -ri '/pam_faillock.so/s/unlock_time=S+/unlock_time=900/g' $PTF || sed -ri 's/^s*(auths+requireds+pam_faillock.sos+)(.*[^{}])({.*}|)$/12 unlock_time=900 3/' $PTF done authselect apply-changes
        Notes:
        Additional module options may be set, recommendation only covers those listed here.
        If a user has been locked out because they have reached the maximum consecutive failure count defined by deny= in the pam_faillock.so module, the user can be unlocked by issuing the command faillock -u --reset. This command sets the failed count to 0, effectively unlocking the user.
        Use of the ""audit"" keyword may log credentials in the case of user error during authentication. This risk should be evaluated in the context of the site policies of your organization.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.8,800-53|AC-7,CN-L3|8.1.4.1(b),CSCv7|16.7,ITSG-33|AC-7,LEVEL|1S,NESA|T5.5.1,NIAv2|AM24,TBA-FIISB|36.2.4,TBA-FIISB|45.1.2,TBA-FIISB|45.2.1,TBA-FIISB|45.2.2

Policy Value:
expect: ^[\s]*auth[\s]+\[default=die\][\s]+pam_faillock\.so[\s]+authfail[\s]+audit[\s]+deny=5[\s]+unlock_time=900[\s]*$
file: /etc/pam.d/password-auth
regex: ^[\s]*auth[\s]+\[default=die\][\s]+pam_faillock\.so[\s]*
system: Linux

Actual Value:
The file ""/etc/pam.d/password-auth"" does not contain ""^[\s]*auth[\s]+\[default=die\][\s]+pam_faillock\.so[\s]*"""
"""5.4.2 Ensure lockout for failed password attempts is configured - password-auth 'auth [success=1 default=bad] pam_unix.so'"" : [FAILED]

Lock out users after n unsuccessful consecutive login attempts.
        deny= - Number of attempts before the account is locked
        unlock_time= - Time in seconds before the account is unlocked
        Set the lockout number and unlock time to follow local site policy.
        Rationale:
        Locking out user IDs after n unsuccessful consecutive login attempts mitigates brute force password attacks against your systems.

Solution:
Set password lockouts and unlock times to conform to site policy Run the following to update the system-auth and password-auth files. This script will update/add the deny=5 and unlock_time=900 options. This script should be modified as needed to follow local site policy.
        CP=$(authselect current | awk 'NR == 1 {print $3}' | grep custom/) for FN in system-auth password-auth; do 	[[ -n $CP ]] && PTF=/etc/authselect/$CP/$FN || PTF=/etc/authselect/$FN 	[[ -n $(grep -E '^s*auths+requireds+pam_faillock.sos+.*deny=S+s*.*$' $PTF) ]] && sed -ri '/pam_faillock.so/s/deny=S+/deny=5/g' $PTF || sed -ri 's/^^s*(auths+requireds+pam_faillock.sos+)(.*[^{}])({.*}|)$/12 deny=5 3/' $PTF 	[[ -n $(grep -E '^s*auths+requireds+pam_faillock.sos+.*unlock_time=S+s*.*$' $PTF) ]] && sed -ri '/pam_faillock.so/s/unlock_time=S+/unlock_time=900/g' $PTF || sed -ri 's/^s*(auths+requireds+pam_faillock.sos+)(.*[^{}])({.*}|)$/12 unlock_time=900 3/' $PTF done authselect apply-changes
        Notes:
        Additional module options may be set, recommendation only covers those listed here.
        If a user has been locked out because they have reached the maximum consecutive failure count defined by deny= in the pam_faillock.so module, the user can be unlocked by issuing the command faillock -u --reset. This command sets the failed count to 0, effectively unlocking the user.
        Use of the ""audit"" keyword may log credentials in the case of user error during authentication. This risk should be evaluated in the context of the site policies of your organization.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.8,800-53|AC-7,CN-L3|8.1.4.1(b),CSCv7|16.7,ITSG-33|AC-7,LEVEL|1S,NESA|T5.5.1,NIAv2|AM24,TBA-FIISB|36.2.4,TBA-FIISB|45.1.2,TBA-FIISB|45.2.1,TBA-FIISB|45.2.2

Policy Value:
expect: ^[\s]*auth[\s]+\[success=1[\s]+default=bad\][\s]+pam_unix.so[\s]*$
file: /etc/pam.d/password-auth
regex: ^[\s]*auth[\s]+\[success=1[\s]+default=bad\][\s]*
system: Linux

Actual Value:
The file ""/etc/pam.d/password-auth"" does not contain ""^[\s]*auth[\s]+\[success=1[\s]+default=bad\][\s]*"""
"""5.4.2 Ensure lockout for failed password attempts is configured - password-auth 'auth required pam_faillock.so'"" : [FAILED]

Lock out users after n unsuccessful consecutive login attempts.
        deny= - Number of attempts before the account is locked
        unlock_time= - Time in seconds before the account is unlocked
        Set the lockout number and unlock time to follow local site policy.
        Rationale:
        Locking out user IDs after n unsuccessful consecutive login attempts mitigates brute force password attacks against your systems.

Solution:
Set password lockouts and unlock times to conform to site policy Run the following to update the system-auth and password-auth files. This script will update/add the deny=5 and unlock_time=900 options. This script should be modified as needed to follow local site policy.
        CP=$(authselect current | awk 'NR == 1 {print $3}' | grep custom/) for FN in system-auth password-auth; do 	[[ -n $CP ]] && PTF=/etc/authselect/$CP/$FN || PTF=/etc/authselect/$FN 	[[ -n $(grep -E '^s*auths+requireds+pam_faillock.sos+.*deny=S+s*.*$' $PTF) ]] && sed -ri '/pam_faillock.so/s/deny=S+/deny=5/g' $PTF || sed -ri 's/^^s*(auths+requireds+pam_faillock.sos+)(.*[^{}])({.*}|)$/12 deny=5 3/' $PTF 	[[ -n $(grep -E '^s*auths+requireds+pam_faillock.sos+.*unlock_time=S+s*.*$' $PTF) ]] && sed -ri '/pam_faillock.so/s/unlock_time=S+/unlock_time=900/g' $PTF || sed -ri 's/^s*(auths+requireds+pam_faillock.sos+)(.*[^{}])({.*}|)$/12 unlock_time=900 3/' $PTF done authselect apply-changes
        Notes:
        Additional module options may be set, recommendation only covers those listed here.
        If a user has been locked out because they have reached the maximum consecutive failure count defined by deny= in the pam_faillock.so module, the user can be unlocked by issuing the command faillock -u --reset. This command sets the failed count to 0, effectively unlocking the user.
        Use of the ""audit"" keyword may log credentials in the case of user error during authentication. This risk should be evaluated in the context of the site policies of your organization.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.8,800-53|AC-7,CN-L3|8.1.4.1(b),CSCv7|16.7,ITSG-33|AC-7,LEVEL|1S,NESA|T5.5.1,NIAv2|AM24,TBA-FIISB|36.2.4,TBA-FIISB|45.1.2,TBA-FIISB|45.2.1,TBA-FIISB|45.2.2

Policy Value:
expect: ^[\s]*auth[\s]+required[\s]+pam_faillock\.so[\s]+preauth[\s]+audit[\s]+silent[\s]+deny=5[\s]+unlock_time=900[\s]*$
file: /etc/pam.d/password-auth
regex: ^[\s]*auth[\s]+required[\s]+pam_faillock\.so[\s]*
system: Linux

Actual Value:
The file ""/etc/pam.d/password-auth"" does not contain ""^[\s]*auth[\s]+required[\s]+pam_faillock\.so[\s]*"""
"""5.4.2 Ensure lockout for failed password attempts is configured - password-auth 'auth sufficient pam_faillock.so'"" : [FAILED]

Lock out users after n unsuccessful consecutive login attempts.
        deny= - Number of attempts before the account is locked
        unlock_time= - Time in seconds before the account is unlocked
        Set the lockout number and unlock time to follow local site policy.
        Rationale:
        Locking out user IDs after n unsuccessful consecutive login attempts mitigates brute force password attacks against your systems.

Solution:
Set password lockouts and unlock times to conform to site policy Run the following to update the system-auth and password-auth files. This script will update/add the deny=5 and unlock_time=900 options. This script should be modified as needed to follow local site policy.
        CP=$(authselect current | awk 'NR == 1 {print $3}' | grep custom/) for FN in system-auth password-auth; do 	[[ -n $CP ]] && PTF=/etc/authselect/$CP/$FN || PTF=/etc/authselect/$FN 	[[ -n $(grep -E '^s*auths+requireds+pam_faillock.sos+.*deny=S+s*.*$' $PTF) ]] && sed -ri '/pam_faillock.so/s/deny=S+/deny=5/g' $PTF || sed -ri 's/^^s*(auths+requireds+pam_faillock.sos+)(.*[^{}])({.*}|)$/12 deny=5 3/' $PTF 	[[ -n $(grep -E '^s*auths+requireds+pam_faillock.sos+.*unlock_time=S+s*.*$' $PTF) ]] && sed -ri '/pam_faillock.so/s/unlock_time=S+/unlock_time=900/g' $PTF || sed -ri 's/^s*(auths+requireds+pam_faillock.sos+)(.*[^{}])({.*}|)$/12 unlock_time=900 3/' $PTF done authselect apply-changes
        Notes:
        Additional module options may be set, recommendation only covers those listed here.
        If a user has been locked out because they have reached the maximum consecutive failure count defined by deny= in the pam_faillock.so module, the user can be unlocked by issuing the command faillock -u --reset. This command sets the failed count to 0, effectively unlocking the user.
        Use of the ""audit"" keyword may log credentials in the case of user error during authentication. This risk should be evaluated in the context of the site policies of your organization.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.8,800-53|AC-7,CN-L3|8.1.4.1(b),CSCv7|16.7,ITSG-33|AC-7,LEVEL|1S,NESA|T5.5.1,NIAv2|AM24,TBA-FIISB|36.2.4,TBA-FIISB|45.1.2,TBA-FIISB|45.2.1,TBA-FIISB|45.2.2

Policy Value:
expect: ^[\s]*auth[\s]+sufficient[\s]+pam_faillock\.so[\s]+authsucc[\s]+audit[\s]+deny=5[\s]+unlock_time=900[\s]*$
file: /etc/pam.d/password-auth
regex: ^[\s]*auth[\s]+sufficient[\s]+pam_faillock\.so[\s]*
system: Linux

Actual Value:
The file ""/etc/pam.d/password-auth"" does not contain ""^[\s]*auth[\s]+sufficient[\s]+pam_faillock\.so[\s]*"""
"""5.4.2 Ensure lockout for failed password attempts is configured - system-auth 'auth [default=die] pam_faillock.so'"" : [FAILED]

Lock out users after n unsuccessful consecutive login attempts.
        deny= - Number of attempts before the account is locked
        unlock_time= - Time in seconds before the account is unlocked
        Set the lockout number and unlock time to follow local site policy.
        Rationale:
        Locking out user IDs after n unsuccessful consecutive login attempts mitigates brute force password attacks against your systems.

Solution:
Set password lockouts and unlock times to conform to site policy Run the following to update the system-auth and password-auth files. This script will update/add the deny=5 and unlock_time=900 options. This script should be modified as needed to follow local site policy.
        CP=$(authselect current | awk 'NR == 1 {print $3}' | grep custom/) for FN in system-auth password-auth; do 	[[ -n $CP ]] && PTF=/etc/authselect/$CP/$FN || PTF=/etc/authselect/$FN 	[[ -n $(grep -E '^s*auths+requireds+pam_faillock.sos+.*deny=S+s*.*$' $PTF) ]] && sed -ri '/pam_faillock.so/s/deny=S+/deny=5/g' $PTF || sed -ri 's/^^s*(auths+requireds+pam_faillock.sos+)(.*[^{}])({.*}|)$/12 deny=5 3/' $PTF 	[[ -n $(grep -E '^s*auths+requireds+pam_faillock.sos+.*unlock_time=S+s*.*$' $PTF) ]] && sed -ri '/pam_faillock.so/s/unlock_time=S+/unlock_time=900/g' $PTF || sed -ri 's/^s*(auths+requireds+pam_faillock.sos+)(.*[^{}])({.*}|)$/12 unlock_time=900 3/' $PTF done authselect apply-changes
        Notes:
        Additional module options may be set, recommendation only covers those listed here.
        If a user has been locked out because they have reached the maximum consecutive failure count defined by deny= in the pam_faillock.so module, the user can be unlocked by issuing the command faillock -u --reset. This command sets the failed count to 0, effectively unlocking the user.
        Use of the ""audit"" keyword may log credentials in the case of user error during authentication. This risk should be evaluated in the context of the site policies of your organization.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.8,800-53|AC-7,CN-L3|8.1.4.1(b),CSCv7|16.7,ITSG-33|AC-7,LEVEL|1S,NESA|T5.5.1,NIAv2|AM24,TBA-FIISB|36.2.4,TBA-FIISB|45.1.2,TBA-FIISB|45.2.1,TBA-FIISB|45.2.2

Policy Value:
expect: ^[\s]*auth[\s]+\[default=die\][\s]+pam_faillock\.so[\s]+authfail[\s]+audit[\s]+deny=5[\s]+unlock_time=900[\s]*$
file: /etc/pam.d/system-auth
regex: ^[\s]*auth[\s]+\[default=die\][\s]+pam_faillock\.so[\s]*
system: Linux

Actual Value:
The file ""/etc/pam.d/system-auth"" does not contain ""^[\s]*auth[\s]+\[default=die\][\s]+pam_faillock\.so[\s]*"""
"""5.4.2 Ensure lockout for failed password attempts is configured - system-auth 'auth [success=1 default=bad] pam_unix.so'"" : [FAILED]

Lock out users after n unsuccessful consecutive login attempts.
        deny= - Number of attempts before the account is locked
        unlock_time= - Time in seconds before the account is unlocked
        Set the lockout number and unlock time to follow local site policy.
        Rationale:
        Locking out user IDs after n unsuccessful consecutive login attempts mitigates brute force password attacks against your systems.

Solution:
Set password lockouts and unlock times to conform to site policy Run the following to update the system-auth and password-auth files. This script will update/add the deny=5 and unlock_time=900 options. This script should be modified as needed to follow local site policy.
        CP=$(authselect current | awk 'NR == 1 {print $3}' | grep custom/) for FN in system-auth password-auth; do 	[[ -n $CP ]] && PTF=/etc/authselect/$CP/$FN || PTF=/etc/authselect/$FN 	[[ -n $(grep -E '^s*auths+requireds+pam_faillock.sos+.*deny=S+s*.*$' $PTF) ]] && sed -ri '/pam_faillock.so/s/deny=S+/deny=5/g' $PTF || sed -ri 's/^^s*(auths+requireds+pam_faillock.sos+)(.*[^{}])({.*}|)$/12 deny=5 3/' $PTF 	[[ -n $(grep -E '^s*auths+requireds+pam_faillock.sos+.*unlock_time=S+s*.*$' $PTF) ]] && sed -ri '/pam_faillock.so/s/unlock_time=S+/unlock_time=900/g' $PTF || sed -ri 's/^s*(auths+requireds+pam_faillock.sos+)(.*[^{}])({.*}|)$/12 unlock_time=900 3/' $PTF done authselect apply-changes
        Notes:
        Additional module options may be set, recommendation only covers those listed here.
        If a user has been locked out because they have reached the maximum consecutive failure count defined by deny= in the pam_faillock.so module, the user can be unlocked by issuing the command faillock -u --reset. This command sets the failed count to 0, effectively unlocking the user.
        Use of the ""audit"" keyword may log credentials in the case of user error during authentication. This risk should be evaluated in the context of the site policies of your organization.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.8,800-53|AC-7,CN-L3|8.1.4.1(b),CSCv7|16.7,ITSG-33|AC-7,LEVEL|1S,NESA|T5.5.1,NIAv2|AM24,TBA-FIISB|36.2.4,TBA-FIISB|45.1.2,TBA-FIISB|45.2.1,TBA-FIISB|45.2.2

Policy Value:
expect: ^[\s]*auth[\s]+\[success=1[\s]+default=bad\][\s]+pam_unix.so[\s]*$
file: /etc/pam.d/system-auth
regex: ^[\s]*auth[\s]+\[success=1[\s]+default=bad\][\s]*
system: Linux

Actual Value:
The file ""/etc/pam.d/system-auth"" does not contain ""^[\s]*auth[\s]+\[success=1[\s]+default=bad\][\s]*"""
"""5.4.2 Ensure lockout for failed password attempts is configured - system-auth 'auth required pam_faillock.so'"" : [FAILED]

Lock out users after n unsuccessful consecutive login attempts.
        deny= - Number of attempts before the account is locked
        unlock_time= - Time in seconds before the account is unlocked
        Set the lockout number and unlock time to follow local site policy.
        Rationale:
        Locking out user IDs after n unsuccessful consecutive login attempts mitigates brute force password attacks against your systems.

Solution:
Set password lockouts and unlock times to conform to site policy Run the following to update the system-auth and password-auth files. This script will update/add the deny=5 and unlock_time=900 options. This script should be modified as needed to follow local site policy.
        CP=$(authselect current | awk 'NR == 1 {print $3}' | grep custom/) for FN in system-auth password-auth; do 	[[ -n $CP ]] && PTF=/etc/authselect/$CP/$FN || PTF=/etc/authselect/$FN 	[[ -n $(grep -E '^s*auths+requireds+pam_faillock.sos+.*deny=S+s*.*$' $PTF) ]] && sed -ri '/pam_faillock.so/s/deny=S+/deny=5/g' $PTF || sed -ri 's/^^s*(auths+requireds+pam_faillock.sos+)(.*[^{}])({.*}|)$/12 deny=5 3/' $PTF 	[[ -n $(grep -E '^s*auths+requireds+pam_faillock.sos+.*unlock_time=S+s*.*$' $PTF) ]] && sed -ri '/pam_faillock.so/s/unlock_time=S+/unlock_time=900/g' $PTF || sed -ri 's/^s*(auths+requireds+pam_faillock.sos+)(.*[^{}])({.*}|)$/12 unlock_time=900 3/' $PTF done authselect apply-changes
        Notes:
        Additional module options may be set, recommendation only covers those listed here.
        If a user has been locked out because they have reached the maximum consecutive failure count defined by deny= in the pam_faillock.so module, the user can be unlocked by issuing the command faillock -u --reset. This command sets the failed count to 0, effectively unlocking the user.
        Use of the ""audit"" keyword may log credentials in the case of user error during authentication. This risk should be evaluated in the context of the site policies of your organization.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.8,800-53|AC-7,CN-L3|8.1.4.1(b),CSCv7|16.7,ITSG-33|AC-7,LEVEL|1S,NESA|T5.5.1,NIAv2|AM24,TBA-FIISB|36.2.4,TBA-FIISB|45.1.2,TBA-FIISB|45.2.1,TBA-FIISB|45.2.2

Policy Value:
expect: ^[\s]*auth[\s]+sufficient[\s]+pam_faillock\.so[\s]+authsucc[\s]+audit[\s]+deny=5[\s]+unlock_time=900[\s]*$
file: /etc/pam.d/system-auth
regex: ^[\s]*auth[\s]+sufficient[\s]+pam_faillock\.so[\s]*
system: Linux

Actual Value:
The file ""/etc/pam.d/system-auth"" does not contain ""^[\s]*auth[\s]+sufficient[\s]+pam_faillock\.so[\s]*"""
"""5.4.2 Ensure lockout for failed password attempts is configured - system-auth 'auth sufficient pam_faillock.so'"" : [FAILED]

Lock out users after n unsuccessful consecutive login attempts.
        deny= - Number of attempts before the account is locked
        unlock_time= - Time in seconds before the account is unlocked
        Set the lockout number and unlock time to follow local site policy.
        Rationale:
        Locking out user IDs after n unsuccessful consecutive login attempts mitigates brute force password attacks against your systems.

Solution:
Set password lockouts and unlock times to conform to site policy Run the following to update the system-auth and password-auth files. This script will update/add the deny=5 and unlock_time=900 options. This script should be modified as needed to follow local site policy.
        CP=$(authselect current | awk 'NR == 1 {print $3}' | grep custom/) for FN in system-auth password-auth; do 	[[ -n $CP ]] && PTF=/etc/authselect/$CP/$FN || PTF=/etc/authselect/$FN 	[[ -n $(grep -E '^s*auths+requireds+pam_faillock.sos+.*deny=S+s*.*$' $PTF) ]] && sed -ri '/pam_faillock.so/s/deny=S+/deny=5/g' $PTF || sed -ri 's/^^s*(auths+requireds+pam_faillock.sos+)(.*[^{}])({.*}|)$/12 deny=5 3/' $PTF 	[[ -n $(grep -E '^s*auths+requireds+pam_faillock.sos+.*unlock_time=S+s*.*$' $PTF) ]] && sed -ri '/pam_faillock.so/s/unlock_time=S+/unlock_time=900/g' $PTF || sed -ri 's/^s*(auths+requireds+pam_faillock.sos+)(.*[^{}])({.*}|)$/12 unlock_time=900 3/' $PTF done authselect apply-changes
        Notes:
        Additional module options may be set, recommendation only covers those listed here.
        If a user has been locked out because they have reached the maximum consecutive failure count defined by deny= in the pam_faillock.so module, the user can be unlocked by issuing the command faillock -u --reset. This command sets the failed count to 0, effectively unlocking the user.
        Use of the ""audit"" keyword may log credentials in the case of user error during authentication. This risk should be evaluated in the context of the site policies of your organization.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.8,800-53|AC-7,CN-L3|8.1.4.1(b),CSCv7|16.7,ITSG-33|AC-7,LEVEL|1S,NESA|T5.5.1,NIAv2|AM24,TBA-FIISB|36.2.4,TBA-FIISB|45.1.2,TBA-FIISB|45.2.1,TBA-FIISB|45.2.2

Policy Value:
expect: ^[\s]*auth[\s]+sufficient[\s]+pam_faillock\.so[\s]+authsucc[\s]+audit[\s]+deny=5[\s]+unlock_time=900[\s]*$
file: /etc/pam.d/system-auth
regex: ^[\s]*auth[\s]+sufficient[\s]+pam_faillock\.so[\s]*
system: Linux

Actual Value:
The file ""/etc/pam.d/system-auth"" does not contain ""^[\s]*auth[\s]+sufficient[\s]+pam_faillock\.so[\s]*"""
"""5.4.3 Ensure password reuse is limited - password-auth"" : [FAILED]

The /etc/security/opasswd file stores the users' old passwords and can be checked to ensure that users are not recycling recent passwords.
        remember=<5> - Number of old passwords to remember
            Rationale:
            Forcing users not to reuse their past 5 passwords make it less likely that an attacker will be able to guess the password.
            Note that these change only apply to accounts configured on the local system.

Solution:
Set remembered password history to conform to site policy. Run the folloing script to add or modify the pam_pwhistory.so and pam_unix.so lines to include the remember option:
            CP=$(authselect current | awk 'NR == 1 {print $3}' | grep custom/) [[ -n $CP ]] && PTF=/etc/authselect/$CP/system-auth || PTF=/etc/authselect/system-auth [[ -n $(grep -E '^s*passwords+(sufficients+pam_unix|requi(red|site)s+pam_pwhistory).sos+([^#]+s+)*remember=S+s*.*$' $PTF) ]] && sed -ri 's/^s*(passwords+(requisite|sufficient)s+(pam_pwquality.so|pam_unix.so)s+)(.*)(remember=S+s*)(.*)$/14 remember=5 6/' $PTF || sed -ri 's/^s*(passwords+(requisite|sufficient)s+(pam_pwquality.so|pam_unix.so)s+)(.*)$/14 remember=5/' $PTF authselect apply-changes
            Notes:
            Additional module options may be set, recommendation only covers those listed here.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.5.8,800-53|IA-5(1),CSCv7|16,CSF|PR.AC-1,HIPAA|164.308(a)(5)(ii)(D),ISO/IEC-27001|A.9.4.3,ITSG-33|IA-5(1),LEVEL|1S,NESA|T5.2.3,NIAv2|AM22c,PCI-DSSv3.1|8.2.5,PCI-DSSv3.2|8.2.5,SWIFT-CSCv1|4.1,TBA-FIISB|26.2.3

Policy Value:
expect: remember[\s]*=[\s]*([5-9]|[1-9][0-9]+)
file: /etc/pam.d/password-auth
regex: ^[\s]*password[\s]+(sufficient[\s]+pam_unix\.so|required[\s]+pam_pwhistory\.so).*remember
system: Linux

Actual Value:
The file ""/etc/pam.d/password-auth"" does not contain ""^[\s]*password[\s]+(sufficient[\s]+pam_unix\.so|required[\s]+pam_pwhistory\.so).*remember"""
"""5.4.3 Ensure password reuse is limited - system-auth"" : [FAILED]

The /etc/security/opasswd file stores the users' old passwords and can be checked to ensure that users are not recycling recent passwords.
        remember=<5> - Number of old passwords to remember
            Rationale:
            Forcing users not to reuse their past 5 passwords make it less likely that an attacker will be able to guess the password.
            Note that these change only apply to accounts configured on the local system.

Solution:
Set remembered password history to conform to site policy. Run the folloing script to add or modify the pam_pwhistory.so and pam_unix.so lines to include the remember option:
            CP=$(authselect current | awk 'NR == 1 {print $3}' | grep custom/) [[ -n $CP ]] && PTF=/etc/authselect/$CP/system-auth || PTF=/etc/authselect/system-auth [[ -n $(grep -E '^s*passwords+(sufficients+pam_unix|requi(red|site)s+pam_pwhistory).sos+([^#]+s+)*remember=S+s*.*$' $PTF) ]] && sed -ri 's/^s*(passwords+(requisite|sufficient)s+(pam_pwquality.so|pam_unix.so)s+)(.*)(remember=S+s*)(.*)$/14 remember=5 6/' $PTF || sed -ri 's/^s*(passwords+(requisite|sufficient)s+(pam_pwquality.so|pam_unix.so)s+)(.*)$/14 remember=5/' $PTF authselect apply-changes
            Notes:
            Additional module options may be set, recommendation only covers those listed here.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.5.8,800-53|IA-5(1),CSCv7|16,CSF|PR.AC-1,HIPAA|164.308(a)(5)(ii)(D),ISO/IEC-27001|A.9.4.3,ITSG-33|IA-5(1),LEVEL|1S,NESA|T5.2.3,NIAv2|AM22c,PCI-DSSv3.1|8.2.5,PCI-DSSv3.2|8.2.5,SWIFT-CSCv1|4.1,TBA-FIISB|26.2.3

Policy Value:
expect: remember[\s]*=[\s]*([5-9]|[1-9][0-9]+)
file: /etc/pam.d/system-auth
regex: ^[\s]*password[\s]+(sufficient[\s]+pam_unix\.so|required[\s]+pam_pwhistory\.so).*remember
system: Linux

Actual Value:
The file ""/etc/pam.d/system-auth"" does not contain ""^[\s]*password[\s]+(sufficient[\s]+pam_unix\.so|required[\s]+pam_pwhistory\.so).*remember"""
"""5.5.1.4 Ensure inactive password lock is 30 days or less"" : [FAILED]

User accounts that have been inactive for over a given period of time can be automatically disabled. It is recommended that accounts that are inactive for 30 days after password expiration be disabled.
        Rationale:
        Inactive accounts pose a threat to system security since the users are not logging in to notice failed login attempts or other anomalies.

Solution:
Run the following command to set the default password inactivity period to 30 days:
        # useradd -D -f 30
        Modify user parameters for all users with a password set to match:
        # chage --inactive 30 <user>
            Notes:
            You can also check this setting in /etc/shadow directly. The 7th field should be 30 or less for all users with a password.
            Note: A value of -1 would disable this setting.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-53|AC-2(3),CIP|004-6-R5,CN-L3|7.1.3.2(e),CN-L3|8.1.4.2(c),CSCv7|4.4,CSF|PR.AC-1,CSF|PR.AC-4,ISO/IEC-27001|A.9.2.1,ISO/IEC-27001|A.9.2.6,ITSG-33|AC-2(3),LEVEL|1S,NIAv2|AM26,PCI-DSSv3.1|8.1.4,PCI-DSSv3.2|8.1.4,TBA-FIISB|36.2.2

Policy Value:
expect: ^[\s]*INACTIVE[\s]*=[\s]*(30|[1-2][0-9]|[1-9])[\s]*$
file: /etc/default/useradd
regex: ^[\s]*INACTIVE[\s]*=[\s]*
system: Linux

Actual Value:
Non-compliant file(s):
      /etc/default/useradd - regex '^[\s]*INACTIVE[\s]*=[\s]*' found - expect '^[\s]*INACTIVE[\s]*=[\s]*(30|[1-2][0-9]|[1-9])[\s]*$' not found in the following lines:
          4: INACTIVE=-1"
"""5.5.1.5 Ensure all users last password change date is in the past"" : [WARNING]

All users should have a password change date in the past.
        Rationale:
        If a users recorded password change date is in the future then they could bypass any set password expiration.

        NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
Investigate any users with a password change date in the future and correct them. Locking the account, expiring the password, or resetting the password manually may be appropriate.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.5.7,800-53|IA-5,CIP|007-6-R5,CN-L3|7.1.2.7(e),CN-L3|7.1.3.1(b),CSCv7|4.4,CSF|PR.AC-1,HIPAA|164.308(a)(5)(ii)(D),ISO/IEC-27001|A.9.4.3,ITSG-33|IA-5,LEVEL|1S,NESA|T5.2.3,NIAv2|AM19a,NIAv2|AM19b,NIAv2|AM19c,NIAv2|AM19d,NIAv2|AM22a,PCI-DSSv3.1|8.2.3,PCI-DSSv3.2|8.2.3,SWIFT-CSCv1|4.1,TBA-FIISB|26.2.1,TBA-FIISB|26.2.4

Policy Value:
cmd: for i in $(/usr/bin/cat /etc/shadow |cut -d: -f1); do /usr/bin/echo ''; /usr/bin/echo $i; /usr/bin/echo '------'; now=$(date '+%b %d, %Y'); /usr/bin/echo -n 'Current Date : '; /usr/bin/echo $now; change_date=$(chage --list $i |grep 'Last password change'| cut -d: -f2|awk '{$1=$1};1'); /usr/bin/echo -n 'Last Password Change : '; /usr/bin/echo $change_date; done
expect: MANUAL_REVIEW
system: Linux

Actual Value:
The command 'for i in $(/usr/bin/cat /etc/shadow |cut -d: -f1); do /usr/bin/echo ''; /usr/bin/echo $i; /usr/bin/echo '------'; now=$(date '+%b %d, %Y'); /usr/bin/echo -n 'Current Date : '; /usr/bin/echo $now; change_date=$(chage --list $i |grep 'Last password change'| cut -d: -f2|awk '{$1=$1};1'); /usr/bin/echo -n 'Last Password Change : '; /usr/bin/echo $change_date; done' returned : 

root
------
Current Date : Mar 04, 2021
Last Password Change : never

bin
------
Current Date : Mar 04, 2021
Last Password Change : Apr 15, 2020

daemon
------
Current Date : Mar 04, 2021
Last Password Change : Apr 15, 2020

adm
------
Current Date : Mar 04, 2021
Last Password Change : Apr 15, 2020

lp
------
Current Date : Mar 04, 2021
Last Password Change : Apr 15, 2020

sync
------
Current Date : Mar 04, 2021
Last Password Change : Apr 15, 2020

shutdown
------
Current Date : Mar 04, 2021
Last Password Change : Apr 15, 2020

halt
------
Current Date : Mar 04, 2021
Last Password Change : Apr 15, 2020

mail
------
Current Date : Mar 04, 2021
Last Password Change : Apr 15, 2020

operator
------
Current Date : Mar 04, 2021
Last Password Change : Apr 15, 2020

games
------
Current Date : Mar 04, 2021
Last Password Change : Apr 15, 2020

ftp
------
Current Date : Mar 04, 2021
Last Password Change : Apr 15, 2020

nobody
------
Current Date : Mar 04, 2021
Last Password Change : Apr 15, 2020

dbus
------
Current Date : Mar 04, 2021
Last Password Change : Feb 23, 2021

systemd-coredump
------
Current Date : Mar 04, 2021
Last Password Change : Feb 23, 2021

systemd-resolve
------
Current Date : Mar 04, 2021
Last Password Change : Feb 23, 2021

tss
------
Current Date : Mar 04, 2021
Last Password Change : Feb 23, 2021

polkitd
------
Current Date : Mar 04, 2021
Last Password Change : Feb 23, 2021

unbound
------
Current Date : Mar 04, 2021
Last Password Change : Feb 23, 2021

sssd
------
Current Date : Mar 04, 2021
Last Password Change : Feb 23, 2021

sshd
------
Current Date : Mar 04, 2021
Last Password Change : Feb 23, 2021

rngd
------
Current Date : Mar 04, 2021
Last Password Change : Feb 23, 2021

tcpdump
------
Current Date : Mar 04, 2021
Last Password Change : Feb 26, 2021"
"""5.5.2 Ensure system accounts are secured - 'login shell'"" : [FAILED]

There are a number of accounts provided with most distributions that are used to manage applications and are not intended to provide an interactive shell.
        Rationale:
        It is important to make sure that accounts that are not being used by regular users are prevented from being used to provide an interactive shell. By default, most distributions set the password field for these accounts to an invalid string, but it is also recommended that the shell field in the password file be set to the nologin shell. This prevents the account from potentially being used to run any commands.

Solution:
Run the commands appropriate for your distribution: Set the shell for any accounts returned by the audit to nologin:
        # usermod -s $(which nologin) <user>
            Lock any non root accounts returned by the audit:
            # usermod -L <user>
                The following command will set all system accounts to a non login shell:
                awk -F: '($1!=""root"" && $1!=""sync"" && $1!=""shutdown"" && $1!=""halt"" && $1!~/^+/ && $3<'""$(awk '/^s*UID_MIN/{print $2}' /etc/login.defs)""' && $7!=""'""$(which nologin)""'"" && $7!=""/bin/false"") {print $1}' /etc/passwd | while read user do usermod -s $(which nologin) $user done
                The following command will automatically lock not root system accounts:
                awk -F: '($1!=""root"" && $1!~/^+/ && $3<'""$(awk '/^s*UID_MIN/{print $2}' /etc/login.defs)""') {print $1}' /etc/passwd | xargs -I '{}' passwd -S '{}' | awk '($2!=""L"" && $2!=""LK"") {print $1}' | while read user do usermod -L $user done
                Notes:
                The root, sync, shutdown, and halt users are exempted from requiring a non-login shell.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.5,800-53|AC-6(1),CSCv7|16,CSF|PR.AC-4,ISO/IEC-27001|A.9.4.4,ITSG-33|AC-6(1),LEVEL|1S,NESA|T5.1.1,NESA|T5.4.4,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM31,NIAv2|GS3,NIAv2|GS4,NIAv2|GS8c,NIAv2|VL3b,SWIFT-CSCv1|5.1

Policy Value:
cmd: /usr/bin/awk -F: '($1!=""root"" && $1!=""sync"" && $1!=""shutdown"" && $1!=""halt"" && $1!~/^\+/ && $3<'""$(/usr/bin/awk '/^[\s]*UID_MIN/{print $2}' /etc/login.defs)""' && $7!=""'""$(which nologin)""'"" && $7!=""/bin/false"") {print}' /etc/passwd | /usr/bin/awk '{print} END {if (NR == 0) print ""pass"" ; else print ""fail""}'
expect: ^pass$
system: Linux

Actual Value:
The command '/usr/bin/awk -F: '($1!=""root"" && $1!=""sync"" && $1!=""shutdown"" && $1!=""halt"" && $1!~/^\+/ && $3<'""$(/usr/bin/awk '/^[\s]*UID_MIN/{print $2}' /etc/login.defs)""' && $7!=""'""$(which nologin)""'"" && $7!=""/bin/false"") {print}' /etc/passwd | /usr/bin/awk '{print} END {if (NR == 0) print ""pass"" ; else print ""fail""}'' returned : 

bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
adm:x:3:4:adm:/var/adm:/sbin/nologin
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
mail:x:8:12:mail:/var/spool/mail:/sbin/nologin
operator:x:11:0:operator:/root:/sbin/nologin
games:x:12:100:games:/usr/games:/sbin/nologin
ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin
dbus:x:81:81:System message bus:/:/sbin/nologin
systemd-coredump:x:999:997:systemd Core Dumper:/:/sbin/nologin
systemd-resolve:x:193:193:systemd Resolver:/:/sbin/nologin
tss:x:59:59:Account used by the trousers package to sandbox the tcsd daemon:/dev/null:/sbin/nologin
polkitd:x:998:996:User for polkitd:/:/sbin/nologin
unbound:x:997:994:Unbound DNS resolver:/etc/unbound:/sbin/nologin
sssd:x:996:993:User for sssd:/:/sbin/nologin
sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin
rngd:x:995:992:Random Number Generator Daemon:/var/lib/rngd:/sbin/nologin
tcpdump:x:72:72::/:/sbin/nologin
fail"
"""5.5.3 Ensure default user shell timeout is 900 seconds or less - bashrc"" : [FAILED]

The default TMOUT determines the shell timeout for users. The TMOUT value is measured in seconds.
        Rationale:
        Having no timeout value associated with a shell could allow an unauthorized user access to another user's shell session (e.g. user walks away from their computer and doesn't lock the screen). Setting a timeout value at least reduces the risk of this happening.

Solution:
Edit the /etc/bashrc, /etc/profile and /etc/profile.d/*.sh files (and the appropriate files for any other shell supported on your system) and add or edit any umask parameters as follows:
        readonly TMOUT=900 ; export TMOUT
        Note that setting the value to readonly prevents unwanted modification during runtime.
        Notes:
        The audit and remediation in this recommendation apply to bash and shell. If other shells are supported on the system, it is recommended that their configuration files also are checked. Other methods of setting a timeout exist for other shells not covered here.
        Ensure that the timeout conforms to your local policy.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.11,800-53|AC-12,CN-L3|7.1.2.2(d),CN-L3|7.1.3.7(b),CN-L3|8.1.4.1(b),CSCv7|16.11,ITSG-33|AC-12,LEVEL|1S,NIAv2|NS49

Policy Value:
expect: ^[\s]*TMOUT[\s]*=[\s]*(900|[1-8][0-9]{2}|[0-9]{1,2})[\s]*$
file: /etc/bashrc
regex: ^[\s]*TMOUT[\s]*
system: Linux

Actual Value:
The file ""/etc/bashrc"" does not contain ""^[\s]*TMOUT[\s]*"""
"""5.5.3 Ensure default user shell timeout is 900 seconds or less - profile"" : [FAILED]

The default TMOUT determines the shell timeout for users. The TMOUT value is measured in seconds.
        Rationale:
        Having no timeout value associated with a shell could allow an unauthorized user access to another user's shell session (e.g. user walks away from their computer and doesn't lock the screen). Setting a timeout value at least reduces the risk of this happening.

Solution:
Edit the /etc/bashrc, /etc/profile and /etc/profile.d/*.sh files (and the appropriate files for any other shell supported on your system) and add or edit any umask parameters as follows:
        readonly TMOUT=900 ; export TMOUT
        Note that setting the value to readonly prevents unwanted modification during runtime.
        Notes:
        The audit and remediation in this recommendation apply to bash and shell. If other shells are supported on the system, it is recommended that their configuration files also are checked. Other methods of setting a timeout exist for other shells not covered here.
        Ensure that the timeout conforms to your local policy.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.11,800-53|AC-12,CN-L3|7.1.2.2(d),CN-L3|7.1.3.7(b),CN-L3|8.1.4.1(b),CSCv7|16.11,ITSG-33|AC-12,LEVEL|1S,NIAv2|NS49

Policy Value:
expect: ^(readonly)?[\s]*TMOUT[\s]*=[\s]*(900|[1-8][0-9]{2}|[0-9]{1,2})[\s]*
file: /etc/profile
regex: ^(readonly)?[\s]*TMOUT[\s]*
system: Linux

Actual Value:
Non-compliant file(s):
      /etc/profile - regex '^(readonly)?[\s]*TMOUT[\s]*' found - expect '^(readonly)?[\s]*TMOUT[\s]*=[\s]*(900|[1-8][0-9]{2}|[0-9]{1,2})[\s]*' not found in the following lines:
          87: readonly TMOUT"
"""5.6 Ensure root login is restricted to system console"" : [FAILED]

The file /etc/securetty contains a list of valid terminals that may be logged in directly as root.
        Rationale:
        Since the system console has special properties to handle emergency situations, it is important to ensure that the console is in a physically secure location and that unauthorized consoles have not been defined.

Solution:
Remove entries for any consoles that are not in a physically secure location.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-53|AC-6(3),CSCv7|5.1,CSF|PR.AC-4,ISO/IEC-27001|A.9.1.2,ISO/IEC-27001|A.9.4.4,ITSG-33|AC-6(3),LEVEL|1NS,NESA|T5.1.1,NESA|T5.5.4,SWIFT-CSCv1|5.1

Policy Value:
cmd: /usr/bin/grep -v ""console"" /etc/securetty | /usr/bin/awk '{ print } END { if (NR==0) print ""none"" }'
dont_echo_cmd: YES
expect: none
system: Linux

Actual Value:
The command returned : 

tty1
tty2
tty3
tty4
tty5
tty6
vc1
vc2
vc3
vc4
vc5
vc6
vc7
vc8
vc9
vc10
vc11
ttyS0
ttyS1"
"""5.7 Ensure access to the su command is restricted - wheel group contains root"" : [FAILED]

The su command allows a user to run a command or shell as another user. The program has been superseded by sudo , which allows for more granular control over privileged access. Normally, the su command can be executed by any user. By uncommenting the pam_wheel.so statement in /etc/pam.d/su , the su command will only allow users in the wheel group to execute su .
        Rationale:
        Restricting the use of su , and using sudo in its place, provides system administrators better control of the escalation of user privileges to execute privileged commands. The sudo utility also provides a better logging and audit mechanism, as it can log each command executed via sudo , whereas su can only record that a user executed the su program.

Solution:
Add the following line to the /etc/pam.d/su file:
        auth required pam_wheel.so use_uid
        Create a comma separated list of users in the wheel statement in the /etc/group file:
        wheel:x:<GID>:root,<user list>
            Example:
            wheel:x:10:root,user1,user2,user3

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.1,800-53|AC-2,CN-L3|7.1.3.2(d),CSCv7|5.1,CSF|DE.CM-1,CSF|DE.CM-3,CSF|PR.AC-1,CSF|PR.AC-4,ISO/IEC-27001|A.9.2.1,ITSG-33|AC-2,LEVEL|1S,NESA|T5.2.1,NESA|T5.2.2,NIAv2|AM28,NIAv2|NS5j,NIAv2|SS14e

Policy Value:
cmd: /usr/bin/grep ^wheel: /etc/group
dont_echo_cmd: YES
expect: ^wheel:x:10:root(,|$)
system: Linux

Actual Value:
The command returned : 

wheel:x:10:"
"""6.1.13 Audit SUID executables"" : [WARNING]

The owner of a file can set the file's permissions to run with the owner's or group's permissions, even if the user running the program is not the owner or a member of the group. The most common reason for a SUID program is to enable users to perform functions (such as changing their password) that require root privileges.
        Rationale:
        There are valid reasons for SUID programs, but it is important to identify and review such programs to ensure they are legitimate.

        NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
Ensure that no rogue SUID programs have been introduced into the system. Review the files returned by the action in the Audit section and confirm the integrity of these binaries.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-53|AC-6(8),CSCv7|5.1,CSF|PR.AC-4,LEVEL|1NS

Policy Value:
name: find_suid_sgid_files
system: Linux

Actual Value:
The following 19 files are SUID or SGID:

  /usr/bin/chage
     owner: root, group: root, permissions: 4755

  /usr/bin/gpasswd
     owner: root, group: root, permissions: 4755

  /usr/bin/newgrp
     owner: root, group: root, permissions: 4755

  /usr/bin/mount
     owner: root, group: root, permissions: 4755

  /usr/bin/su
     owner: root, group: root, permissions: 4755

  /usr/bin/umount
     owner: root, group: root, permissions: 4755

  /usr/bin/write
     owner: root, group: tty, permissions: 2755

  /usr/bin/passwd
     owner: root, group: root, permissions: 4755

  /usr/bin/crontab
     owner: root, group: root, permissions: 4755

  /usr/bin/pkexec
     owner: root, group: root, permissions: 4755

  /usr/bin/sudo
     owner: root, group: root, permissions: 4111

  /usr/sbin/grub2-set-bootflag
     owner: root, group: root, permissions: 4755

  /usr/sbin/unix_chkpwd
     owner: root, group: root, permissions: 4755

  /usr/sbin/pam_timestamp_check
     owner: root, group: root, permissions: 4755

  /usr/sbin/userhelper
     owner: root, group: root, permissions: 4711

  /usr/lib/polkit-1/polkit-agent-helper-1
     owner: root, group: root, permissions: 4755

  /usr/libexec/dbus-1/dbus-daemon-launch-helper
     owner: root, group: dbus, permissions: 4750

  /usr/libexec/utempter/utempter
     owner: root, group: utmp, permissions: 2711

  /usr/libexec/openssh/ssh-keysign
     owner: root, group: ssh_keys, permissions: 2555"
"""6.1.14 Audit SGID executables"" : [WARNING]

The owner of a file can set the file's permissions to run with the owner's or group's permissions, even if the user running the program is not the owner or a member of the group. The most common reason for a SGID program is to enable users to perform functions (such as changing their password) that require root privileges.
        Rationale:
        There are valid reasons for SGID programs, but it is important to identify and review such programs to ensure they are legitimate. Review the files returned by the action in the audit section and check to see if system binaries have a different md5 checksum than what from the package. This is an indication that the binary may have been replaced.

        NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
Ensure that no rogue SGID programs have been introduced into the system. Review the files returned by the action in the Audit section and confirm the integrity of these binaries.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-53|AC-6(8),CSCv7|5.1,CSF|PR.AC-4,LEVEL|1NS

Policy Value:
name: find_suid_sgid_files
system: Linux

Actual Value:
The following 19 files are SUID or SGID:

  /usr/bin/chage
     owner: root, group: root, permissions: 4755

  /usr/bin/gpasswd
     owner: root, group: root, permissions: 4755

  /usr/bin/newgrp
     owner: root, group: root, permissions: 4755

  /usr/bin/mount
     owner: root, group: root, permissions: 4755

  /usr/bin/su
     owner: root, group: root, permissions: 4755

  /usr/bin/umount
     owner: root, group: root, permissions: 4755

  /usr/bin/write
     owner: root, group: tty, permissions: 2755

  /usr/bin/passwd
     owner: root, group: root, permissions: 4755

  /usr/bin/crontab
     owner: root, group: root, permissions: 4755

  /usr/bin/pkexec
     owner: root, group: root, permissions: 4755

  /usr/bin/sudo
     owner: root, group: root, permissions: 4111

  /usr/sbin/grub2-set-bootflag
     owner: root, group: root, permissions: 4755

  /usr/sbin/unix_chkpwd
     owner: root, group: root, permissions: 4755

  /usr/sbin/pam_timestamp_check
     owner: root, group: root, permissions: 4755

  /usr/sbin/userhelper
     owner: root, group: root, permissions: 4711

  /usr/lib/polkit-1/polkit-agent-helper-1
     owner: root, group: root, permissions: 4755

  /usr/libexec/dbus-1/dbus-daemon-launch-helper
     owner: root, group: dbus, permissions: 4750

  /usr/libexec/utempter/utempter
     owner: root, group: utmp, permissions: 2711

  /usr/libexec/openssh/ssh-keysign
     owner: root, group: ssh_keys, permissions: 2555"
"""6.1.6 Ensure permissions on /etc/passwd- are configured"" : [FAILED]

The /etc/passwd- file contains backup user account information.
        Rationale:
        It is critical to ensure that the /etc/passwd- file is protected from unauthorized access. Although it is protected by default, the file permissions could be changed either inadvertently or through malicious actions.

Solution:
Run the following command to set permissions on /etc/passwd- :
        # chown root:root /etc/passwd-  # chmod u-x,go-rwx /etc/passwd-

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|16.4,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3

Policy Value:
file: /etc/passwd-
group: root
mask: 177
owner: root
system: Linux

Actual Value:
The file /etc/passwd- with fmode owner: root group: root mode: 0644 attr: -------------------- uid: 0 gid: 0 uneven permissions : FALSE  does not match the policy value owner: root group: root mask: 0177 uneven permissions : TRUE 

/etc/passwd-"
"""6.2.9 Ensure users' dot files are not group or world writable"" : [FAILED]

While the system administrator can establish secure permissions for users' ""dot"" files, the users can easily override these.
        Rationale:
        Group or world-writable user configuration files may enable malicious users to steal or modify other users' data or to gain another user's system privileges.

Solution:
Making global modifications to users' files without alerting the user community can result in unexpected outages and unhappy users. Therefore, it is recommended that a monitoring policy be established to report user dot file permissions and determine the action to be taken in accordance with site policy.
        Notes:
        On some distributions the /sbin/nologin should be replaced with /usr/sbin/nologin.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-171|3.13.5,800-53|SC-7,CN-L3|8.1.10.6(j),CSCv7|14.6,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7,LEVEL|1S,NESA|T4.5.4,NIAv2|GS1,NIAv2|GS2a,NIAv2|GS2b,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3,TBA-FIISB|43.1

Policy Value:
cmd: /usr/bin/grep -E -v '^(halt|sync|shutdown)' /etc/passwd | /usr/bin/awk -F: '($7 != ""'""$(which nologin)""'"" && $7 != ""/bin/false"") { print $1 "" "" $6 }'| while read user dir; do if [ ! -d ""$dir"" ]; then /usr/bin/echo ""The home directory ($dir) of user $user does not exist.""; else for file in $dir/.[A-Za-z0-9]*; do if [ ! -h ""$file"" -a -f ""$file"" ]; then fileperm=$(ls -ld $file | cut -f1 -d"" ""); if [ $(echo $fileperm | cut -c6)  != ""-"" ]; then /usr/bin/echo ""Group Write permission set on file $file""; fi; if [ $(echo $fileperm | cut -c9) != ""-"" ]; then /usr/bin/echo ""Other Write permission set on file $file""; fi; fi; done; fi; done | awk '{ print } END { if (NR==0) print ""All dot files have proper permissions"" }'
dont_echo_cmd: YES
expect: All dot files have proper permissions
system: Linux

Actual Value:
The command returned : 

The home directory (/dev/null) of user tss does not exist.
The home directory (/var/lib/rngd) of user rngd does not exist."
"A local file overwrite vulnerability exists in curl 7.20.0 to and including 7.70.0 due to the -J (--remove-header-name)
being allowed to be used with -i (--include). An authenticated, local attacker can exploit this, via use of a malicious
server to trick curl to overwrite files on the local host."
"The SSH server is configured to support Cipher Block Chaining (CBC)
encryption.  This may allow an attacker to recover the plaintext message
from the ciphertext. 

Note that this plugin only checks for the options of the SSH server and
does not check for vulnerable software versions."
=======
"""1.1.1.1 Ensure mounting of cramfs filesystems is disabled - modprobe"" : [FAILED]

The cramfs filesystem type is a compressed read-only Linux filesystem embedded in small footprint systems. A cramfs image can be used without having to first decompress the image.
        Rationale:
        Removing support for unneeded filesystem types reduces the local attack surface of the server. If this filesystem type is not needed, disable it.

Solution:
Edit or create a file in the /etc/modprobe.d/ directory ending in .conf Example: vim /etc/modprobe.d/cramfs.conf and add the following line:
        install cramfs /bin/true
        Run the following command to unload the cramfs module:
        # rmmod cramfs

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.4.6,800-171|3.4.7,800-53|CM-7,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv7|5.1,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7,LEVEL|1S,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,NIAv2|SS15a,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3

Policy Value:
cmd: /usr/sbin/modprobe -n -v cramfs | /usr/bin/awk '{print} END {if (NR == 0) print ""fail""}'
expect: install /bin/true
system: Linux

Actual Value:
The command '/usr/sbin/modprobe -n -v cramfs | /usr/bin/awk '{print} END {if (NR == 0) print ""fail""}'' returned : 

insmod /lib/modules/4.18.0-240.el8.x86_64/kernel/fs/cramfs/cramfs.ko.xz"
"""1.1.1.3 Ensure mounting of squashfs filesystems is disabled - modprobe"" : [FAILED]

The squashfs filesystem type is a compressed read-only Linux filesystem embedded in small footprint systems (similar to cramfs ). A squashfs image can be used without having to first decompress the image.
        Rationale:
        Removing support for unneeded filesystem types reduces the local attack surface of the system. If this filesystem type is not needed, disable it.

Solution:
Edit or create a file in the /etc/modprobe.d/ directory ending in .conf Example: vim /etc/modprobe.d/squashfs.conf and add the following line:
        install squashfs /bin/true
        Run the following command to unload the squashfs module:
        # rmmod squashfs

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.4.6,800-171|3.4.7,800-53|CM-7,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv7|5.1,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7,LEVEL|1S,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,NIAv2|SS15a,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3

Policy Value:
cmd: /sbin/modprobe -n -v squashfs | /usr/bin/awk '{print} END {if (NR == 0) print ""fail""}'
expect: install /bin/true
system: Linux

Actual Value:
The command '/sbin/modprobe -n -v squashfs | /usr/bin/awk '{print} END {if (NR == 0) print ""fail""}'' returned : 

insmod /lib/modules/4.18.0-240.el8.x86_64/kernel/fs/squashfs/squashfs.ko.xz"
"""1.1.1.4 Ensure mounting of udf filesystems is disabled - modprobe"" : [FAILED]

The udf filesystem type is the universal disk format used to implement ISO/IEC 13346 and ECMA-167 specifications. This is an open vendor filesystem type for data storage on a broad range of media. This filesystem type is necessary to support writing DVDs and newer optical disc formats.
        Rationale:
        Removing support for unneeded filesystem types reduces the local attack surface of the system. If this filesystem type is not needed, disable it.

Solution:
Edit or create a file in the /etc/modprobe.d/ directory ending in .conf Example: vim /etc/modprobe.d/udf.conf and add the following line:
        install udf /bin/true
        Run the following command to unload the udf module:
        # rmmod udf

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.4.6,800-171|3.4.7,800-53|CM-7,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv7|5.1,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7,LEVEL|1S,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,NIAv2|SS15a,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3

Policy Value:
cmd: /sbin/modprobe -n -v udf | /usr/bin/awk '{print} END {if (NR == 0) print ""fail""}'
expect: install /bin/true
system: Linux

Actual Value:
The command '/sbin/modprobe -n -v udf | /usr/bin/awk '{print} END {if (NR == 0) print ""fail""}'' returned : 

insmod /lib/modules/4.18.0-240.el8.x86_64/kernel/lib/crc-itu-t.ko.xz 
insmod /lib/modules/4.18.0-240.el8.x86_64/kernel/fs/udf/udf.ko.xz"
"""1.1.10 Ensure noexec option set on /var/tmp partition"" : [FAILED]

The noexec mount option specifies that the filesystem cannot contain executable binaries.
        Rationale:
        Since the /var/tmp filesystem is only intended for temporary file storage, set this option to ensure that users cannot run executable binaries from /var/tmp .

Solution:
Edit the /etc/fstab file and add noexec to the fourth field (mounting options) for the /var/tmp partition. See the fstab(5) manual page for more information. Run the following command to remount /var/tmp :
        # mount -o remount,noexec /var/tmp

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.7,800-53|AC-6(10),CSCv7|2.6,CSF|PR.AC-4,LEVEL|1S

Policy Value:
cmd: /usr/bin/mount | /usr/bin/grep 'on /var/tmp '
expect: [\s]*[,]?noexec
system: Linux

Actual Value:
The command '/usr/bin/mount | /usr/bin/grep 'on /var/tmp '' did not return any result"
"""1.1.17 Ensure noexec option set on /dev/shm partition"" : [FAILED]

The noexec mount option specifies that the filesystem cannot contain executable binaries.
        Rationale:
        Setting this option on a file system prevents users from executing programs from shared memory. This deters users from introducing potentially malicious software on the system.

Solution:
Edit the /etc/fstab file and add noexec to the fourth field (mounting options) for the /dev/shm partition. See the fstab(5) manual page for more information. Run the following command to remount /dev/shm:
        # mount -o remount,noexec /dev/shm
        Notes:
        Some distributions mount /dev/shm through other means and require /dev/shm to be added to /etc/fstab even though it is already being mounted on boot. Others may configure /dev/shm in other locations and may override /etc/fstab configuration. Consult the documentation appropriate for your distribution.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.7,800-53|AC-6(10),CSCv7|2.6,CSF|PR.AC-4,LEVEL|1S

Policy Value:
cmd: /bin/mount | /bin/grep 'on /dev/shm '
expect: [\s]*[,]?noexec
system: Linux

Actual Value:
The command '/bin/mount | /bin/grep 'on /dev/shm '' returned : 

tmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,seclabel)"
"""1.1.2 Ensure /tmp is configured - mount"" : [FAILED]

The /tmp directory is a world-writable directory used for temporary storage by all users and some applications.
        Rationale:
        Making /tmp its own file system allows an administrator to set the noexec option on the mount, making /tmp useless for an attacker to install executable code. It would also prevent an attacker from establishing a hardlink to a system setuid program and wait for it to be updated. Once the program was updated, the hardlink would be broken and the attacker would have his own copy of the program. If the program happened to have a security vulnerability, the attacker could continue to exploit the known flaw.
        This can be accomplished by either mounting tmpfs to /tmp, or creating a separate partition for /tmp.

Solution:
Configure /etc/fstab as appropriate.
        example: tmpfs	/tmp	tmpfs     defaults,rw,nosuid,nodev,noexec,relatime  0 0
        OR Run the following commands to enable systemd /tmp mounting:
        # systemctl unmask tmp.mount
        # systemctl enable tmp.mount
        Edit /etc/systemd/system/local-fs.target.wants/tmp.mount to configure the /tmp mount:
        [Mount] What=tmpfs Where=/tmp Type=tmpfs Options=mode=1777,strictatime,noexec,nodev,nosuid
        Impact:
        Since the /tmp directory is intended to be world-writable, there is a risk of resource exhaustion if it is not bound to a separate partition.
        Running out of /tmp space is a problem regardless of what kind of filesystem lies under it, but in a default installation a disk-based /tmp will essentially have the whole disk available, as it only creates a single / partition. On the other hand, a RAM-based /tmp as with tmpfs will almost certainly be much smaller, which can lead to applications filling up the filesystem much more easily.
        /tmp utilizing tmpfs can be resized using the size={size} parameter on the Options line on the tmp.mount file

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|9.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3

Policy Value:
cmd: /usr/bin/mount | /bin/grep /tmp
expect: .*on[\s]+/tmp[\s]+type.*
system: Linux

Actual Value:
The command '/usr/bin/mount | /bin/grep /tmp' did not return any result"
"""1.1.2 Ensure /tmp is configured - systemctl"" : [FAILED]

The /tmp directory is a world-writable directory used for temporary storage by all users and some applications.
        Rationale:
        Making /tmp its own file system allows an administrator to set the noexec option on the mount, making /tmp useless for an attacker to install executable code. It would also prevent an attacker from establishing a hardlink to a system setuid program and wait for it to be updated. Once the program was updated, the hardlink would be broken and the attacker would have his own copy of the program. If the program happened to have a security vulnerability, the attacker could continue to exploit the known flaw.
        This can be accomplished by either mounting tmpfs to /tmp, or creating a separate partition for /tmp.

Solution:
Configure /etc/fstab as appropriate.
        example: tmpfs	/tmp	tmpfs     defaults,rw,nosuid,nodev,noexec,relatime  0 0
        OR Run the following commands to enable systemd /tmp mounting:
        # systemctl unmask tmp.mount
        # systemctl enable tmp.mount
        Edit /etc/systemd/system/local-fs.target.wants/tmp.mount to configure the /tmp mount:
        [Mount] What=tmpfs Where=/tmp Type=tmpfs Options=mode=1777,strictatime,noexec,nodev,nosuid
        Impact:
        Since the /tmp directory is intended to be world-writable, there is a risk of resource exhaustion if it is not bound to a separate partition.
        Running out of /tmp space is a problem regardless of what kind of filesystem lies under it, but in a default installation a disk-based /tmp will essentially have the whole disk available, as it only creates a single / partition. On the other hand, a RAM-based /tmp as with tmpfs will almost certainly be much smaller, which can lead to applications filling up the filesystem much more easily.
        /tmp utilizing tmpfs can be resized using the size={size} parameter on the Options line on the tmp.mount file

See Also: https://workbench.cisecurity.org/files/2485

Reference: CIP|007-6-R1,CSCv7|9.1,LEVEL|1S,PCI-DSSv3.1|2.2.2,PCI-DSSv3.1|2.2.3,PCI-DSSv3.2|2.2.2,PCI-DSSv3.2|2.2.3

Policy Value:
cmd: /usr/bin/systemctl is-enabled tmp.mount
expect: enabled
system: Linux

Actual Value:
The command '/usr/bin/systemctl is-enabled tmp.mount' returned : 

disabled"
"""1.1.3 Ensure nodev option set on /tmp partition"" : [FAILED]

The nodev mount option specifies that the filesystem cannot contain special devices.
        Rationale:
        Since the /tmp filesystem is not intended to support devices, set this option to ensure that users cannot attempt to create block or character special devices in /tmp .

Solution:
Edit the /etc/fstab file and add nodev to the fourth field (mounting options) for the /tmp partition. See the fstab(5) manual page for more information. Run the following command to remount /tmp :
        # mount -o remount,nodev /tmp
        OR Edit /etc/systemd/system/local-fs.target.wants/tmp.mount to add nodev to the /tmp mount options:
        [Mount] Options=mode=1777,strictatime,noexec,nodev,nosuid
        Run the following command to remount /tmp :
        # mount -o remount,nodev /tmp

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.7,800-53|AC-6(10),CSCv7|5.1,CSF|PR.AC-4,LEVEL|1S

Policy Value:
cmd: /usr/bin/mount | /usr/bin/grep 'on /tmp '
expect: [\s]*[,]?nodev
system: Linux

Actual Value:
The command '/usr/bin/mount | /usr/bin/grep 'on /tmp '' did not return any result"
"""1.1.4 Ensure nosuid option set on /tmp partition"" : [FAILED]

The nosuid mount option specifies that the filesystem cannot contain setuid files.
        Rationale:
        Since the /tmp filesystem is only intended for temporary file storage, set this option to ensure that users cannot create setuid files in /tmp .

Solution:
Edit the /etc/fstab file and add nosuid to the fourth field (mounting options) for the /tmp partition. See the fstab(5) manual page for more information. Run the following command to remount /tmp :
        # mount -o remount,nosuid /tmp
        OR Edit /etc/systemd/system/local-fs.target.wants/tmp.mount to add nosuid to the /tmp mount options:
        [Mount] Options=mode=1777,strictatime,noexec,nodev,nosuid
        Run the following command to remount /tmp :
        # mount -o remount,nosuid /tmp

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.7,800-53|AC-6(10),CSCv7|5.1,CSF|PR.AC-4,LEVEL|1S

Policy Value:
cmd: /usr/bin/mount | /usr/bin/grep 'on /tmp '
expect: [\s]*[,]?nosuid
system: Linux

Actual Value:
The command '/usr/bin/mount | /usr/bin/grep 'on /tmp '' did not return any result"
"""1.1.5 Ensure noexec option set on /tmp partition"" : [FAILED]

The noexec mount option specifies that the filesystem cannot contain executable binaries.
        Rationale:
        Since the /tmp filesystem is only intended for temporary file storage, set this option to ensure that users cannot run executable binaries from /tmp .

Solution:
Edit the /etc/fstab file and add noexec to the fourth field (mounting options) for the /tmp partition. See the fstab(5) manual page for more information. Run the following command to remount /tmp :
        # mount -o remount,noexec /tmp
        OR Edit /etc/systemd/system/local-fs.target.wants/tmp.mount to add noexec to the /tmp mount options:
        [Mount] Options=mode=1777,strictatime,noexec,nodev,nosuid
        Run the following command to remount /tmp :
        # mount -o remount,noexec /tmp

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.7,800-53|AC-6(10),CSCv7|2.6,CSF|PR.AC-4,LEVEL|1S

Policy Value:
cmd: /usr/bin/mount | /usr/bin/grep 'on /tmp '
expect: [\s]*[,]?noexec
system: Linux

Actual Value:
The command '/usr/bin/mount | /usr/bin/grep 'on /tmp '' did not return any result"
"""1.1.8 Ensure nodev option set on /var/tmp partition"" : [FAILED]

The nodev mount option specifies that the filesystem cannot contain special devices.
        Rationale:
        Since the /var/tmp filesystem is not intended to support devices, set this option to ensure that users cannot attempt to create block or character special devices in /var/tmp .

Solution:
Edit the /etc/fstab file and add nodev to the fourth field (mounting options) for the /var/tmp partition. See the fstab(5) manual page for more information. Run the following command to remount /var/tmp :
        # mount -o remount,nodev /var/tmp

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.7,800-53|AC-6(10),CSCv7|5.1,CSF|PR.AC-4,LEVEL|1S

Policy Value:
cmd: /usr/bin/mount | /usr/bin/grep 'on /var/tmp '
expect: [\s]*[,]?nodev
system: Linux

Actual Value:
The command '/usr/bin/mount | /usr/bin/grep 'on /var/tmp '' did not return any result"
"""1.1.9 Ensure nosuid option set on /var/tmp partition"" : [FAILED]

The nosuid mount option specifies that the filesystem cannot contain setuid files.
        Rationale:
        Since the /var/tmp filesystem is only intended for temporary file storage, set this option to ensure that users cannot create setuid files in /var/tmp .

Solution:
Edit the /etc/fstab file and add nosuid to the fourth field (mounting options) for the /var/tmp partition. See the fstab(5) manual page for more information. Run the following command to remount /var/tmp:
        # mount -o remount,nosuid /var/tmp

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.7,800-53|AC-6(10),CSCv7|5.1,CSF|PR.AC-4,LEVEL|1S

Policy Value:
cmd: /usr/bin/mount | /usr/bin/grep 'on /var/tmp '
expect: [\s]*[,]?nosuid
system: Linux

Actual Value:
The command '/usr/bin/mount | /usr/bin/grep 'on /var/tmp '' did not return any result"
"""1.2.1 Ensure Red Hat Subscription Manager connection is configured"" : [WARNING]

Systems need to be registered with the Red Hat Subscription Manager (RHSM) to receive patch updates. This is usually configured during initial installation.
        Rationale:
        It is important to register with the Red Hat Subscription Manager to make sure that patches are updated on a regular basis. This helps to reduce the exposure time as new vulnerabilities are discovered.

        NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
Run the following command to connect to the Red Hat Subscription Manager:
        # subscription-manager register

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.14.1,800-53|SI-2,CN-L3|8.1.10.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.4.4(e),CN-L3|8.5.4.1(b),CN-L3|8.5.4.1(d),CN-L3|8.5.4.1(e),CSCv7|3.4,CSF|ID.RA-1,CSF|PR.IP-12,ITSG-33|SI-2,LEVEL|1NS,NESA|T7.6.2,NESA|T7.7.1,NIAv2|AM38,NIAv2|AM39,NIAv2|PR9,NIAv2|SS14b,SWIFT-CSCv1|2.2

Policy Value:
cmd: /usr/bin/subscription-manager identity
expect: ManualReviewRequired
system: Linux

Actual Value:
The command '/usr/bin/subscription-manager identity' returned : 

This system is not yet registered. Try 'subscription-manager register --help' for more information."
"""1.2.4 Ensure gpgcheck is globally activated"" : [FAILED]

The gpgcheck option, found in the main section of the /etc/yum.conf and individual /etc/yum/repos.d/* files determines if an RPM package's signature is checked prior to its installation.
        Rationale:
        It is important to ensure that an RPM's package signature is always checked prior to installation to ensure that the software is obtained from a trusted source.

Solution:
Edit /etc/yum.conf and set 'gpgcheck=1' in the [main] section. Edit any failing files in /etc/yum.repos.d/* and set all instances of gpgcheck to '1'.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-53|SI-7(6),CSCv7|3.4,CSF|PR.DS-6,LEVEL|1S,SWIFT-CSCv1|6.2

Policy Value:
expect: ^[\s]*gpgcheck[\s]*=[\s]*1[\s]*$
file: /etc/yum.conf /etc/yum.repos.d/*.repo
regex: ^[\s]*gpgcheck[\s]*=
system: Linux

Actual Value:
Non-compliant file(s):
      /etc/yum.repos.d/redhat.repo - regex not found"
"""1.2.5 Ensure package manager repositories are configured"" : [WARNING]

Systems need to have package manager repositories configured to ensure they receive the latest patches and updates.
        Rationale:
        If a system's package repositories are misconfigured important patches may not be identified or a rogue repository could introduce compromised software.

        NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
Configure your package manager repositories according to site policy.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.14.1,800-53|SI-2,CN-L3|8.1.10.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.4.4(e),CN-L3|8.5.4.1(b),CN-L3|8.5.4.1(d),CN-L3|8.5.4.1(e),CSCv7|3.4,CSF|ID.RA-1,CSF|PR.IP-12,ITSG-33|SI-2,LEVEL|1NS,NESA|T7.6.2,NESA|T7.7.1,NIAv2|PR9,SWIFT-CSCv1|2.2

Policy Value:
cmd: /usr/bin/yum repolist
expect: ManualReviewRequired
system: Linux

Actual Value:
The command '/usr/bin/yum repolist' returned : 

Updating Subscription Management repositories.
Unable to read consumer identity

This system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.

repo id                                               repo name
local-repo-in-iso-AppStream-by-yum-repo-config-helper Red Hat Enterprise Linux \8 - AppStream - \x86_64 (DVD)
local-repo-in-iso-BaseOS-by-yum-repo-config-helper    Red Hat Enterprise Linux \8 - BaseOS - \x86_64 (DVD)"
"""1.3.2 Ensure sudo commands use pty"" : [FAILED]

sudo can be configured to run only from a psuedo-pty
        Rationale:
        Attackers can run a malicious program using sudo which would fork a background process that remains even when the main program has finished executing.

Solution:
edit the file /etc/sudoers or a file in /etc/sudoers.d/ with visudo -f and add the following line:
        Defaults use_pty
        Impact:
        editing the sudo configuration incorrectly can cause sudo to stop functioning.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.1,800-53|AC-3(7),CN-L3|7.1.2.2(g),CN-L3|7.1.3.2(c),CSCv7|5.1,CSF|PR.AC-4,CSF|PR.PT-3,LEVEL|1S

Policy Value:
cmd: /usr/bin/grep -s -E '^[[:space:]]*Defaults[[:space:]]+([^#]+,[[:space:]]*)?use_pty' /etc/sudoers /etc/sudoers.d/* | /usr/bin/awk '{print} END {if (NR != 0) print ""pass"" ; else print ""fail""}'
expect: ^pass$
system: Linux

Actual Value:
The command '/usr/bin/grep -s -E '^[[:space:]]*Defaults[[:space:]]+([^#]+,[[:space:]]*)?use_pty' /etc/sudoers /etc/sudoers.d/* | /usr/bin/awk '{print} END {if (NR != 0) print ""pass"" ; else print ""fail""}'' returned : 

fail"
"""1.3.3 Ensure sudo log file exists"" : [FAILED]

sudo can use a custom log file
        Rationale:
        A sudo log file simplifies auditing of sudo commands

Solution:
edit the file /etc/sudoers or a file in /etc/sudoers.d/ with visudo -f and add the following line:
        Defaults  logfile=""<PATH TO CUSTOM LOG FILE>""
            **Example
            Defaults  logfile=""/var/log/sudo.log""
            Impact:
            editing the sudo configuration incorrectly can cause sudo to stop functioning

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSCv7|6.3,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,LEVEL|1S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1

Policy Value:
cmd: /usr/bin/grep -s -E '^[[:space:]]*Defaults[[:space:]]+([^#]+,[[:space:]]*)?logfile=' /etc/sudoers /etc/sudoers.d/* | /usr/bin/awk '{print} END {if (NR != 0) print ""pass"" ; else print ""fail""}'
expect: ^pass$
system: Linux

Actual Value:
The command '/usr/bin/grep -s -E '^[[:space:]]*Defaults[[:space:]]+([^#]+,[[:space:]]*)?logfile=' /etc/sudoers /etc/sudoers.d/* | /usr/bin/awk '{print} END {if (NR != 0) print ""pass"" ; else print ""fail""}'' returned : 

fail"
"""1.4.1 Ensure AIDE is installed"" : [FAILED]

AIDE takes a snapshot of filesystem state including modification times, permissions, and file hashes which can then be used to compare against the current state of the filesystem to detect modifications to the system.
        Rationale:
        By monitoring the filesystem state compromised files can be detected to prevent or limit the exposure of accidental or malicious misconfigurations or modified binaries.

Solution:
Run the following command to install AIDE:
        # dnf install aide
        Configure AIDE as appropriate for your environment. Consult the AIDE documentation for options. Initialize AIDE: Run the following commands:
        # aide --init
        # mv /var/lib/aide/aide.db.new.gz /var/lib/aide/aide.db.gz

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.4.8,800-53|CM-7(5),CSCv7|14.9,CSF|PR.IP-1,CSF|PR.PT-3,ISO/IEC-27001|A.12.5.1,ISO/IEC-27001|A.12.6.2,LEVEL|1S,PCI-DSSv3.1|12.3.7,PCI-DSSv3.2|12.3.7,SWIFT-CSCv1|2.3,TBA-FIISB|44.2.2,TBA-FIISB|49.2.3

Policy Value:
operator: gt
required: YES
rpm: aide-0.0.0-0
system: Linux

Actual Value:
The package 'aide-0.0.0-0' is not installed"
"""1.4.2 Ensure filesystem integrity is regularly checked"" : [FAILED]

Periodic checking of the filesystem integrity is needed to detect changes to the filesystem.
                Rationale:
                Periodic file checking allows the system administrator to determine on a regular basis if critical files have been changed in an unauthorized fashion.

Solution:
Run the following commands:
                # cp ./config/aidecheck.service /etc/systemd/system/aidecheck.service # cp ./config/aidecheck.timer /etc/systemd/system/aidecheck.timer # chmod 0644 /etc/systemd/system/aidecheck.*  # systemctl reenable aidecheck.timer # systemctl restart aidecheck.timer # systemctl daemon-reload
                OR Run the following command:
                # crontab -u root -e
                Add the following line to the crontab:
                0 5 * * * /usr/sbin/aide --check

See Also: https://workbench.cisecurity.org/files/2485

Reference: CSCv7|14.9,LEVEL|1S

Policy Value:
FAILED"
"""1.5.1 Ensure permissions on bootloader config are configured - grubenv"" : [FAILED]

The grub configuration file contains information on boot settings and passwords for unlocking boot options.
                The grub configuration is usually grub.cfg and grubenv stored in/boot/grub2/`
                Rationale:
                Setting the permissions to read and write for root only prevents non-root users from seeing the boot parameters or changing them. Non-root users who read the boot parameters may be able to identify weaknesses in security upon boot and be able to exploit them.

Solution:
Run the following commands to set permissions on your grub configuration:
                # chown root:root /boot/grub2/grub.cfg
                # chmod og-rwx /boot/grub2/grub.cfg
                # chown root:root /boot/grub2/grubenv
                # chmod og-rwx /boot/grub2/grubenv
                Notes:
                This recommendation is designed around the grub bootloader, if LILO or another bootloader is in use in your environment enact equivalent settings.
                Replace /boot/grub2/grub.cfg and /boot/grub2/grubenv with the appropriate configuration file(s) for your environment

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-53|SI-7(9),CN-L3|8.1.2.3,CN-L3|8.1.4.6,CSCv7|5.1,CSF|PR.DS-6,LEVEL|1S,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4

Policy Value:
file: /boot/grub2/grubenv
group: root
mask: 177
owner: root
system: Linux

Actual Value:
The file /boot/grub2/grubenv with fmode owner: root group: root mode: 0644 attr: -------------------- uid: 0 gid: 0 uneven permissions : FALSE  does not match the policy value owner: root group: root mask: 0177 uneven permissions : TRUE 

/boot/grub2/grubenv"
"""1.5.2 Ensure bootloader password is set"" : [FAILED]

Setting the boot loader password will require that anyone rebooting the system must enter a password before being able to set command line boot parameters
                Rationale:
                Requiring a boot password upon execution of the boot loader will prevent an unauthorized user from entering boot parameters or changing the boot partition. This prevents users from weakening security (e.g. turning off SELinux at boot time).

Solution:
Create an encrypted password with grub2-setpassword :
                # grub2-setpassword Enter password: <password> Confirm password: <password>
                    Run the following command to update the grub2 configuration:
                    # grub2-mkconfig -o /boot/grub2/grub.cfg
                    Impact:
                    If password protection is enabled, only the designated superuser can edit a Grub 2 menu item by pressing ""e"" or access the GRUB 2 command line by pressing ""c""
                    If GRUB 2 is set up to boot automatically to a password-protected menu entry the user has no option to back out of the password prompt to select another menu entry. Holding the SHIFT key will not display the menu in this case. The user must enter the correct username and password. If unable, the configuration files will have to be edited via the LiveCD or other means to fix the problem
                    You can add --unrestricted to the menu entries to allow the system to boot without entering a password. Password will still be required to edit menu items.
                    Notes:
                    This recommendation is designed around the grub2 bootloader, if LILO or another bootloader is in use in your environment enact equivalent settings.
                    Replace `/boot/grub2/grub.cfg with the appropriate grub configuration file for your environment
                    The superuser/user information and password do not have to be contained in the /etc/grub.d/00_header file. The information can be placed in any /etc/grub.d file as long as that file is incorporated into grub.cfg. The user may prefer to enter this data into a custom file, such as /etc/grub.d/40_custom so it is not overwritten should the Grub package be updated. If placing the information in a custom file, do not include the ""cat << EOF"" and ""EOF"" lines as the content is automatically added from these files.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.1,800-53|AC-3,CN-L3|8.1.10.2(c),CN-L3|8.1.4.11(b),CN-L3|8.1.4.2(f),CN-L3|8.5.3.1,CN-L3|8.5.4.1(a),CSCv7|5.1,CSF|PR.AC-4,CSF|PR.PT-3,ISO/IEC-27001|A.9.4.1,ISO/IEC-27001|A.9.4.5,ITSG-33|AC-3,LEVEL|1S,NESA|T4.2.1,NESA|T5.4.4,NESA|T5.4.5,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.2,NESA|T7.5.3,NIAv2|AM3,NIAv2|SS29,TBA-FIISB|31.1

Policy Value:
expect: ^[\s]*GRUB2_PASSWORD[\s]*=[^\s]+$
file: /boot/grub2/user.cfg
regex: ^[\s]*GRUB2_PASSWORD
system: Linux

Actual Value:
No files found: /boot/grub2/user.cfg"
"""1.6.1 Ensure core dumps are restricted - sysctl.conf sysctl.d"" : [FAILED]

A core dump is the memory of an executable program. It is generally used to determine why a program aborted. It can also be used to glean confidential information from a core file. The system provides the ability to set a soft limit for core dumps, but this can be overridden by the user.
        Rationale:
        Setting a hard limit on core dumps prevents users from overriding the soft variable. If core dumps are required, consider setting limits for user groups (see limits.conf(5) ). In addition, setting the fs.suid_dumpable variable to 0 will prevent setuid programs from dumping core.

Solution:
Add the following line to /etc/security/limits.conf or a /etc/security/limits.d/* file:
        * hard core 0
        Set the following parameter in /etc/sysctl.conf or a /etc/sysctl.d/* file:
        fs.suid_dumpable = 0
        Run the following command to set the active kernel parameter:
        # sysctl -w fs.suid_dumpable=0
        If systemd-coredump is installed: edit /etc/systemd/coredump.conf and add/modify the following lines:
        Storage=none ProcessSizeMax=0
        Run the command:
        systemctl daemon-reload

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.7,800-53|AC-6(10),CSCv7|5.1,CSF|PR.AC-4,LEVEL|1S

Policy Value:
cmd: /usr/bin/grep -s -E '^[[:space:]]*fs\.suid_dumpable[[:space:]]*=[[:space:]]*0[[:space:]]*$' /etc/sysctl.conf /etc/sysctl.d/* | /usr/bin/awk '{print} END {if (NR != 0) print ""pass"" ; else print ""fail""}'
expect: ^pass$
system: Linux

Actual Value:
The command '/usr/bin/grep -s -E '^[[:space:]]*fs\.suid_dumpable[[:space:]]*=[[:space:]]*0[[:space:]]*$' /etc/sysctl.conf /etc/sysctl.d/* | /usr/bin/awk '{print} END {if (NR != 0) print ""pass"" ; else print ""fail""}'' returned : 

fail"
"""1.6.2 Ensure address space layout randomization (ASLR) is enabled - sysctl.conf sysctl.d"" : [FAILED]

Address space layout randomization (ASLR) is an exploit mitigation technique which randomly arranges the address space of key data areas of a process.
        Rationale:
        Randomly placing virtual memory regions will make it difficult to write memory page exploits as the memory placement will be consistently shifting.

Solution:
Set the following parameter in /etc/sysctl.conf or a /etc/sysctl.d/* file:
        kernel.randomize_va_space = 2
        Run the following command to set the active kernel parameter:
        # sysctl -w kernel.randomize_va_space=2

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-53|SI-16,CSCv7|8.3,LEVEL|1S

Policy Value:
cmd: /usr/bin/grep -s -E '^[[:space:]]*kernel\.randomize_va_space[[:space:]]*=[[:space:]]*2[[:space:]]*$' /etc/sysctl.conf /etc/sysctl.d/* | /usr/bin/awk '{print} END {if (NR != 0) print ""pass"" ; else print ""fail""}'
dont_echo_cmd: YES
expect: ^pass$
system: Linux

Actual Value:
The command returned : 

fail"
"""1.8.1.1 Ensure message of the day is configured properly - banner text"" : [FAILED]

The contents of the /etc/motd file are displayed to users after login and function as a message of the day for authenticated users.
        Unix-based systems have typically displayed information about the OS release and patch level upon logging in to the system. This information can be useful to developers who are developing software for a particular OS platform. If mingetty(8) supports the following options, they display operating system information: m - machine architecture r - operating system release s - operating system name v - operating system version
        Rationale:
        Warning messages inform users who are attempting to login to the system of their legal status regarding the system and must include the name of the organization that owns the system and any monitoring policies that are in place. Displaying OS and patch level information in login banners also has the side effect of providing detailed system information to attackers attempting to target specific exploits of a system. Authorized users can easily get this information by running the "" uname -a "" command once they have logged in.

Solution:
Edit the /etc/motd file with the appropriate contents according to your site policy, remove any instances of m , r , s , v or references to the OS platform OR If the motd is not used, this file can be removed. Run the following command to remove the motd file:
        # rm /etc/motd

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.9,800-53|AC-8,CSCv7|5.1,ITSG-33|AC-8,LEVEL|1S,NESA|M1.3.6,TBA-FIISB|45.2.4

Policy Value:
All activities performed on this system will be monitored.

Actual Value:
First ERROR: This is != All activities
This is a singapore MINISTRY OF DEFENCE protected computer system. Unauthorised access, use, reproduction, possession, modification, interception, damage or transfer (including such attempts) of any content in this system are serious offenses under the Computer Misuse Act and Cybersecurity Act (Chapter 50A) . If found guilty, an offender can be fined up to $100,000 and/or imprisoned up to 20 years . If you are not authorised to use this system, DO NOT LOG IN OR ATTEMPT TO LOG IN!"
"""1.8.1.2 Ensure local login warning banner is configured properly - banner text"" : [FAILED]

The contents of the /etc/issue file are displayed to users prior to login for local terminals.
        Unix-based systems have typically displayed information about the OS release and patch level upon logging in to the system. This information can be useful to developers who are developing software for a particular OS platform. If mingetty(8) supports the following options, they display operating system information: m - machine architecture r - operating system release s - operating system name v - operating system version - or the operating system's name
        Rationale:
        Warning messages inform users who are attempting to login to the system of their legal status regarding the system and must include the name of the organization that owns the system and any monitoring policies that are in place. Displaying OS and patch level information in login banners also has the side effect of providing detailed system information to attackers attempting to target specific exploits of a system. Authorized users can easily get this information by running the "" uname -a "" command once they have logged in.

Solution:
Edit the /etc/issue file with the appropriate contents according to your site policy, remove any instances of m , r , s , v or references to the OS platform
        # echo ""Authorized uses only. All activity may be monitored and reported."" > /etc/issue

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.9,800-53|AC-8,CSCv7|5.1,ITSG-33|AC-8,LEVEL|1S,NESA|M1.3.6,TBA-FIISB|45.2.4

Policy Value:
All activities performed on this system will be monitored.

Actual Value:
First ERROR: This is != All activities
This is a singapore MINISTRY OF DEFENCE protected computer system. Unauthorised access, use, reproduction, possession, modification, interception, damage or transfer (including such attempts) of any content in this system are serious offenses under the Computer Misuse Act and Cybersecurity Act (Chapter 50A) . If found guilty, an offender can be fined up to $100,000 and/or imprisoned up to 20 years . If you are not authorised to use this system, DO NOT LOG IN OR ATTEMPT TO LOG IN!"
"""1.8.1.3 Ensure remote login warning banner is configured properly - banner text"" : [FAILED]

The contents of the /etc/issue.net file are displayed to users prior to login for remote connections from configured services.
        Unix-based systems have typically displayed information about the OS release and patch level upon logging in to the system. This information can be useful to developers who are developing software for a particular OS platform. If mingetty(8) supports the following options, they display operating system information: m - machine architecture r - operating system release s - operating system name v - operating system version
        Rationale:
        Warning messages inform users who are attempting to login to the system of their legal status regarding the system and must include the name of the organization that owns the system and any monitoring policies that are in place. Displaying OS and patch level information in login banners also has the side effect of providing detailed system information to attackers attempting to target specific exploits of a system. Authorized users can easily get this information by running the "" uname -a "" command once they have logged in.

Solution:
Edit the /etc/issue.net file with the appropriate contents according to your site policy, remove any instances of m , r , s , v or references to the OS platform
        # echo ""Authorized uses only. All activity may be monitored and reported."" > /etc/issue.net

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.9,800-53|AC-8,CSCv7|5.1,ITSG-33|AC-8,LEVEL|1S,NESA|M1.3.6,TBA-FIISB|45.2.4

Policy Value:
All activities performed on this system will be monitored.

Actual Value:
First ERROR: This is != All activities
This is a singapore MINISTRY OF DEFENCE protected computer system. Unauthorised access, use, reproduction, possession, modification, interception, damage or transfer (including such attempts) of any content in this system are serious offenses under the Computer Misuse Act and Cybersecurity Act (Chapter 50A) . If found guilty, an offender can be fined up to $100,000 and/or imprisoned up to 20 years . If you are not authorised to use this system, DO NOT LOG IN OR ATTEMPT TO LOG IN!"
"""1.9 Ensure updates, patches, and additional security software are installed"" : [WARNING]

Periodically patches are released for included software either due to security flaws or to include additional functionality.
        Rationale:
        Newer patches may contain security enhancements that would not be available through the latest full update. As a result, it is recommended that the latest software patches be used to take advantage of the latest functionality. As with any software installation, organizations need to determine if a given update meets their requirements and verify the compatibility and supportability of any additional software against the update revision that is selected.

        NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
Use your package manager to update all packages on the system according to site policy. The following command will install all available security updates:
        # dnf update --security
        Notes:
        Site policy may mandate a testing period before install onto production systems for available updates.
        The audit and remediation here only cover security updates. Non-security updates can be audited with and comparing against site policy:
        # dnf check-update

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.14.1,800-53|SI-2,CN-L3|8.1.10.5(a),CN-L3|8.1.10.5(b),CN-L3|8.1.4.4(e),CN-L3|8.5.4.1(b),CN-L3|8.5.4.1(d),CN-L3|8.5.4.1(e),CSCv7|3.4,CSF|ID.RA-1,CSF|PR.IP-12,ITSG-33|SI-2,LEVEL|1S,NESA|T7.6.2,NESA|T7.7.1,NIAv2|AM38,NIAv2|AM39,NIAv2|PR9,NIAv2|SS14b,SWIFT-CSCv1|2.2

Policy Value:
cmd: /usr/bin/yum check-update --security
expect: ManualReviewRequired
system: Linux

Actual Value:
The command '/usr/bin/yum check-update --security' returned : 

Errors during downloading metadata for repository 'local-repo-in-iso-BaseOS-by-yum-repo-config-helper':
  - Curl error (37): Couldn't read a file:// file for file:///mnt/usb/BaseOS/repodata/repomd.xml [Couldn't open file /mnt/usb/BaseOS/repodata/repomd.xml]

Error: Failed to download metadata for repo 'local-repo-in-iso-BaseOS-by-yum-repo-config-helper': Cannot download repomd.xml: Cannot download repodata/repomd.xml: All mirrors were tried
Updating Subscription Management repositories.
Unable to read consumer identity

This system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.

Red Hat Enterprise Linux \8 - BaseOS - \x86_64  0.0  B/s |   0  B     00:00"
"""2.2.1.1 Ensure time synchronization is in use"" : [FAILED]

System time should be synchronized between all systems in an environment. This is typically done by establishing an authoritative time server or set of servers and having all systems synchronize their clocks to them.
                Rationale:
                Time synchronization is important to support time sensitive security mechanisms like Kerberos and also ensures log files have consistent time records across the enterprise, which aids in forensic investigations.

Solution:
On physical systems or virtual systems where host based time synchronization is not available install chrony: Run the folloing command to install chrony:
                # dnf install chrony
                On virtual systems where host based time synchronization is available consult your virtualization software documentation and setup host based synchronization.
                Notes:
                systemd-timesyncd is part of systemd. Some versions of systemd have been compiled without systemd-timesycnd. On these distributions, chrony or NTP should be used instead of systemd-timesycnd.

See Also: https://workbench.cisecurity.org/files/2485

Reference: CSCv7|6.1,LEVEL|1NS

Policy Value:
FAILED"
"""2.2.1.2 Ensure chrony is configured - NTP server"" : [WARNING]

chrony is a daemon which implements the Network Time Protocol (NTP) is designed to synchronize system clocks across a variety of systems and use a source that is highly accurate. More information on chrony can be found at http://chrony.tuxfamily.org/. chrony can be configured to be a client and/or a server.
                Rationale:
                If chrony is in use on the system proper configuration is vital to ensuring time synchronization is working properly.
                This recommendation only applies if chrony is in use on the system.

                NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance.

Solution:
Add or edit server or pool lines to /etc/chrony.conf as appropriate:
                server <remote-server>
                    Configure chrony to run as the chrony user

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.3.7,800-53|AU-8(1),CSCv7|6.1,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.4,ITSG-33|AU-8(1),LEVEL|1S,NESA|T3.6.7,NIAv2|NS44,NIAv2|NS45,NIAv2|NS46,NIAv2|NS47

Policy Value:
WARNING"
"""2.2.1.2 Ensure chrony is configured - OPTIONS"" : [WARNING]

chrony is a daemon which implements the Network Time Protocol (NTP) is designed to synchronize system clocks across a variety of systems and use a source that is highly accurate. More information on chrony can be found at http://chrony.tuxfamily.org/. chrony can be configured to be a client and/or a server.
                Rationale:
                If chrony is in use on the system proper configuration is vital to ensuring time synchronization is working properly.
                This recommendation only applies if chrony is in use on the system.

                NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance.

Solution:
Add or edit server or pool lines to /etc/chrony.conf as appropriate:
                server <remote-server>
                    Configure chrony to run as the chrony user

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|6.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3

Policy Value:
WARNING"
"""3.1.2 Ensure packet redirect sending is disabled - 'net.ipv4.conf.all.send_redirects = 0'"" : [FAILED]

ICMP Redirects are used to send routing information to other hosts. As a host itself does not act as a router (in a host only configuration), there is no need to send redirects.
        Rationale:
        An attacker could use a compromised host to send invalid ICMP redirects to other router devices in an attempt to corrupt routing and have users access a system set up by the attacker as opposed to a valid system.

Solution:
Set the following parameters in /etc/sysctl.conf or a /etc/sysctl.d/* file:
        net.ipv4.conf.all.send_redirects = 0 net.ipv4.conf.default.send_redirects = 0
        Run the following commands to set the active kernel parameters:
        # sysctl -w net.ipv4.conf.all.send_redirects=0 # sysctl -w net.ipv4.conf.default.send_redirects=0 # sysctl -w net.ipv4.route.flush=1

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|5.1,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/sysctl net.ipv4.conf.all.send_redirects
expect: ^[\s]*net\.ipv4\.conf\.all\.send_redirects[\s]*=[\s]*0[\s]*$
system: Linux

Actual Value:
The command '/usr/sbin/sysctl net.ipv4.conf.all.send_redirects' returned : 

net.ipv4.conf.all.send_redirects = 1"
"""3.1.2 Ensure packet redirect sending is disabled - 'net.ipv4.conf.default.send_redirects = 0'"" : [FAILED]

ICMP Redirects are used to send routing information to other hosts. As a host itself does not act as a router (in a host only configuration), there is no need to send redirects.
        Rationale:
        An attacker could use a compromised host to send invalid ICMP redirects to other router devices in an attempt to corrupt routing and have users access a system set up by the attacker as opposed to a valid system.

Solution:
Set the following parameters in /etc/sysctl.conf or a /etc/sysctl.d/* file:
        net.ipv4.conf.all.send_redirects = 0 net.ipv4.conf.default.send_redirects = 0
        Run the following commands to set the active kernel parameters:
        # sysctl -w net.ipv4.conf.all.send_redirects=0 # sysctl -w net.ipv4.conf.default.send_redirects=0 # sysctl -w net.ipv4.route.flush=1

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|5.1,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/sysctl net.ipv4.conf.default.send_redirects
expect: ^[\s]*net\.ipv4\.conf\.default\.send_redirects[\s]*=[\s]*0[\s]*$
system: Linux

Actual Value:
The command '/usr/sbin/sysctl net.ipv4.conf.default.send_redirects' returned : 

net.ipv4.conf.default.send_redirects = 1"
"""3.2.1 Ensure source routed packets are not accepted - files 'net.ipv4.conf.default.accept_source_route = 0'"" : [FAILED]

In networking, source routing allows a sender to partially or fully specify the route packets take through a network. In contrast, non-source routed packets travel a path determined by routers in the network. In some cases, systems may not be routable or reachable from some locations (e.g. private addresses vs. Internet routable), and so source routed packets would need to be used.
        Rationale:
        Setting net.ipv4.conf.all.accept_source_route, net.ipv4.conf.default.accept_source_route, net.ipv6.conf.all.accept_source_route and net.ipv6.conf.default.accept_source_route to 0 disables the system from accepting source routed packets. Assume this system was capable of routing packets to Internet routable addresses on one interface and private addresses on another interface. Assume that the private addresses were not routable to the Internet routable addresses and vice versa. Under normal routing circumstances, an attacker from the Internet routable addresses could not use the system as a way to reach the private address systems. If, however, source routed packets were allowed, they could be used to gain access to the private address systems as the route could be specified, rather than rely on routing protocols that did not allow this routing.

Solution:
Set the following parameters in /etc/sysctl.conf or a /etc/sysctl.d/* file:
        net.ipv4.conf.all.accept_source_route = 0 net.ipv4.conf.default.accept_source_route = 0 net.ipv6.conf.all.accept_source_route = 0 net.ipv6.conf.default.accept_source_route = 0
        Run the following commands to set the active kernel parameters:
        # sysctl -w net.ipv4.conf.all.accept_source_route=0 # sysctl -w net.ipv4.conf.default.accept_source_route=0 # sysctl -w net.ipv6.conf.all.accept_source_route=0 # sysctl -w net.ipv6.conf.default.accept_source_route=0 # sysctl -w net.ipv4.route.flush=1 # sysctl -w net.ipv6.route.flush=1

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|5.1,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/bin/grep -s -E '^[[:space:]]*net\.ipv4\.conf\.default\.accept_source_route[[:space:]]*=[[:space:]]*0[[:space:]]*$' /etc/sysctl.conf /etc/sysctl.d/*.conf /usr/lib/sysctl.d/*.conf /run/sysctl.d/*.conf | /usr/bin/awk '{print} END {if (NR != 0) print ""pass"" ; else print ""fail""}'
expect: ^pass$
system: Linux

Actual Value:
The command '/usr/bin/grep -s -E '^[[:space:]]*net\.ipv4\.conf\.default\.accept_source_route[[:space:]]*=[[:space:]]*0[[:space:]]*$' /etc/sysctl.conf /etc/sysctl.d/*.conf /usr/lib/sysctl.d/*.conf /run/sysctl.d/*.conf | /usr/bin/awk '{print} END {if (NR != 0) print ""pass"" ; else print ""fail""}'' returned : 

fail"
"""3.2.1 Ensure source routed packets are not accepted - 'net.ipv4.conf.default.accept_source_route = 0'"" : [FAILED]

In networking, source routing allows a sender to partially or fully specify the route packets take through a network. In contrast, non-source routed packets travel a path determined by routers in the network. In some cases, systems may not be routable or reachable from some locations (e.g. private addresses vs. Internet routable), and so source routed packets would need to be used.
        Rationale:
        Setting net.ipv4.conf.all.accept_source_route, net.ipv4.conf.default.accept_source_route, net.ipv6.conf.all.accept_source_route and net.ipv6.conf.default.accept_source_route to 0 disables the system from accepting source routed packets. Assume this system was capable of routing packets to Internet routable addresses on one interface and private addresses on another interface. Assume that the private addresses were not routable to the Internet routable addresses and vice versa. Under normal routing circumstances, an attacker from the Internet routable addresses could not use the system as a way to reach the private address systems. If, however, source routed packets were allowed, they could be used to gain access to the private address systems as the route could be specified, rather than rely on routing protocols that did not allow this routing.

Solution:
Set the following parameters in /etc/sysctl.conf or a /etc/sysctl.d/* file:
        net.ipv4.conf.all.accept_source_route = 0 net.ipv4.conf.default.accept_source_route = 0 net.ipv6.conf.all.accept_source_route = 0 net.ipv6.conf.default.accept_source_route = 0
        Run the following commands to set the active kernel parameters:
        # sysctl -w net.ipv4.conf.all.accept_source_route=0 # sysctl -w net.ipv4.conf.default.accept_source_route=0 # sysctl -w net.ipv6.conf.all.accept_source_route=0 # sysctl -w net.ipv6.conf.default.accept_source_route=0 # sysctl -w net.ipv4.route.flush=1 # sysctl -w net.ipv6.route.flush=1

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|5.1,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/sysctl net.ipv4.conf.default.accept_source_route
expect: ^[\s]*net\.ipv4\.conf\.default\.accept_source_route[\s]*=[\s]*0[\s]*$
system: Linux

Actual Value:
The command '/usr/sbin/sysctl net.ipv4.conf.default.accept_source_route' returned : 

net.ipv4.conf.default.accept_source_route = 1"
"""3.2.2 Ensure ICMP redirects are not accepted - 'net.ipv4.conf.all.accept_redirects = 0'"" : [FAILED]

ICMP redirect messages are packets that convey routing information and tell your host (acting as a router) to send packets via an alternate path. It is a way of allowing an outside routing device to update your system routing tables. By setting net.ipv4.conf.all.accept_redirects and net.ipv6.conf.all.accept_redirects to 0, the system will not accept any ICMP redirect messages, and therefore, won't allow outsiders to update the system's routing tables.
        Rationale:
        Attackers could use bogus ICMP redirect messages to maliciously alter the system routing tables and get them to send packets to incorrect networks and allow your system packets to be captured.

Solution:
Set the following parameters in /etc/sysctl.conf or a /etc/sysctl.d/* file:
        net.ipv4.conf.all.accept_redirects = 0 net.ipv4.conf.default.accept_redirects = 0 net.ipv6.conf.all.accept_redirects = 0 net.ipv6.conf.default.accept_redirects = 0
        Run the following commands to set the active kernel parameters:
        # sysctl -w net.ipv4.conf.all.accept_redirects=0 # sysctl -w net.ipv4.conf.default.accept_redirects=0 # sysctl -w net.ipv6.conf.all.accept_redirects=0 # sysctl -w net.ipv6.conf.default.accept_redirects=0 # sysctl -w net.ipv4.route.flush=1 # sysctl -w net.ipv6.route.flush=1

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|5.1,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/sysctl net.ipv4.conf.all.accept_redirects
expect: ^[\s]*net\.ipv4\.conf\.all\.accept_redirects[\s]*=[\s]*0[\s]*$
system: Linux

Actual Value:
The command '/usr/sbin/sysctl net.ipv4.conf.all.accept_redirects' returned : 

net.ipv4.conf.all.accept_redirects = 1"
"""3.2.2 Ensure ICMP redirects are not accepted - 'net.ipv4.conf.default.accept_redirects = 0'"" : [FAILED]

ICMP redirect messages are packets that convey routing information and tell your host (acting as a router) to send packets via an alternate path. It is a way of allowing an outside routing device to update your system routing tables. By setting net.ipv4.conf.all.accept_redirects and net.ipv6.conf.all.accept_redirects to 0, the system will not accept any ICMP redirect messages, and therefore, won't allow outsiders to update the system's routing tables.
        Rationale:
        Attackers could use bogus ICMP redirect messages to maliciously alter the system routing tables and get them to send packets to incorrect networks and allow your system packets to be captured.

Solution:
Set the following parameters in /etc/sysctl.conf or a /etc/sysctl.d/* file:
        net.ipv4.conf.all.accept_redirects = 0 net.ipv4.conf.default.accept_redirects = 0 net.ipv6.conf.all.accept_redirects = 0 net.ipv6.conf.default.accept_redirects = 0
        Run the following commands to set the active kernel parameters:
        # sysctl -w net.ipv4.conf.all.accept_redirects=0 # sysctl -w net.ipv4.conf.default.accept_redirects=0 # sysctl -w net.ipv6.conf.all.accept_redirects=0 # sysctl -w net.ipv6.conf.default.accept_redirects=0 # sysctl -w net.ipv4.route.flush=1 # sysctl -w net.ipv6.route.flush=1

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|5.1,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/sysctl net.ipv4.conf.default.accept_redirects
expect: ^[\s]*net\.ipv4\.conf\.default\.accept_redirects[\s]*=[\s]*0[\s]*$
system: Linux

Actual Value:
The command '/usr/sbin/sysctl net.ipv4.conf.default.accept_redirects' returned : 

net.ipv4.conf.default.accept_redirects = 1"
"""3.2.3 Ensure secure ICMP redirects are not accepted - 'net.ipv4.conf.all.secure_redirects = 0'"" : [FAILED]

Secure ICMP redirects are the same as ICMP redirects, except they come from gateways listed on the default gateway list. It is assumed that these gateways are known to your system, and that they are likely to be secure.
        Rationale:
        It is still possible for even known gateways to be compromised. Setting net.ipv4.conf.all.secure_redirects to 0 protects the system from routing table updates by possibly compromised known gateways.

Solution:
Set the following parameters in /etc/sysctl.conf or a /etc/sysctl.d/* file:
        net.ipv4.conf.all.secure_redirects = 0 net.ipv4.conf.default.secure_redirects = 0
        Run the following commands to set the active kernel parameters:
        # sysctl -w net.ipv4.conf.all.secure_redirects=0 # sysctl -w net.ipv4.conf.default.secure_redirects=0 # sysctl -w net.ipv4.route.flush=1

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|5.1,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/sysctl net.ipv4.conf.all.secure_redirects
expect: ^[\s]*net\.ipv4\.conf\.all\.secure_redirects[\s]*=[\s]*0[\s]*$
system: Linux

Actual Value:
The command '/usr/sbin/sysctl net.ipv4.conf.all.secure_redirects' returned : 

net.ipv4.conf.all.secure_redirects = 1"
"""3.2.3 Ensure secure ICMP redirects are not accepted - 'net.ipv4.conf.default.secure_redirects = 0'"" : [FAILED]

Secure ICMP redirects are the same as ICMP redirects, except they come from gateways listed on the default gateway list. It is assumed that these gateways are known to your system, and that they are likely to be secure.
        Rationale:
        It is still possible for even known gateways to be compromised. Setting net.ipv4.conf.all.secure_redirects to 0 protects the system from routing table updates by possibly compromised known gateways.

Solution:
Set the following parameters in /etc/sysctl.conf or a /etc/sysctl.d/* file:
        net.ipv4.conf.all.secure_redirects = 0 net.ipv4.conf.default.secure_redirects = 0
        Run the following commands to set the active kernel parameters:
        # sysctl -w net.ipv4.conf.all.secure_redirects=0 # sysctl -w net.ipv4.conf.default.secure_redirects=0 # sysctl -w net.ipv4.route.flush=1

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|5.1,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/sysctl net.ipv4.conf.default.secure_redirects
expect: ^[\s]*net\.ipv4\.conf\.default\.secure_redirects[\s]*=[\s]*0[\s]*$
system: Linux

Actual Value:
The command '/usr/sbin/sysctl net.ipv4.conf.default.secure_redirects' returned : 

net.ipv4.conf.default.secure_redirects = 1"
"""3.2.4 Ensure suspicious packets are logged - 'net.ipv4.conf.all.log_martians = 1'"" : [FAILED]

When enabled, this feature logs packets with un-routable source addresses to the kernel log.
        Rationale:
        Enabling this feature and logging these packets allows an administrator to investigate the possibility that an attacker is sending spoofed packets to their system.

Solution:
Set the following parameters in /etc/sysctl.conf or a /etc/sysctl.d/* file:
        net.ipv4.conf.all.log_martians = 1 net.ipv4.conf.default.log_martians = 1
        Run the following commands to set the active kernel parameters:
        # sysctl -w net.ipv4.conf.all.log_martians=1 # sysctl -w net.ipv4.conf.default.log_martians=1 # sysctl -w net.ipv4.route.flush=1

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSCv7|6.2,CSCv7|6.3,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,LEVEL|1S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1

Policy Value:
cmd: /usr/sbin/sysctl net.ipv4.conf.all.log_martians
expect: ^[\s]*net\.ipv4\.conf\.all\.log_martians[\s]*=[\s]*1[\s]*$
system: Linux

Actual Value:
The command '/usr/sbin/sysctl net.ipv4.conf.all.log_martians' returned : 

net.ipv4.conf.all.log_martians = 0"
"""3.2.4 Ensure suspicious packets are logged - 'net.ipv4.conf.default.log_martians = 1'"" : [FAILED]

When enabled, this feature logs packets with un-routable source addresses to the kernel log.
        Rationale:
        Enabling this feature and logging these packets allows an administrator to investigate the possibility that an attacker is sending spoofed packets to their system.

Solution:
Set the following parameters in /etc/sysctl.conf or a /etc/sysctl.d/* file:
        net.ipv4.conf.all.log_martians = 1 net.ipv4.conf.default.log_martians = 1
        Run the following commands to set the active kernel parameters:
        # sysctl -w net.ipv4.conf.all.log_martians=1 # sysctl -w net.ipv4.conf.default.log_martians=1 # sysctl -w net.ipv4.route.flush=1

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSCv7|6.2,CSCv7|6.3,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,LEVEL|1S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1

Policy Value:
cmd: /usr/sbin/sysctl net.ipv4.conf.default.log_martians
expect: ^[\s]*net\.ipv4\.conf\.default\.log_martians[\s]*=[\s]*1[\s]*$
system: Linux

Actual Value:
The command '/usr/sbin/sysctl net.ipv4.conf.default.log_martians' returned : 

net.ipv4.conf.default.log_martians = 0"
"""3.2.7 Ensure Reverse Path Filtering is enabled - files 'net.ipv4.conf.default.rp_filter = 1'"" : [FAILED]

Setting net.ipv4.conf.all.rp_filter and net.ipv4.conf.default.rp_filter to 1 forces the Linux kernel to utilize reverse path filtering on a received packet to determine if the packet was valid. Essentially, with reverse path filtering, if the return packet does not go out the same interface that the corresponding source packet came from, the packet is dropped (and logged if log_martians is set).
        Rationale:
        Setting these flags is a good way to deter attackers from sending your system bogus packets that cannot be responded to. One instance where this feature breaks down is if asymmetrical routing is employed. This would occur when using dynamic routing protocols (bgp, ospf, etc) on your system. If you are using asymmetrical routing on your system, you will not be able to enable this feature without breaking the routing.

Solution:
Run the following command to restore the default net.ipv4.conf.all.rp_filter = 1 parameter and set the active kernel parameter:
        # grep -Els ""^s*net.ipv4.conf.all.rp_filters*=s*0"" /etc/sysctl.conf /etc/sysctl.d/*.conf /usr/lib/sysctl.d/*.conf /run/sysctl.d/*.conf | while read filename; do sed -ri ""s/^s*(net.ipv4.net.ipv4.conf.all.rp_filters*)(=)(s*S+b).*$/# *REMOVED* 1/"" $filename; done; sysctl -w net.ipv4.conf.all.rp_filter=1; sysctl -w net.ipv4.route.flush=1
        Set the following parameter in /etc/sysctl.conf or a /etc/sysctl.d/* file:
        net.ipv4.conf.default.rp_filter=1
        Run the following commands to set the active kernel parameter:
        # sysctl -w net.ipv4.conf.default.rp_filter=1 # sysctl -w net.ipv4.route.flush=1

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|5.1,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/bin/grep -s -E '^[[:space:]]*net\.ipv4\.conf\.default\.rp_filter[[:space:]]*=[[:space:]]*1[[:space:]]*$' /etc/sysctl.conf /etc/sysctl.d/*.conf /usr/lib/sysctl.d/*.conf /run/sysctl.d/*.conf | /usr/bin/awk '{print} END {if (NR != 0) print ""pass"" ; else print ""fail""}'
expect: ^pass$
system: Linux

Actual Value:
The command '/usr/bin/grep -s -E '^[[:space:]]*net\.ipv4\.conf\.default\.rp_filter[[:space:]]*=[[:space:]]*1[[:space:]]*$' /etc/sysctl.conf /etc/sysctl.d/*.conf /usr/lib/sysctl.d/*.conf /run/sysctl.d/*.conf | /usr/bin/awk '{print} END {if (NR != 0) print ""pass"" ; else print ""fail""}'' returned : 

fail"
"""3.2.7 Ensure Reverse Path Filtering is enabled - 'net.ipv4.conf.default.rp_filter = 1'"" : [FAILED]

Setting net.ipv4.conf.all.rp_filter and net.ipv4.conf.default.rp_filter to 1 forces the Linux kernel to utilize reverse path filtering on a received packet to determine if the packet was valid. Essentially, with reverse path filtering, if the return packet does not go out the same interface that the corresponding source packet came from, the packet is dropped (and logged if log_martians is set).
        Rationale:
        Setting these flags is a good way to deter attackers from sending your system bogus packets that cannot be responded to. One instance where this feature breaks down is if asymmetrical routing is employed. This would occur when using dynamic routing protocols (bgp, ospf, etc) on your system. If you are using asymmetrical routing on your system, you will not be able to enable this feature without breaking the routing.

Solution:
Run the following command to restore the default net.ipv4.conf.all.rp_filter = 1 parameter and set the active kernel parameter:
        # grep -Els ""^s*net.ipv4.conf.all.rp_filters*=s*0"" /etc/sysctl.conf /etc/sysctl.d/*.conf /usr/lib/sysctl.d/*.conf /run/sysctl.d/*.conf | while read filename; do sed -ri ""s/^s*(net.ipv4.net.ipv4.conf.all.rp_filters*)(=)(s*S+b).*$/# *REMOVED* 1/"" $filename; done; sysctl -w net.ipv4.conf.all.rp_filter=1; sysctl -w net.ipv4.route.flush=1
        Set the following parameter in /etc/sysctl.conf or a /etc/sysctl.d/* file:
        net.ipv4.conf.default.rp_filter=1
        Run the following commands to set the active kernel parameter:
        # sysctl -w net.ipv4.conf.default.rp_filter=1 # sysctl -w net.ipv4.route.flush=1

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|5.1,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/sysctl net.ipv4.conf.default.rp_filter
expect: ^[\s]*net\.ipv4\.conf\.default\.rp_filter[\s]*=[\s]*1[\s]*$
system: Linux

Actual Value:
The command '/usr/sbin/sysctl net.ipv4.conf.default.rp_filter' returned : 

net.ipv4.conf.default.rp_filter = 0"
"""3.2.9 Ensure IPv6 router advertisements are not accepted - 'net.ipv6.conf.all.accept_ra = 0'"" : [FAILED]

This setting disables the system's ability to accept IPv6 router advertisements.
        Rationale:
        It is recommended that systems do not accept router advertisements as they could be tricked into routing traffic to compromised machines. Setting hard routes within the system (usually a single default route to a trusted router) protects the system from bad routes.

Solution:
Set the following parameters in /etc/sysctl.conf or a /etc/sysctl.d/* file:
        net.ipv6.conf.all.accept_ra = 0 net.ipv6.conf.default.accept_ra = 0
        Run the following commands to set the active kernel parameters:
        # sysctl -w net.ipv6.conf.all.accept_ra=0
        # sysctl -w net.ipv6.conf.default.accept_ra=0
        # sysctl -w net.ipv6.route.flush=1

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|5.1,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/sysctl net.ipv6.conf.all.accept_ra
expect: ^[\s]*net\.ipv6\.conf\.all\.accept_ra[\s]*=[\s]*0[\s]*$
system: Linux

Actual Value:
The command '/usr/sbin/sysctl net.ipv6.conf.all.accept_ra' returned : 

net.ipv6.conf.all.accept_ra = 1"
"""3.2.9 Ensure IPv6 router advertisements are not accepted - 'net.ipv6.conf.default.accept_ra = 0'"" : [FAILED]

This setting disables the system's ability to accept IPv6 router advertisements.
        Rationale:
        It is recommended that systems do not accept router advertisements as they could be tricked into routing traffic to compromised machines. Setting hard routes within the system (usually a single default route to a trusted router) protects the system from bad routes.

Solution:
Set the following parameters in /etc/sysctl.conf or a /etc/sysctl.d/* file:
        net.ipv6.conf.all.accept_ra = 0 net.ipv6.conf.default.accept_ra = 0
        Run the following commands to set the active kernel parameters:
        # sysctl -w net.ipv6.conf.all.accept_ra=0
        # sysctl -w net.ipv6.conf.default.accept_ra=0
        # sysctl -w net.ipv6.route.flush=1

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|5.1,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/sysctl net.ipv6.conf.default.accept_ra
expect: ^[\s]*net\.ipv6\.conf\.default\.accept_ra[\s]*=[\s]*0[\s]*$
system: Linux

Actual Value:
The command '/usr/sbin/sysctl net.ipv6.conf.default.accept_ra' returned : 

net.ipv6.conf.default.accept_ra = 1"
"""3.4.2.4 Ensure default zone is set"" : [WARNING]

A firewall zone defines the trust level for a connection, interface or source address binding. This is a one to many relation, which means that a connection, interface or source can only be part of one zone, but a zone can be used for many network connections, interfaces and sources.
        The default zone is the zone that is used for everything that is not explicitely bound/assigned to another zone.
        That means that if there is no zone assigned to a connection, interface or source, only the default zone is used. The default zone is not always listed as being used for an interface or source as it will be used for it either way. This depends on the manager of the interfaces.
        Connections handled by NetworkManager are listed as NetworkManager requests to add the zone binding for the interface used by the connection. Also interfaces under control of the network service are listed also because the service requests it.
        Rationale:
        Because the default zone is the zone that is used for everything that is not explicitly bound/assigned to another zone, it is important for the default zone to set

        NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
Run the following command to set the default zone:
        # firewall-cmd --set-default-zone=<NAME_OF_ZONE>
            Example:
            # firewall-cmd --set-default-zone=public

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-171|3.13.5,800-53|SC-7,CN-L3|8.1.10.6(j),CSCv7|9.4,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7,LEVEL|1S,NESA|T4.5.4,NIAv2|GS1,NIAv2|GS2a,NIAv2|GS2b,TBA-FIISB|43.1

Policy Value:
cmd: /usr/bin/firewall-cmd --get-default-zone
expect: 
system: Linux

Actual Value:
The command '/usr/bin/firewall-cmd --get-default-zone' returned : 

public"
"""3.4.2.5 Ensure network interfaces are assigned to appropriate zone"" : [WARNING]

firewall zones define the trust level of network connections or interfaces.
        Rationale:
        A network interface not assigned to the appropriate zone can allow unexpected or undesired network traffic to be accepted on the interface

        NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
Run the following command to assign an interface to the approprate zone.
        # firewall-cmd --zone=<Zone NAME> --change-interface=<INTERFACE NAME>
            Example:
            # firewall-cmd --zone=customezone --change-interface=eth0
            Impact:
            Changing firewall settings while connected over network can result in being locked out of the system.
            Default Value:
            If the zone is not set in the configuration file, the interfaces will be assigned to the default zone defined in the firewalld configuration

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-171|3.13.5,800-53|SC-7,CN-L3|8.1.10.6(j),CSCv7|9.4,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7,LEVEL|1NS,NESA|T4.5.4,NIAv2|GS1,NIAv2|GS2a,NIAv2|GS2b,TBA-FIISB|43.1

Policy Value:
cmd: /usr/bin/nmcli -t connection show | /usr/bin/awk -F: '{if($4){print $4}}' | while read INT; do /usr/bin/firewall-cmd --get-active-zones | /usr/bin/grep -B1 $INT; done
expect: 
system: Linux

Actual Value:
The command '/usr/bin/nmcli -t connection show | /usr/bin/awk -F: '{if($4){print $4}}' | while read INT; do /usr/bin/firewall-cmd --get-active-zones | /usr/bin/grep -B1 $INT; done' returned : 

public
  interfaces: eth1 eth2
public
  interfaces: eth1 eth2"
"""3.4.2.6 Ensure unnecessary services and ports are not accepted"" : [WARNING]

Services and ports can be accepted or explicitly rejected or dropped by a zone.
        For every zone, you can set a default behavior that handles incoming traffic that is not further specified. Such behavior is defined by setting the target of the zone. There are three options - default, ACCEPT, REJECT, and DROP.
        By setting the target to ACCEPT, you accept all incoming packets except those disabled by a specific rule.
        If you set the target to REJECT or DROP, you disable all incoming packets except those that you have allowed in specific rules. When packets are rejected, the source machine is informed about the rejection, while there is no information sent when the packets are dropped.
        Rationale:
        To reduce the attack surface of a system, all services and ports should be blocked unless required

        NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
Run the following command to remove an unnecessary service:
        # firewall-cmd --remove-service=<service>
            Example:
            #firewall-cmd --remove-service=cockpit
            Run the following command to remove an unnecessary port:
            # firewall-cmd --remove-port=<port-number>/<port-type>
                Example:
                # firewall-cmd --remove-port=25/tcp
                Run the following command to make new settings persistent:
                # firewall-cmd --runtime-to-permanent

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-171|3.13.5,800-53|SC-7,CN-L3|8.1.10.6(j),CSCv7|9.4,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7,LEVEL|1NS,NESA|T4.5.4,NIAv2|GS1,NIAv2|GS2a,NIAv2|GS2b,TBA-FIISB|43.1

Policy Value:
cmd: /usr/bin/firewall-cmd --get-active-zones | /usr/bin/awk '!/:/ {print $1}' | while read ZN; do /usr/bin/firewall-cmd --list-all --zone=$ZN; done
expect: 
system: Linux

Actual Value:
The command '/usr/bin/firewall-cmd --get-active-zones | /usr/bin/awk '!/:/ {print $1}' | while read ZN; do /usr/bin/firewall-cmd --list-all --zone=$ZN; done' returned : 

public (active)
  target: DROP
  icmp-block-inversion: no
  interfaces: eth1 eth2
  sources: 
  services: cockpit dhcpv6-client ssh
  ports: 
  protocols: 
  masquerade: no
  forward-ports: 
  source-ports: 
  icmp-blocks: 
  rich rules:"
"""3.4.3.1 Ensure iptables are flushed - ipv4"" : [WARNING]

nftables is a replacement for iptables, ip6tables, ebtables and arptables
        Rationale:
        It is possible to mix iptables and nftables. However, this increases complexity and also the chance to introduce errors. For simplicity flush out all iptables rules, and ensure it is not loaded

        NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
Run the following commands to flush iptables: For iptables:
        # iptables -F
        For ip6tables
        # ip6tables -F

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.4.6,800-171|3.4.7,800-53|CM-7,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv7|9.4,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7,LEVEL|1NS,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,NIAv2|SS15a,SWIFT-CSCv1|2.3

Policy Value:
cmd: /usr/sbin/iptables -L
expect: 
system: Linux

Actual Value:
The command '/usr/sbin/iptables -L' returned : 

Chain INPUT (policy ACCEPT)
target     prot opt source               destination         

Chain FORWARD (policy ACCEPT)
target     prot opt source               destination         

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination"
"""3.4.3.1 Ensure iptables are flushed - ipv6"" : [WARNING]

nftables is a replacement for iptables, ip6tables, ebtables and arptables
        Rationale:
        It is possible to mix iptables and nftables. However, this increases complexity and also the chance to introduce errors. For simplicity flush out all iptables rules, and ensure it is not loaded

        NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
Run the following commands to flush iptables: For iptables:
        # iptables -F
        For ip6tables
        # ip6tables -F

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.4.6,800-171|3.4.7,800-53|CM-7,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv7|9.4,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7,LEVEL|1NS,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,NIAv2|SS15a,SWIFT-CSCv1|2.3

Policy Value:
cmd: /usr/sbin/ip6tables -L
expect: 
system: Linux

Actual Value:
The command '/usr/sbin/ip6tables -L' returned : 

Chain INPUT (policy ACCEPT)
target     prot opt source               destination         

Chain FORWARD (policy ACCEPT)
target     prot opt source               destination         

Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination"
"""3.4.3.3 Ensure base chains exist - 'hook forward'"" : [FAILED]

Chains are containers for rules. They exist in two kinds, base chains and regular chains. A base chain is an entry point for packets from the networking stack, a regular chain may be used as jump target and is used for better rule organization.
        Rationale:
        If a base chain doesn't exist with a hook for input, forward, and delete, packets that would flow through those chains will not be touched by nftables.

Solution:
Run the following command to create the base chains:
        # nft create chain inet <table name> <base chain name> { type filter hook <(input|forward|output)> priority 0 ; }
            Example:
            # nft create chain inet filter input { type filter hook input priority 0 ; }  # nft create chain inet filter forward { type filter hook forward priority 0 ; }  # nft create chain inet filter output { type filter hook output priority 0 ; }
            Impact:
            if configuring nftables over ssh, creating a base chain with a policy of drop will cause loss of connectivity.
            Ensure that a rule allowing ssh has been added to the base chain prior to setting the base chain's policy to drop

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|9.4,CSF|PR.AC-5,CSF|PR.PT-4,ITSG-33|SC-7(12),LEVEL|1S,NESA|T4.5.3,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/nft list ruleset | /usr/bin/grep 'hook forward'
expect: type[\s]+filter[\s]+hook[\s]+forward[\s]+priority[\s]+0;
system: Linux

Actual Value:
The command '/usr/sbin/nft list ruleset | /usr/bin/grep 'hook forward'' returned : 

type filter hook forward priority filter; policy accept;
		type filter hook forward priority filter; policy accept;
		type filter hook forward priority filter; policy accept;
		type filter hook forward priority 150; policy accept;
		type filter hook forward priority mangle; policy accept;
		type filter hook forward priority 150; policy accept;
		type filter hook forward priority mangle; policy accept;
		type filter hook forward priority filter + 10; policy accept;"
"""3.4.3.3 Ensure base chains exist - 'hook input'"" : [FAILED]

Chains are containers for rules. They exist in two kinds, base chains and regular chains. A base chain is an entry point for packets from the networking stack, a regular chain may be used as jump target and is used for better rule organization.
        Rationale:
        If a base chain doesn't exist with a hook for input, forward, and delete, packets that would flow through those chains will not be touched by nftables.

Solution:
Run the following command to create the base chains:
        # nft create chain inet <table name> <base chain name> { type filter hook <(input|forward|output)> priority 0 ; }
            Example:
            # nft create chain inet filter input { type filter hook input priority 0 ; }  # nft create chain inet filter forward { type filter hook forward priority 0 ; }  # nft create chain inet filter output { type filter hook output priority 0 ; }
            Impact:
            if configuring nftables over ssh, creating a base chain with a policy of drop will cause loss of connectivity.
            Ensure that a rule allowing ssh has been added to the base chain prior to setting the base chain's policy to drop

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|9.4,CSF|PR.AC-5,CSF|PR.PT-4,ITSG-33|SC-7(12),LEVEL|1S,NESA|T4.5.3,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/nft list ruleset | /usr/bin/grep 'hook input'
expect: type[\s]+filter[\s]+hook[\s]+input[\s]+priority[\s]+0;
system: Linux

Actual Value:
The command '/usr/sbin/nft list ruleset | /usr/bin/grep 'hook input'' returned : 

type filter hook input priority filter; policy accept;
		type filter hook input priority filter; policy accept;
		type filter hook input priority filter; policy accept;
		type filter hook input priority 150; policy accept;
		type filter hook input priority mangle; policy accept;
		type nat hook input priority 100; policy accept;
		type filter hook input priority 150; policy accept;
		type filter hook input priority mangle; policy accept;
		type nat hook input priority 100; policy accept;
		type filter hook input priority filter + 10; policy accept;"
"""3.4.3.3 Ensure base chains exist - 'hook output'"" : [FAILED]

Chains are containers for rules. They exist in two kinds, base chains and regular chains. A base chain is an entry point for packets from the networking stack, a regular chain may be used as jump target and is used for better rule organization.
        Rationale:
        If a base chain doesn't exist with a hook for input, forward, and delete, packets that would flow through those chains will not be touched by nftables.

Solution:
Run the following command to create the base chains:
        # nft create chain inet <table name> <base chain name> { type filter hook <(input|forward|output)> priority 0 ; }
            Example:
            # nft create chain inet filter input { type filter hook input priority 0 ; }  # nft create chain inet filter forward { type filter hook forward priority 0 ; }  # nft create chain inet filter output { type filter hook output priority 0 ; }
            Impact:
            if configuring nftables over ssh, creating a base chain with a policy of drop will cause loss of connectivity.
            Ensure that a rule allowing ssh has been added to the base chain prior to setting the base chain's policy to drop

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|9.4,CSF|PR.AC-5,CSF|PR.PT-4,ITSG-33|SC-7(12),LEVEL|1S,NESA|T4.5.3,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/nft list ruleset | /usr/bin/grep 'hook output'
expect: type[\s]+filter[\s]+hook[\s]+output[\s]+priority[\s]+0;
system: Linux

Actual Value:
The command '/usr/sbin/nft list ruleset | /usr/bin/grep 'hook output'' returned : 

type filter hook output priority filter; policy accept;
		type filter hook output priority filter; policy accept;
		type filter hook output priority filter; policy accept;
		type filter hook output priority 150; policy accept;
		type filter hook output priority raw; policy accept;
		type route hook output priority mangle; policy accept;
		type nat hook output priority -100; policy accept;
		type filter hook output priority 150; policy accept;
		type filter hook output priority raw; policy accept;
		type route hook output priority mangle; policy accept;
		type nat hook output priority -100; policy accept;
		type filter hook output priority out; policy accept;
		type filter hook output priority filter + 10; policy accept;"
"""3.4.3.4 Ensure loopback traffic is configured"" : [WARNING]

Configure the loopback interface to accept traffic. Configure all other interfaces to deny traffic to the loopback network
        Rationale:
        Loopback traffic is generated between processes on machine and is typically critical to operation of the system. The loopback interface is the only place that loopback network traffic should be seen, all other interfaces should ignore traffic on this network as an anti-spoofing measure.

        NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
Run the following commands to implement the loopback rules:
        # nft add rule inet filter input iif lo accept
        # nft create rule inet filter input ip saddr 127.0.0.0/8 counter drop
        # nft add rule inet filter input ip6 saddr ::1 counter drop

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|19.4,CSCv7|9.4,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/iptables -L INPUT -v -n; /usr/sbin/iptables -L OUTPUT -v -n
expect: ManualReviewRequired
system: Linux

Actual Value:
The command '/usr/sbin/iptables -L INPUT -v -n; /usr/sbin/iptables -L OUTPUT -v -n' returned : 

Chain INPUT (policy ACCEPT 15129 packets, 1291K bytes)
 pkts bytes target     prot opt in     out     source               destination         
Chain OUTPUT (policy ACCEPT 5393 packets, 1172K bytes)
 pkts bytes target     prot opt in     out     source               destination"
"""3.4.3.5 Ensure outbound and established connections are configured"" : [WARNING]

Configure the firewall rules for new outbound, and established connections
        Rationale:
        If rules are not in place for new outbound, and established connections all packets will be dropped by the default policy preventing network usage.

        NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
Configure nftables in accordance with site policy. The following commands will implement a policy to allow all outbound connections and all established connections:
        # nft add rule inet filter input ip protocol tcp ct state established accept  # nft add rule inet filter input ip protocol udp ct state established accept  # nft add rule inet filter input ip protocol icmp ct state established accept  # nft add rule inet filter output ip protocol tcp ct state new,related,established accept  # nft add rule inet filter output ip protocol udp ct state new,related,established accept  # nft add rule inet filter output ip protocol icmp ct state new,related,established accept

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|9.4,ITSG-33|SC-7(12),LEVEL|1NS,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/iptables -L -v -n
expect: ManualReviewRequired
system: Linux

Actual Value:
The command '/usr/sbin/iptables -L -v -n' returned : 

Chain INPUT (policy ACCEPT 15138 packets, 1292K bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain OUTPUT (policy ACCEPT 5401 packets, 1173K bytes)
 pkts bytes target     prot opt in     out     source               destination"
"""3.4.3.6 Ensure default deny firewall policy - Chain FORWARD"" : [FAILED]

Base chain policy is the default verdict that will be applied to packets reaching the end of the chain.
        Rationale:
        There are two policies: accept (Default) and drop. If the policy is set to accept, the firewall will accept any packet that is not configured to be denied and the packet will continue transversing the network stack.
        It is easier to white list acceptable usage than to black list unacceptable usage.

Solution:
Run the following command for the base chains with the input, forward, and output hooks to implement a default DROP policy:
        # nft chain <table family> <table name> <chain name> { policy drop ; }
            Example:
            # nft chain inet filter input { policy drop ; }  # nft chain inet filter forward { policy drop ; }  # nft chain inet filter output { policy drop ; }
            Impact:
            if configuring nftables over ssh, creating a base chain with a policy of drop will cause loss of connectivity.
            Ensure that a rule allowing ssh has been added to the base chain prior to setting the base chain's policy to drop
            Default Value:
            accept

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|9.4,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/iptables --list | /usr/bin/grep 'Chain FORWARD'
expect: ^Chain FORWARD \(policy (DROP|REJECT)\)
regex: ^Chain FORWARD \(policy (DROP|REJECT)\)
system: Linux

Actual Value:
The command '/usr/sbin/iptables --list | /usr/bin/grep 'Chain FORWARD'' returned : 

Chain FORWARD (policy ACCEPT)"
"""3.4.3.6 Ensure default deny firewall policy - Chain INPUT"" : [FAILED]

Base chain policy is the default verdict that will be applied to packets reaching the end of the chain.
        Rationale:
        There are two policies: accept (Default) and drop. If the policy is set to accept, the firewall will accept any packet that is not configured to be denied and the packet will continue transversing the network stack.
        It is easier to white list acceptable usage than to black list unacceptable usage.

Solution:
Run the following command for the base chains with the input, forward, and output hooks to implement a default DROP policy:
        # nft chain <table family> <table name> <chain name> { policy drop ; }
            Example:
            # nft chain inet filter input { policy drop ; }  # nft chain inet filter forward { policy drop ; }  # nft chain inet filter output { policy drop ; }
            Impact:
            if configuring nftables over ssh, creating a base chain with a policy of drop will cause loss of connectivity.
            Ensure that a rule allowing ssh has been added to the base chain prior to setting the base chain's policy to drop
            Default Value:
            accept

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|9.4,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/iptables --list | /usr/bin/grep 'Chain INPUT'
expect: ^Chain INPUT \(policy (DROP|REJECT)\)
regex: ^Chain INPUT \(policy (DROP|REJECT)\)
system: Linux

Actual Value:
The command '/usr/sbin/iptables --list | /usr/bin/grep 'Chain INPUT'' returned : 

Chain INPUT (policy ACCEPT)"
"""3.4.3.6 Ensure default deny firewall policy - Chain OUTPUT"" : [FAILED]

Base chain policy is the default verdict that will be applied to packets reaching the end of the chain.
        Rationale:
        There are two policies: accept (Default) and drop. If the policy is set to accept, the firewall will accept any packet that is not configured to be denied and the packet will continue transversing the network stack.
        It is easier to white list acceptable usage than to black list unacceptable usage.

Solution:
Run the following command for the base chains with the input, forward, and output hooks to implement a default DROP policy:
        # nft chain <table family> <table name> <chain name> { policy drop ; }
            Example:
            # nft chain inet filter input { policy drop ; }  # nft chain inet filter forward { policy drop ; }  # nft chain inet filter output { policy drop ; }
            Impact:
            if configuring nftables over ssh, creating a base chain with a policy of drop will cause loss of connectivity.
            Ensure that a rule allowing ssh has been added to the base chain prior to setting the base chain's policy to drop
            Default Value:
            accept

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|9.4,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/iptables --list | /usr/bin/grep 'Chain OUTPUT'
expect: ^Chain OUTPUT \(policy (DROP|REJECT)\)
regex: ^Chain OUTPUT \(policy (DROP|REJECT)\)
system: Linux

Actual Value:
The command '/usr/sbin/iptables --list | /usr/bin/grep 'Chain OUTPUT'' returned : 

Chain OUTPUT (policy ACCEPT)"
"""3.4.3.7 Ensure nftables service is enabled"" : [FAILED]

The nftables service allows for the loading of nftables rulesets during boot, or starting of the nftables service
        Rationale:
        The nftables service restores the nftables rules from the rules files referenced in the /etc/sysconfig/nftables.conf file durring boot or the starting of the nftables service

Solution:
Run the following command to enable the nftables service:
        # systemctl --now enable nftables

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.4.6,800-171|3.4.7,800-53|CM-7,CIP|007-6-R1,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv7|9.4,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7,LEVEL|1S,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,NIAv2|SS15a,PCI-DSSv3.1|2.2.2,PCI-DSSv3.1|2.2.3,PCI-DSSv3.2|2.2.2,PCI-DSSv3.2|2.2.3,SWIFT-CSCv1|2.3

Policy Value:
cmd: /usr/bin/systemctl is-enabled nftables | /usr/bin/awk '{print} END {if(NR==0) print ""disabled"" }'
dont_echo_cmd: YES
expect: enabled
system: Linux

Actual Value:
The command returned : 

disabled"
"""3.4.3.8 Ensure nftables rules are permanent"" : [WARNING]

nftables is a subsystem of the Linux kernel providing filtering and classification of network packets/datagrams/frames.
        The nftables service reads the /etc/sysconfig/nftables.conf file for a nftables file or files to include in the nftables ruleset.
        A nftables ruleset containing the input, forward, and output base chains allow network traffic to be filtered.
        Rationale:
        Changes made to nftables ruleset only affect the live system, you will also need to configure the nftables ruleset to apply on boot

        NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
Edit the /etc/sysconfig/nftables.conf file and un-comment or add a line with include <Absolute path to nftables rules file> for each nftables file you want included in the nftables ruleset on boot example:
            # vi /etc/sysconfig/nftables.conf
            Add the line:
            include ""/etc/nftables/nftables.rules""

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.1,800-171|3.1.2,800-53|AC-3(3),CSCv7|9.4,CSF|PR.AC-4,CSF|PR.PT-3,ITSG-33|AC-3(3),LEVEL|1S,NESA|T5.5.4,NESA|T7.5.3

Policy Value:
cmd: /usr/bin/cat /etc/sysconfig/nftables.conf
expect: 
system: Linux

Actual Value:
The command '/usr/bin/cat /etc/sysconfig/nftables.conf' returned : 

# Uncomment the include statement here to load the default config sample
# in /etc/nftables for nftables service.

#include ""/etc/nftables/main.nft""

# To customize, either edit the samples in /etc/nftables, append further
# commands to the end of this file or overwrite it after first service
# start by calling: 'nft list ruleset >/etc/sysconfig/nftables.conf'."
"""3.4.4.1.1 Ensure default deny firewall policy - Chain FORWARD"" : [FAILED]

A default deny all policy on connections ensures that any unconfigured network usage will be rejected.
        Rationale:
        With a default accept policy the firewall will accept any packet that is not configured to be denied. It is easier to white list acceptable usage than to black list unacceptable usage.

Solution:
Run the following commands to implement a default DROP policy:
        # iptables -P INPUT DROP # iptables -P OUTPUT DROP # iptables -P FORWARD DROP
        Notes:
        Changing firewall settings while connected over network can result in being locked out of the system.
        Remediation will only affect the active system firewall, be sure to configure the default policy in your firewall management to apply on boot as well.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|9.4,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/iptables --list | /usr/bin/grep 'Chain FORWARD'
expect: ^Chain FORWARD \(policy (DROP|REJECT)\)
regex: ^Chain FORWARD \(policy (DROP|REJECT)\)
system: Linux

Actual Value:
The command '/usr/sbin/iptables --list | /usr/bin/grep 'Chain FORWARD'' returned : 

Chain FORWARD (policy ACCEPT)"
"""3.4.4.1.1 Ensure default deny firewall policy - Chain INPUT"" : [FAILED]

A default deny all policy on connections ensures that any unconfigured network usage will be rejected.
        Rationale:
        With a default accept policy the firewall will accept any packet that is not configured to be denied. It is easier to white list acceptable usage than to black list unacceptable usage.

Solution:
Run the following commands to implement a default DROP policy:
        # iptables -P INPUT DROP # iptables -P OUTPUT DROP # iptables -P FORWARD DROP
        Notes:
        Changing firewall settings while connected over network can result in being locked out of the system.
        Remediation will only affect the active system firewall, be sure to configure the default policy in your firewall management to apply on boot as well.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|9.4,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/iptables --list | /usr/bin/grep 'Chain INPUT'
expect: ^Chain INPUT \(policy (DROP|REJECT)\)
regex: ^Chain INPUT \(policy (DROP|REJECT)\)
system: Linux

Actual Value:
The command '/usr/sbin/iptables --list | /usr/bin/grep 'Chain INPUT'' returned : 

Chain INPUT (policy ACCEPT)"
"""3.4.4.1.1 Ensure default deny firewall policy - Chain OUTPUT"" : [FAILED]

A default deny all policy on connections ensures that any unconfigured network usage will be rejected.
        Rationale:
        With a default accept policy the firewall will accept any packet that is not configured to be denied. It is easier to white list acceptable usage than to black list unacceptable usage.

Solution:
Run the following commands to implement a default DROP policy:
        # iptables -P INPUT DROP # iptables -P OUTPUT DROP # iptables -P FORWARD DROP
        Notes:
        Changing firewall settings while connected over network can result in being locked out of the system.
        Remediation will only affect the active system firewall, be sure to configure the default policy in your firewall management to apply on boot as well.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|9.4,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/iptables --list | /usr/bin/grep 'Chain OUTPUT'
expect: ^Chain OUTPUT \(policy (DROP|REJECT)\)
regex: ^Chain OUTPUT \(policy (DROP|REJECT)\)
system: Linux

Actual Value:
The command '/usr/sbin/iptables --list | /usr/bin/grep 'Chain OUTPUT'' returned : 

Chain OUTPUT (policy ACCEPT)"
"""3.4.4.1.2 Ensure loopback traffic is configured"" : [WARNING]

Configure the loopback interface to accept traffic. Configure all other interfaces to deny traffic to the loopback network (127.0.0.0/8).
        Rationale:
        Loopback traffic is generated between processes on machine and is typically critical to operation of the system. The loopback interface is the only place that loopback network (127.0.0.0/8) traffic should be seen, all other interfaces should ignore traffic on this network as an anti-spoofing measure.

        NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
Run the following commands to implement the loopback rules:
        # iptables -A INPUT -i lo -j ACCEPT # iptables -A OUTPUT -o lo -j ACCEPT # iptables -A INPUT -s 127.0.0.0/8 -j DROP
        Notes:
        Changing firewall settings while connected over network can result in being locked out of the system.
        Remediation will only affect the active system firewall, be sure to configure the default policy in your firewall management to apply on boot as well.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|9.4,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/iptables -L INPUT -v -n; /usr/sbin/iptables -L OUTPUT -v -n
expect: ManualReviewRequired
system: Linux

Actual Value:
The command '/usr/sbin/iptables -L INPUT -v -n; /usr/sbin/iptables -L OUTPUT -v -n' returned : 

Chain INPUT (policy ACCEPT 15226 packets, 1302K bytes)
 pkts bytes target     prot opt in     out     source               destination         
Chain OUTPUT (policy ACCEPT 5487 packets, 1186K bytes)
 pkts bytes target     prot opt in     out     source               destination"
"""3.4.4.1.3 Ensure outbound and established connections are configured"" : [WARNING]

Configure the firewall rules for new outbound, and established connections.
        Rationale:
        If rules are not in place for new outbound, and established connections all packets will be dropped by the default policy preventing network usage.

        NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
Configure iptables in accordance with site policy. The following commands will implement a policy to allow all outbound connections and all established connections:
        # iptables -A OUTPUT -p tcp -m state --state NEW,ESTABLISHED -j ACCEPT # iptables -A OUTPUT -p udp -m state --state NEW,ESTABLISHED -j ACCEPT # iptables -A OUTPUT -p icmp -m state --state NEW,ESTABLISHED -j ACCEPT # iptables -A INPUT -p tcp -m state --state ESTABLISHED -j ACCEPT # iptables -A INPUT -p udp -m state --state ESTABLISHED -j ACCEPT # iptables -A INPUT -p icmp -m state --state ESTABLISHED -j ACCEPT
        Notes:
        Changing firewall settings while connected over network can result in being locked out of the system.
        Remediation will only affect the active system firewall, be sure to configure the default policy in your firewall management to apply on boot as well.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|9.4,ITSG-33|SC-7(12),LEVEL|1NS,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/iptables -L -v -n
expect: ManualReviewRequired
system: Linux

Actual Value:
The command '/usr/sbin/iptables -L -v -n' returned : 

Chain INPUT (policy ACCEPT 15241 packets, 1304K bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain OUTPUT (policy ACCEPT 5503 packets, 1189K bytes)
 pkts bytes target     prot opt in     out     source               destination"
"""3.4.4.1.4 Ensure firewall rules exist for all open ports"" : [WARNING]

Any ports that have been opened on non-loopback addresses need firewall rules to govern traffic.
        Rationale:
        Without a firewall rule configured for open ports default firewall policy will drop all packets to these ports.

        NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
For each port identified in the audit which does not have a firewall rule establish a proper rule for accepting inbound connections:
        # iptables -A INPUT -p <protocol> --dport <port> -m state --state NEW -j ACCEPT
            Notes:
            Changing firewall settings while connected over network can result in being locked out of the system.
            Remediation will only affect the active system firewall, be sure to configure the default policy in your firewall management to apply on boot as well.
            The remediation command opens up the port to traffic from all sources. Consult iptables documentation and set any restrictions in compliance with site policy.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|9.2,CSCv7|9.4,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/bin/netstat -ln; /usr/sbin/iptables -L INPUT -v -n
expect: ManualReviewRequired
system: Linux

Actual Value:
The command '/usr/bin/netstat -ln; /usr/sbin/iptables -L INPUT -v -n' returned : 

bash: /usr/bin/netstat: No such file or directory
Chain INPUT (policy ACCEPT 15261 packets, 1306K bytes)
 pkts bytes target     prot opt in     out     source               destination"
"""3.4.4.2.1 Ensure IPv6 default deny firewall policy - 'Chain FORWARD'"" : [FAILED]

A default deny all policy on connections ensures that any unconfigured network usage will be rejected.
        Rationale:
        With a default accept policy the firewall will accept any packet that is not configured to be denied. It is easier to white list acceptable usage than to black list unacceptable usage.

Solution:
Run the following commands to implement a default DROP policy:
        # ip6tables -P INPUT DROP # ip6tables -P OUTPUT DROP # ip6tables -P FORWARD DROP
        Notes:
        Changing firewall settings while connected over network can result in being locked out of the system.
        Remediation will only affect the active system firewall, be sure to configure the default policy in your firewall management to apply on boot as well.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|9.4,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/ip6tables --list | /usr/bin/grep 'Chain FORWARD'
expect: ^Chain FORWARD \(policy (DROP|REJECT)\)
system: Linux

Actual Value:
The command '/usr/sbin/ip6tables --list | /usr/bin/grep 'Chain FORWARD'' returned : 

Chain FORWARD (policy ACCEPT)"
"""3.4.4.2.1 Ensure IPv6 default deny firewall policy - 'Chain INPUT'"" : [FAILED]

A default deny all policy on connections ensures that any unconfigured network usage will be rejected.
        Rationale:
        With a default accept policy the firewall will accept any packet that is not configured to be denied. It is easier to white list acceptable usage than to black list unacceptable usage.

Solution:
Run the following commands to implement a default DROP policy:
        # ip6tables -P INPUT DROP # ip6tables -P OUTPUT DROP # ip6tables -P FORWARD DROP
        Notes:
        Changing firewall settings while connected over network can result in being locked out of the system.
        Remediation will only affect the active system firewall, be sure to configure the default policy in your firewall management to apply on boot as well.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|9.4,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/ip6tables --list | /usr/bin/grep 'Chain INPUT'
expect: ^Chain INPUT \(policy (DROP|REJECT)\)
system: Linux

Actual Value:
The command '/usr/sbin/ip6tables --list | /usr/bin/grep 'Chain INPUT'' returned : 

Chain INPUT (policy ACCEPT)"
"""3.4.4.2.1 Ensure IPv6 default deny firewall policy - 'Chain OUTPUT'"" : [FAILED]

A default deny all policy on connections ensures that any unconfigured network usage will be rejected.
        Rationale:
        With a default accept policy the firewall will accept any packet that is not configured to be denied. It is easier to white list acceptable usage than to black list unacceptable usage.

Solution:
Run the following commands to implement a default DROP policy:
        # ip6tables -P INPUT DROP # ip6tables -P OUTPUT DROP # ip6tables -P FORWARD DROP
        Notes:
        Changing firewall settings while connected over network can result in being locked out of the system.
        Remediation will only affect the active system firewall, be sure to configure the default policy in your firewall management to apply on boot as well.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|9.4,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/ip6tables --list | /usr/bin/grep 'Chain OUTPUT'
expect: ^Chain OUTPUT \(policy (DROP|REJECT)\)
system: Linux

Actual Value:
The command '/usr/sbin/ip6tables --list | /usr/bin/grep 'Chain OUTPUT'' returned : 

Chain OUTPUT (policy ACCEPT)"
"""3.4.4.2.2 Ensure IPv6 loopback traffic is configured"" : [WARNING]

Configure the loopback interface to accept traffic. Configure all other interfaces to deny traffic to the loopback network (::1).
                Rationale:
                Loopback traffic is generated between processes on machine and is typically critical to operation of the system. The loopback interface is the only place that loopback network (::1) traffic should be seen, all other interfaces should ignore traffic on this network as an anti-spoofing measure.

                NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
Run the following commands to implement the loopback rules:
                # ip6tables -A INPUT -i lo -j ACCEPT # ip6tables -A OUTPUT -o lo -j ACCEPT # ip6tables -A INPUT -s ::1 -j DROP
                Notes:
                Changing firewall settings while connected over network can result in being locked out of the system.
                Remediation will only affect the active system firewall, be sure to configure the default policy in your firewall management to apply on boot as well.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|9.4,ITSG-33|SC-7(12),LEVEL|1S,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/ip6tables -L INPUT -v -n; /usr/sbin/ip6tables -L OUTPUT -v -n
expect: ManualReviewRequired
system: Linux

Actual Value:
The command '/usr/sbin/ip6tables -L INPUT -v -n; /usr/sbin/ip6tables -L OUTPUT -v -n' returned : 

Chain INPUT (policy ACCEPT 1 packets, 72 bytes)
 pkts bytes target     prot opt in     out     source               destination         
Chain OUTPUT (policy ACCEPT 18 packets, 1104 bytes)
 pkts bytes target     prot opt in     out     source               destination"
"""3.4.4.2.3 Ensure IPv6 outbound and established connections are configured"" : [WARNING]

Configure the firewall rules for new outbound, and established IPv6 connections.
                Rationale:
                If rules are not in place for new outbound, and established connections all packets will be dropped by the default policy preventing network usage.

                NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
Configure iptables in accordance with site policy. The following commands will implement a policy to allow all outbound connections and all established connections:
                # ip6tables -A OUTPUT -p tcp -m state --state NEW,ESTABLISHED -j ACCEPT # ip6tables -A OUTPUT -p udp -m state --state NEW,ESTABLISHED -j ACCEPT # ip6tables -A OUTPUT -p icmp -m state --state NEW,ESTABLISHED -j ACCEPT # ip6tables -A INPUT -p tcp -m state --state ESTABLISHED -j ACCEPT # ip6tables -A INPUT -p udp -m state --state ESTABLISHED -j ACCEPT # ip6tables -A INPUT -p icmp -m state --state ESTABLISHED -j ACCEPT
                Notes:
                Changing firewall settings while connected over network can result in being locked out of the system.
                Remediation will only affect the active system firewall, be sure to configure the default policy in your firewall management to apply on boot as well.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|9.4,ITSG-33|SC-7(12),LEVEL|1NS,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /sbin/ip6tables -L -v -n
expect: 
system: Linux

Actual Value:
The command '/sbin/ip6tables -L -v -n' returned : 

Chain INPUT (policy ACCEPT 1 packets, 72 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain OUTPUT (policy ACCEPT 18 packets, 1104 bytes)
 pkts bytes target     prot opt in     out     source               destination"
"""3.4.4.2.4 Ensure IPv6 firewall rules exist for all open ports - firewall rules"" : [WARNING]

Any ports that have been opened on non-loopback addresses need firewall rules to govern traffic.
                Rationale:
                Without a firewall rule configured for open ports default firewall policy will drop all packets to these ports.

                NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
For each port identified in the audit which does not have a firewall rule establish a proper rule for accepting inbound connections:
                # ip6tables -A INPUT -p <protocol> --dport <port> -m state --state NEW -j ACCEPT
                    Notes:
                    Changing firewall settings while connected over network can result in being locked out of the system.
                    Remediation will only affect the active system firewall, be sure to configure the default policy in your firewall management to apply on boot as well.
                    The remediation command opens up the port to traffic from all sources. Consult iptables documentation and set any restrictions in compliance with site policy.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|9.4,ITSG-33|SC-7(12),LEVEL|1NS,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /sbin/ip6tables -L -v -n
expect: 
system: Linux

Actual Value:
The command '/sbin/ip6tables -L -v -n' returned : 

Chain INPUT (policy ACCEPT 1 packets, 72 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination         

Chain OUTPUT (policy ACCEPT 18 packets, 1104 bytes)
 pkts bytes target     prot opt in     out     source               destination"
"""3.4.4.2.4 Ensure IPv6 firewall rules exist for all open ports - ports"" : [WARNING]

Any ports that have been opened on non-loopback addresses need firewall rules to govern traffic.
                Rationale:
                Without a firewall rule configured for open ports default firewall policy will drop all packets to these ports.

                NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
For each port identified in the audit which does not have a firewall rule establish a proper rule for accepting inbound connections:
                # ip6tables -A INPUT -p <protocol> --dport <port> -m state --state NEW -j ACCEPT
                    Notes:
                    Changing firewall settings while connected over network can result in being locked out of the system.
                    Remediation will only affect the active system firewall, be sure to configure the default policy in your firewall management to apply on boot as well.
                    The remediation command opens up the port to traffic from all sources. Consult iptables documentation and set any restrictions in compliance with site policy.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-53|SC-7(12),CSCv7|9.4,ITSG-33|SC-7(12),LEVEL|1NS,NIAv2|AM38,NIAv2|SS13d,NIAv2|SS26

Policy Value:
cmd: /usr/sbin/ss -6tuln; /usr/sbin/ip6tables -L INPUT -v -n
expect: 
system: Linux

Actual Value:
The command '/usr/sbin/ss -6tuln; /usr/sbin/ip6tables -L INPUT -v -n' returned : 

Netid   State    Recv-Q   Send-Q     Local Address:Port     Peer Address:Port   
tcp     LISTEN   0        128                 [::]:22               [::]:*      
Chain INPUT (policy ACCEPT 1 packets, 72 bytes)
 pkts bytes target     prot opt in     out     source               destination"
"""4.2.1.3 Ensure rsyslog default file permissions configured"" : [FAILED]

rsyslog will create logfiles that do not already exist on the system. This setting controls what permissions will be applied to these newly created files.
        Rationale:
        It is important to ensure that log files have the correct permissions to ensure that sensitive data is archived and protected.

Solution:
Edit the /etc/rsyslog.conf and /etc/rsyslog.d/*.conf files and set $FileCreateMode to 0640 or more restrictive:
        $FileCreateMode 0640

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.3.8,800-53|AU-9,CN-L3|7.1.2.3(d),CN-L3|7.1.3.3(f),CN-L3|8.1.3.5(c),CN-L3|8.1.4.3(c),CSCv7|5.1,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.2,ITSG-33|AU-9,LEVEL|1S,NESA|M5.2.3,NESA|M5.5.2,NESA|T3.6.4,NESA|T8.2.9,NIAv2|SM5,NIAv2|SM6

Policy Value:
cmd: /usr/bin/grep '$FileCreateMode' /etc/rsyslog.conf /etc/rsyslog.d/*.conf
expect: .*?:\$FileCreateMode 0640
system: Linux

Actual Value:
The command '/usr/bin/grep '$FileCreateMode' /etc/rsyslog.conf /etc/rsyslog.d/*.conf' returned : 

/usr/bin/grep: /etc/rsyslog.d/*.conf: No such file or directory"
"""4.2.1.4 Ensure logging is configured"" : [WARNING]

The /etc/rsyslog.conf and /etc/rsyslog.d/*.conf files specifies rules for logging and which files are to be used to log certain classes of messages.
        Rationale:
        A great deal of important security-related information is sent via rsyslog (e.g., successful and failed su attempts, failed login attempts, root login attempts, etc.).

        NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
Edit the following lines in the /etc/rsyslog.conf and /etc/rsyslog.d/*.conf files as appropriate for your environment:
        *.emerg                                  :omusrmsg:* auth,authpriv.*                          /var/log/secure mail.*                                  -/var/log/mail mail.info                               -/var/log/mail.info mail.warning                            -/var/log/mail.warn mail.err                                 /var/log/mail.err news.crit                               -/var/log/news/news.crit news.err                                -/var/log/news/news.err news.notice                             -/var/log/news/news.notice *.=warning;*.=err                       -/var/log/warn *.crit                                   /var/log/warn *.*;mail.none;news.none                 -/var/log/messages local0,local1.*                         -/var/log/localmessages local2,local3.*                         -/var/log/localmessages local4,local5.*                         -/var/log/localmessages local6,local7.*                         -/var/log/localmessages
        Run the following command to reload the rsyslogd configuration:
        # systemctl restart rsyslog

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSCv7|6.2,CSCv7|6.3,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,LEVEL|1NS,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1

Policy Value:
cmd: /usr/bin/ls -l /var/log/
expect: 
system: Linux

Actual Value:
The command '/usr/bin/ls -l /var/log/' returned : 

total 11644
drwxr-xr-x. 2 root root     263 Feb 23 18:29 anaconda
drwx------. 2 root root      23 Feb 23 18:30 audit
-rw-------. 1 root root    6655 Mar  4 17:40 boot.log
-rw-------. 1 root root  199875 Mar  3 13:22 boot.log-20210303
-rw-------. 1 root root  126051 Mar  4 03:51 boot.log-20210304
-rw-------. 1 root root    1152 Mar  4 18:49 btmp
-rw-rw----. 1 root utmp       0 Feb 23 18:26 btmp-20210303
-rw-------. 1 root root   33568 Mar  4 20:11 cron
-rw-r--r--. 1 root root   27847 Mar  4 20:12 dnf.librepo.log
-rw-r--r--. 1 root root  101039 Mar  4 20:12 dnf.log
-rw-r--r--. 1 root root    3829 Mar  4 20:12 dnf.rpm.log
-rw-r-----. 1 root root    9672 Mar  4 18:51 firewalld
-rw-r--r--. 1 root root    1224 Mar  4 20:12 hawkey.log
-rw-rw-r--. 1 root utmp  291708 Mar  4 20:00 lastlog
-rw-------. 1 root root       0 Feb 23 18:26 maillog
-rw-------. 1 root root 9581781 Mar  4 20:14 messages
drwx------. 2 root root       6 Feb 23 18:26 private
drwxr-xr-x. 2 root root      43 Feb 26 12:08 rhsm
-rw-------. 1 root root   67883 Mar  4 20:14 secure
-rw-------. 1 root root       0 Feb 23 18:26 spooler
drwxr-x---. 2 sssd sssd      73 Feb 23 18:30 sssd
drwxr-xr-x. 2 root root      23 Feb 23 18:30 tuned
-rw-rw-r--. 1 root utmp  203904 Mar  4 20:02 wtmp"
"""4.2.1.5 Ensure rsyslog is configured to send logs to a remote log host"" : [FAILED]

The rsyslog utility supports the ability to send logs it gathers to a remote log host running syslogd(8) or to receive messages from remote hosts, reducing administrative overhead.
        Rationale:
        Storing log data on a remote host protects log integrity from local attacks. If an attacker gains root access on the local system, they could tamper with or remove log data that is stored on the local system

Solution:
Edit the /etc/rsyslog.conf and /etc/rsyslog.d/*.conf files and add the following line (where loghost.example.com is the name of your central log host).
        *.* @@loghost.example.com
        Run the following command to reload the rsyslogd configuration:
        # systemctl restart rsyslog

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.3.8,800-53|AU-9(2),CN-L3|8.1.3.5(d),CN-L3|8.1.4.3(c),CSCv7|6.6,CSCv7|6.8,CSF|PR.PT-1,ITSG-33|AU-9(2),LEVEL|1S,NESA|M5.2.3,NESA|M5.5.2,NIAv2|SS13e

Policy Value:
cmd: /usr/bin/grep '^*.*[^I][^I]*@' /etc/rsyslog.conf /etc/rsyslog.d/*.conf
expect: .*?:[\s]*\*\.\*[\s]+\@\@10\.0\.0\.2[\s]*$
regex: .*?:[\s]*\*\.\*[\s]+
system: Linux

Actual Value:
The command '/usr/bin/grep '^*.*[^I][^I]*@' /etc/rsyslog.conf /etc/rsyslog.d/*.conf' returned : 

/usr/bin/grep: /etc/rsyslog.d/*.conf: No such file or directory"
"""4.2.1.6 Ensure remote rsyslog messages are only accepted on designated log hosts. - InputTCPServerRun"" : [WARNING]

By default, rsyslog does not listen for log messages coming in from remote systems. The ModLoad tells rsyslog to load the imtcp.so module so it can listen over a network via TCP. The InputTCPServerRun option instructs rsyslogd to listen on the specified TCP port.
        Rationale:
        The guidance in the section ensures that remote log hosts are configured to only accept rsyslog data from hosts within the specified domain and that those systems that are not designed to be log hosts do not accept any remote rsyslog messages. This provides protection from spoofed log data and ensures that system administrators are reviewing reasonably complete syslog data in a central location.

        NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
For hosts that are designated as log hosts, edit the /etc/rsyslog.conf file and un-comment or add the following lines:
        $ModLoad imtcp  $InputTCPServerRun 514
        For hosts that are not designated as log hosts, edit the /etc/rsyslog.conf file and comment or remove the following lines:
        # $ModLoad imtcp  # $InputTCPServerRun 514
        Run the following command to reload the rsyslogd configuration:
        # systemctl restart rsyslog

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.4.6,800-171|3.4.7,800-53|CM-7,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv7|9.2,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7,LEVEL|1NS,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,NIAv2|SS15a,SWIFT-CSCv1|2.3

Policy Value:
cmd: /usr/bin/grep -h '$InputTCPServerRun' /etc/rsyslog.conf /etc/rsyslog.d/*.conf
expect: ^[\s]*\$InputTCPServerRun[\s]+514[\s]*$
system: Linux

Actual Value:
The command '/usr/bin/grep -h '$InputTCPServerRun' /etc/rsyslog.conf /etc/rsyslog.d/*.conf' returned : 

/usr/bin/grep: /etc/rsyslog.d/*.conf: No such file or directory"
"""4.2.1.6 Ensure remote rsyslog messages are only accepted on designated log hosts. - ModLoad imtcp"" : [WARNING]

By default, rsyslog does not listen for log messages coming in from remote systems. The ModLoad tells rsyslog to load the imtcp.so module so it can listen over a network via TCP. The InputTCPServerRun option instructs rsyslogd to listen on the specified TCP port.
        Rationale:
        The guidance in the section ensures that remote log hosts are configured to only accept rsyslog data from hosts within the specified domain and that those systems that are not designed to be log hosts do not accept any remote rsyslog messages. This provides protection from spoofed log data and ensures that system administrators are reviewing reasonably complete syslog data in a central location.

        NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
For hosts that are designated as log hosts, edit the /etc/rsyslog.conf file and un-comment or add the following lines:
        $ModLoad imtcp  $InputTCPServerRun 514
        For hosts that are not designated as log hosts, edit the /etc/rsyslog.conf file and comment or remove the following lines:
        # $ModLoad imtcp  # $InputTCPServerRun 514
        Run the following command to reload the rsyslogd configuration:
        # systemctl restart rsyslog

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.4.6,800-171|3.4.7,800-53|CM-7,CN-L3|7.1.3.5(c),CN-L3|7.1.3.7(d),CN-L3|8.1.4.4(b),CSCv7|9.2,CSF|PR.IP-1,CSF|PR.PT-3,ITSG-33|CM-7,LEVEL|1NS,NIAv2|SS13b,NIAv2|SS14a,NIAv2|SS14c,NIAv2|SS15a,SWIFT-CSCv1|2.3

Policy Value:
cmd: /usr/bin/grep -h '$ModLoad imtcp' /etc/rsyslog.conf /etc/rsyslog.d/*.conf
expect: ^[\s]*\$ModLoad[\s]+imtcp[\s]*$
system: Linux

Actual Value:
The command '/usr/bin/grep -h '$ModLoad imtcp' /etc/rsyslog.conf /etc/rsyslog.d/*.conf' returned : 

/usr/bin/grep: /etc/rsyslog.d/*.conf: No such file or directory"
"""4.2.2.1 Ensure journald is configured to send logs to rsyslog"" : [FAILED]

Data from journald may be stored in volatile memory or persisted locally on the server. Utilities exist to accept remote export of journald logs, however, use of the rsyslog service provides a consistent means of log collection and export.
        Rationale:
        Storing log data on a remote host protects log integrity from local attacks. If an attacker gains root access on the local system, they could tamper with or remove log data that is stored on the local system.

Solution:
Edit the /etc/systemd/journald.conf file and add the following line:
        ForwardToSyslog=yes

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.3.1,800-171|3.3.2,800-53|AU-12,CN-L3|7.1.3.3(a),CN-L3|7.1.3.3(b),CN-L3|7.1.3.3(c),CN-L3|8.1.3.5(a),CN-L3|8.1.3.5(b),CN-L3|8.1.4.3(a),CSCv7|6.5,CSF|DE.CM-1,CSF|DE.CM-3,CSF|DE.CM-7,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.1,ITSG-33|AU-12,LEVEL|1S,NESA|T3.6.2,NESA|T3.6.5,NESA|T3.6.6,NIAv2|SM8,SWIFT-CSCv1|6.4,TBA-FIISB|45.1.1

Policy Value:
cmd: /usr/bin/grep -e ^[\s]*ForwardToSyslog /etc/systemd/journald.conf | /usr/bin/awk '{print} END {if (NR == 0) print ""fail""}'
expect: ^[\s]*ForwardToSyslog[\s]*=[\s]*yes[\s]*$
system: Linux

Actual Value:
The command '/usr/bin/grep -e ^[\s]*ForwardToSyslog /etc/systemd/journald.conf | /usr/bin/awk '{print} END {if (NR == 0) print ""fail""}'' returned : 

fail"
"""4.2.2.2 Ensure journald is configured to compress large log files"" : [FAILED]

The journald system includes the capability of compressing overly large files to avoid filling up the system with logs or making the logs unmanageably large.
        Rationale:
        Uncompressed large files may unexpectedly fill a filesystem leading to resource unavailability. Compressing logs prior to write can prevent sudden, unexpected filesystem impacts.

Solution:
Edit the /etc/systemd/journald.conf file and add the following line:
        Compress=yes

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|6.4,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3

Policy Value:
cmd: /usr/bin/grep -e ^[\s]*Compress /etc/systemd/journald.conf | /usr/bin/awk '{print} END {if (NR == 0) print ""fail""}'
expect: ^[\s]*Compress[\s]*=[\s]*yes[\s]*$
system: Linux

Actual Value:
The command '/usr/bin/grep -e ^[\s]*Compress /etc/systemd/journald.conf | /usr/bin/awk '{print} END {if (NR == 0) print ""fail""}'' returned : 

fail"
"""4.2.2.3 Ensure journald is configured to write logfiles to persistent disk"" : [FAILED]

Data from journald may be stored in volatile memory or persisted locally on the server. Logs in memory will be lost upon a system reboot. By persisting logs to local disk on the server they are protected from loss.
        Rationale:
        Writing log data to disk will provide the ability to forensically reconstruct events which may have impacted the operations or security of a system even after a system crash or reboot.

Solution:
Edit the /etc/systemd/journald.conf file and add the following line:
        Storage=persistent

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.3.8,800-53|AU-9,CN-L3|7.1.2.3(d),CN-L3|7.1.3.3(f),CN-L3|8.1.3.5(c),CN-L3|8.1.4.3(c),CSCv7|6.2,CSCv7|6.3,CSF|PR.PT-1,ISO/IEC-27001|A.12.4.2,ITSG-33|AU-9,LEVEL|1S,NESA|M5.2.3,NESA|M5.5.2,NESA|T3.6.4,NESA|T8.2.9,NIAv2|SM5,NIAv2|SM6

Policy Value:
cmd: /usr/bin/grep -e ^[\s]*Storage /etc/systemd/journald.conf | /usr/bin/awk '{print} END {if (NR == 0) print ""fail""}'
expect: ^[\s]*Storage[\s]*=[\s]*persistent[\s]*$
system: Linux

Actual Value:
The command '/usr/bin/grep -e ^[\s]*Storage /etc/systemd/journald.conf | /usr/bin/awk '{print} END {if (NR == 0) print ""fail""}'' returned : 

fail"
"""4.2.3 Ensure permissions on all logfiles are configured"" : [FAILED]

Log files stored in /var/log/ contain logged information from many services on the system, or on log hosts others as well.
        Rationale:
        It is important to ensure that log files have the correct permissions to ensure that sensitive data is archived and protected.

Solution:
Run the following commands to set permissions on all existing log files:
        find /var/log -type f -exec chmod g-wx,o-rwx ""{}"" + -o -type d -exec chmod g-w,o-rwx ""{}"" +
        Notes:
        You may also need to change the configuration for your logging software or services for any logs that had incorrect permissions.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|5.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,SWIFT-CSCv1|2.3

Policy Value:
cmd: /usr/bin/find /var/log -type f -perm /037 -ls -o -type d -perm /026 -ls | /usr/bin/awk '{print} END {if (NR == 0) print ""pass"" ; else print ""fail""}'
expect: ^pass$
system: Linux

Actual Value:
The command '/usr/bin/find /var/log -type f -perm /037 -ls -o -type d -perm /026 -ls | /usr/bin/awk '{print} END {if (NR == 0) print ""pass"" ; else print ""fail""}'' returned : 

201327372      4 drwxr-xr-x   8  root     root         4096 Mar  4 03:51 /var/log
201505468     20 -rw-rw-r--   1  root     utmp       291708 Mar  4 20:00 /var/log/lastlog
201585123    200 -rw-rw-r--   1  root     utmp       203904 Mar  4 20:02 /var/log/wtmp
 67678458      0 drwxr-xr-x   2  root     root           23 Feb 23 18:30 /var/log/tuned
 68119718    252 -rw-r--r--   1  root     root       257292 Mar  4 18:53 /var/log/tuned/tuned.log
   270348      0 drwxr-xr-x   2  root     root           43 Feb 26 12:08 /var/log/rhsm
     7414     28 -rw-r--r--   1  root     root        28374 Mar  4 20:09 /var/log/rhsm/rhsmcertd.log
     7415      4 -rw-r--r--   1  root     root         2245 Mar  4 20:09 /var/log/rhsm/rhsm.log
201326724      0 drwxr-xr-x   2  root     root          263 Feb 23 18:29 /var/log/anaconda
201587209    128 -rw-r--r--   1  root     root       101039 Mar  4 20:12 /var/log/dnf.log
201587210     28 -rw-r--r--   1  root     root        27847 Mar  4 20:12 /var/log/dnf.librepo.log
201587211      4 -rw-r--r--   1  root     root         3829 Mar  4 20:12 /var/log/dnf.rpm.log
201587214      4 -rw-r--r--   1  root     root         1224 Mar  4 20:12 /var/log/hawkey.log
201587203      0 -rw-r--r--   1  nobody   nobody          0 Mar  3 01:39 /var/log/.myaccess
201585124      0 -rw-rw----   1  root     utmp            0 Feb 23 18:26 /var/log/btmp-20210303
fail"
"""4.3 Ensure logrotate is configured"" : [WARNING]

The system includes the capability of rotating log files regularly to avoid filling up the system with logs or making the logs unmanageably large. The file /etc/logrotate.d/syslog is the configuration file used to rotate log files created by syslog or rsyslog.
        Rationale:
        By keeping the log files smaller and more manageable, a system administrator can easily archive these files to another system and spend less time looking through inordinately large log files.

        NOTE: Nessus has not performed this check. Please review the benchmark to ensure target compliance.

Solution:
Edit /etc/logrotate.conf and /etc/logrotate.d/* to ensure logs are rotated according to site policy.
        Notes:
        If no maxage setting is set for logrotate a situation can occur where logrotate is interrupted and fails to delete rotated logfiles. It is recommended to set this to a value greater than the longest any log file should exist on your system to ensure that any such logfile is removed but standard rotation settings are not overridden.

See Also: https://workbench.cisecurity.org/files/2485

Reference: CSCv7|6.4,LEVEL|1NS

Policy Value:
WARNING"
"""5.1.3 Ensure permissions on /etc/cron.hourly are configured"" : [FAILED]

This directory contains system cron jobs that need to run on an hourly basis. The files in this directory cannot be manipulated by the crontab command, but are instead edited by system administrators using a text editor. The commands below restrict read/write and search access to user and group root, preventing regular users from accessing this directory.
        Rationale:
        Granting write access to this directory for non-privileged users could provide them the means for gaining unauthorized elevated privileges. Granting read access to this directory could give an unprivileged user insight in how to gain elevated privileges or circumvent auditing controls.

Solution:
Run the following commands to set ownership and permissions on /etc/cron.hourly :
        # chown root:root /etc/cron.hourly  # chmod og-rwx /etc/cron.hourly

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|5.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3

Policy Value:
file: /etc/cron.hourly
group: root
mask: 077
owner: root
system: Linux

Actual Value:
The file /etc/cron.hourly with fmode owner: root group: root mode: 0750 attr: -------------------- uid: 0 gid: 0 uneven permissions : FALSE  does not match the policy value owner: root group: root mask: 0077 uneven permissions : TRUE 

/etc/cron.hourly"
"""5.1.4 Ensure permissions on /etc/cron.daily are configured"" : [FAILED]

The /etc/cron.daily directory contains system cron jobs that need to run on a daily basis. The files in this directory cannot be manipulated by the crontab command, but are instead edited by system administrators using a text editor. The commands below restrict read/write and search access to user and group root, preventing regular users from accessing this directory.
        Rationale:
        Granting write access to this directory for non-privileged users could provide them the means for gaining unauthorized elevated privileges. Granting read access to this directory could give an unprivileged user insight in how to gain elevated privileges or circumvent auditing controls.

Solution:
Run the following commands to set ownership and permissions on /etc/cron.daily :
        # chown root:root /etc/cron.daily  # chmod og-rwx /etc/cron.daily

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|5.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3

Policy Value:
file: /etc/cron.daily
group: root
mask: 077
owner: root
system: Linux

Actual Value:
The file /etc/cron.daily with fmode owner: root group: root mode: 0750 attr: -------------------- uid: 0 gid: 0 uneven permissions : FALSE  does not match the policy value owner: root group: root mask: 0077 uneven permissions : TRUE 

/etc/cron.daily"
"""5.1.5 Ensure permissions on /etc/cron.weekly are configured"" : [FAILED]

The /etc/cron.weekly directory contains system cron jobs that need to run on a weekly basis. The files in this directory cannot be manipulated by the crontab command, but are instead edited by system administrators using a text editor. The commands below restrict read/write and search access to user and group root, preventing regular users from accessing this directory.
        Rationale:
        Granting write access to this directory for non-privileged users could provide them the means for gaining unauthorized elevated privileges. Granting read access to this directory could give an unprivileged user insight in how to gain elevated privileges or circumvent auditing controls.

Solution:
Run the following commands to set ownership and permissions on /etc/cron.weekly :
        # chown root:root /etc/cron.weekly  # chmod og-rwx /etc/cron.weekly

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|5.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3

Policy Value:
file: /etc/cron.weekly
group: root
mask: 077
owner: root
system: Linux

Actual Value:
The file /etc/cron.weekly with fmode owner: root group: root mode: 0750 attr: -------------------- uid: 0 gid: 0 uneven permissions : FALSE  does not match the policy value owner: root group: root mask: 0077 uneven permissions : TRUE 

/etc/cron.weekly"
"""5.1.6 Ensure permissions on /etc/cron.monthly are configured"" : [FAILED]

The /etc/cron.monthly directory contains system cron jobs that need to run on a monthly basis. The files in this directory cannot be manipulated by the crontab command, but are instead edited by system administrators using a text editor. The commands below restrict read/write and search access to user and group root, preventing regular users from accessing this directory.
        Rationale:
        Granting write access to this directory for non-privileged users could provide them the means for gaining unauthorized elevated privileges. Granting read access to this directory could give an unprivileged user insight in how to gain elevated privileges or circumvent auditing controls.

Solution:
Run the following commands to set ownership and permissions on /etc/cron.monthly :
        # chown root:root /etc/cron.monthly  # chmod og-rwx /etc/cron.monthly

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|5.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3

Policy Value:
file: /etc/cron.monthly
group: root
mask: 077
owner: root
system: Linux

Actual Value:
The file /etc/cron.monthly with fmode owner: root group: root mode: 0750 attr: -------------------- uid: 0 gid: 0 uneven permissions : FALSE  does not match the policy value owner: root group: root mask: 0077 uneven permissions : TRUE 

/etc/cron.monthly"
"""5.1.7 Ensure permissions on /etc/cron.d are configured"" : [FAILED]

The /etc/cron.d directory contains system cron jobs that need to run in a similar manner to the hourly, daily weekly and monthly jobs from /etc/crontab , but require more granular control as to when they run. The files in this directory cannot be manipulated by the crontab command, but are instead edited by system administrators using a text editor. The commands below restrict read/write and search access to user and group root, preventing regular users from accessing this directory.
        Rationale:
        Granting write access to this directory for non-privileged users could provide them the means for gaining unauthorized elevated privileges. Granting read access to this directory could give an unprivileged user insight in how to gain elevated privileges or circumvent auditing controls.

Solution:
Run the following commands to set ownership and permissions on /etc/cron.d :
        # chown root:root /etc/cron.d  # chmod og-rwx /etc/cron.d

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|5.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3

Policy Value:
file: /etc/cron.d
group: root
mask: 077
owner: root
system: Linux

Actual Value:
The file /etc/cron.d with fmode owner: root group: root mode: 0755 attr: -------------------- uid: 0 gid: 0 uneven permissions : FALSE  does not match the policy value owner: root group: root mask: 0077 uneven permissions : TRUE 

/etc/cron.d"
"""5.1.8 Ensure at/cron is restricted to authorized users - at.allow"" : [FAILED]

Configure /etc/cron.allow and /etc/at.allow to allow specific users to use these services. If /etc/cron.allow or /etc/at.allow do not exist, then /etc/at.deny and /etc/cron.deny are checked. Any user not specifically defined in those files is allowed to use at and cron. By removing the files, only users in /etc/cron.allow and /etc/at.allow are allowed to use at and cron. Note that even though a given user is not listed in cron.allow , cron jobs can still be run as that user. The cron.allow file only controls administrative access to the crontab command for scheduling and modifying cron jobs.
        Rationale:
        On many systems, only the system administrator is authorized to schedule cron jobs. Using the cron.allow file to control who can run cron jobs enforces this policy. It is easier to manage an allow list than a deny list. In a deny list, you could potentially add a user ID to the system and forget to add it to the deny files.

Solution:
Run the following commands to remove /etc/cron.deny and /etc/at.deny and create and set permissions and ownership for /etc/cron.allow and /etc/at.allow :
        # rm /etc/cron.deny # rm /etc/at.deny  # touch /etc/cron.allow # touch /etc/at.allow  # chmod og-rwx /etc/cron.allow # chmod og-rwx /etc/at.allow  # chown root:root /etc/cron.allow # chown root:root /etc/at.allow

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.7,800-53|AC-6(10),CSCv7|16,CSF|PR.AC-4,LEVEL|1S,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4

Policy Value:
file: /etc/at.allow
group: root
mask: 177
owner: root
system: Linux

Actual Value:
The file /etc/at.allow with fmode owner: root group: root mode: 0644 attr: -------------------- uid: 0 gid: 0 uneven permissions : FALSE  does not match the policy value owner: root group: root mask: 0177 uneven permissions : TRUE 

/etc/at.allow"
"""5.1.8 Ensure at/cron is restricted to authorized users - cron.allow"" : [FAILED]

Configure /etc/cron.allow and /etc/at.allow to allow specific users to use these services. If /etc/cron.allow or /etc/at.allow do not exist, then /etc/at.deny and /etc/cron.deny are checked. Any user not specifically defined in those files is allowed to use at and cron. By removing the files, only users in /etc/cron.allow and /etc/at.allow are allowed to use at and cron. Note that even though a given user is not listed in cron.allow , cron jobs can still be run as that user. The cron.allow file only controls administrative access to the crontab command for scheduling and modifying cron jobs.
        Rationale:
        On many systems, only the system administrator is authorized to schedule cron jobs. Using the cron.allow file to control who can run cron jobs enforces this policy. It is easier to manage an allow list than a deny list. In a deny list, you could potentially add a user ID to the system and forget to add it to the deny files.

Solution:
Run the following commands to remove /etc/cron.deny and /etc/at.deny and create and set permissions and ownership for /etc/cron.allow and /etc/at.allow :
        # rm /etc/cron.deny # rm /etc/at.deny  # touch /etc/cron.allow # touch /etc/at.allow  # chmod og-rwx /etc/cron.allow # chmod og-rwx /etc/at.allow  # chown root:root /etc/cron.allow # chown root:root /etc/at.allow

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.7,800-53|AC-6(10),CSCv7|16,CSF|PR.AC-4,LEVEL|1S,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4

Policy Value:
file: /etc/cron.allow
group: root
mask: 177
owner: root
system: Linux

Actual Value:
The file /etc/cron.allow with fmode owner: root group: root mode: 0644 attr: -------------------- uid: 0 gid: 0 uneven permissions : FALSE  does not match the policy value owner: root group: root mask: 0177 uneven permissions : TRUE 

/etc/cron.allow"
"""5.2.10 Ensure SSH root login is disabled"" : [FAILED]

The PermitRootLogin parameter specifies if the root user can log in using ssh. The default is no.
        Rationale:
        Disallowing root logins over SSH requires system admins to authenticate using their own individual account, then escalating to root via sudo or su. This in turn limits opportunity for non-repudiation and provides a clear audit trail in the event of a security incident

Solution:
Edit the /etc/ssh/sshd_config file to set the parameter as follows:
        PermitRootLogin no
        Default Value:
        PermitRootLogin without-password

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.15,800-171|3.1.2,800-53|AC-17(4),CSCv7|4.3,CSF|PR.AC-3,CSF|PR.PT-4,ITSG-33|AC-17(4),LEVEL|1S,SWIFT-CSCv1|5.1

Policy Value:
expect: ^[\s]*PermitRootLogin[\s]+no[\s]*$
file: /etc/ssh/sshd_config
regex: ^[\s]*PermitRootLogin[\s]
system: Linux

Actual Value:
Non-compliant file(s):
      /etc/ssh/sshd_config - regex '^[\s]*PermitRootLogin[\s]' found - expect '^[\s]*PermitRootLogin[\s]+no[\s]*$' not found in the following lines:
          43: PermitRootLogin yes"
"""5.2.14 Ensure SSH LoginGraceTime is set to one minute or less"" : [FAILED]

The LoginGraceTime parameter specifies the time allowed for successful authentication to the SSH server. The longer the Grace period is the more open unauthenticated connections can exist. Like other session controls in this session the Grace Period should be limited to appropriate organizational limits to ensure the service is available for needed access.
        Rationale:
        Setting the LoginGraceTime parameter to a low number will minimize the risk of successful brute force attacks to the SSH server. It will also limit the number of concurrent unauthenticated connections While the recommended setting is 60 seconds (1 Minute), set the number based on site policy.

Solution:
Edit the /etc/ssh/sshd_config file to set the parameter as follows:
        LoginGraceTime 60
        Default Value:
        LoginGraceTime 120

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.11,800-53|AC-12,CN-L3|7.1.2.2(d),CN-L3|7.1.3.7(b),CN-L3|8.1.4.1(b),CSCv7|5.1,HIPAA|164.312(a)(2)(iii),ITSG-33|AC-12,LEVEL|1S,NIAv2|NS49,PCI-DSSv3.1|12.3.8,PCI-DSSv3.1|8.1.8,PCI-DSSv3.2|12.3.8,PCI-DSSv3.2|8.1.8

Policy Value:
expect: ^[\s]*LoginGraceTime[\s]+([1-9]|[1-5][0-9]|60)[\s]*$
file: /etc/ssh/sshd_config
regex: ^[\s]*LoginGraceTime[\s]
system: Linux

Actual Value:
Non-compliant file(s):
      /etc/ssh/sshd_config - regex '^[\s]*LoginGraceTime[\s]' found - expect '^[\s]*LoginGraceTime[\s]+([1-9]|[1-5][0-9]|60)[\s]*$' not found in the following lines:
          42: LoginGraceTime 80"
"""5.2.18 Ensure SSH MaxStartups is configured"" : [FAILED]

The MaxStartups parameter specifies the maximum number of concurrent unauthenticated connections to the SSH daemon.
        Rationale:
        To protect a system from denial of service due to a large number of pending authentication connection attempts, use the rate limiting function of MaxStartups to protect availability of sshd logins and prevent overwhelming the daemon.

Solution:
Edit the /etc/ssh/sshd_config file to set the parameter as follows:
        maxstartups 10:30:60

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-53|AC-10,CSCv7|5.1,ITSG-33|AC-10,LEVEL|1S,NESA|T5.5.1

Policy Value:
cmd: /usr/sbin/sshd -T | /usr/bin/grep maxstartups | /usr/bin/awk '{print} END {if (NR == 0) print ""fail""}'
expect: ^[\s]*maxstartups[\s]+10:30:100[\s]*$
system: Linux

Actual Value:
The command '/usr/sbin/sshd -T | /usr/bin/grep maxstartups | /usr/bin/awk '{print} END {if (NR == 0) print ""fail""}'' returned : 

maxstartups 4:30:4"
"""5.2.3 Ensure permissions on SSH private host key files are configured"" : [FAILED]

An SSH private key is one of two files used in SSH public key authentication. In this authentication method, The possession of the private key is proof of identity. Only a private key that corresponds to a public key will be able to authenticate successfully. The private keys need to be stored and handled carefully, and no copies of the private key should be distributed.
        Rationale:
        If an unauthorized user obtains the private SSH host key file, the host could be impersonated

Solution:
Run the following commands to set ownership and permissions on the private SSH host key files
        # find /etc/ssh -xdev -type f -name 'ssh_host_*_key' -exec chown root:root {} ;
        # find /etc/ssh -xdev -type f -name 'ssh_host_*_key' -exec chmod 0600 {} ;

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|5.1,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3

Policy Value:
file: /etc/ssh/ssh_host_*_key
group: root
mask: 7177
owner: root
system: Linux

Actual Value:
The file /etc/ssh/ssh_host_ecdsa_key with fmode owner: root group: ssh_keys mode: 0640 attr: -------------------- uid: 0 gid: 995 uneven permissions : FALSE  does not match the policy value owner: root group: root mask: 7177 uneven permissions : TRUE 
The file /etc/ssh/ssh_host_ed25519_key with fmode owner: root group: ssh_keys mode: 0640 attr: -------------------- uid: 0 gid: 995 uneven permissions : FALSE  does not match the policy value owner: root group: root mask: 7177 uneven permissions : TRUE 
The file /etc/ssh/ssh_host_rsa_key with fmode owner: root group: ssh_keys mode: 0640 attr: -------------------- uid: 0 gid: 995 uneven permissions : FALSE  does not match the policy value owner: root group: root mask: 7177 uneven permissions : TRUE 

/etc/ssh/ssh_host_ecdsa_key, /etc/ssh/ssh_host_ed25519_key, /etc/ssh/ssh_host_rsa_key"
"""5.3.1 Create custom authselect profile"" : [FAILED]

A custom profile can be created by copying and customizing one of the default profiles. The default profiles include: sssd, winbind, or the nis.
        Rationale:
        A custom profile is required to customize many of the pam options

Solution:
Run the following command to create a custom authselect profile:
        # authselect create-profile <custom-profile name> -b <default profile to copy>
            Example:
            # authselect create-profile custom-profile -b sssd --symlink-meta

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.5.1,800-53|IA-2,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv7|5.1,CSF|PR.AC-1,ITSG-33|IA-2,LEVEL|1S,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM14b,NIAv2|AM2,NIAv2|AM8,TBA-FIISB|35.1,TBA-FIISB|36.1

Policy Value:
cmd: /usr/bin/authselect current | /usr/bin/grep 'Profile[[:space:]]*ID:'
expect: ^[\s]*Profile[\s]*ID:[\s]*sssd[\s]*$
system: Linux

Actual Value:
The command '/usr/bin/authselect current | /usr/bin/grep 'Profile[[:space:]]*ID:'' did not return any result"
"""5.3.2 Select authselect profile"" : [WARNING]

You can select a profile for the authselect utility for a specific host. The profile will be applied to every user logging into the host.
        You can create and deploy a custom profile by customizing one of the default profiles, the sssd, winbind, or the nis profile.
        Rationale:
        When you deploy a profile, the profile is applied to every user logging into the given host

        NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
Run the following command to select a custom authselect profile
        # authselect select custom/<CUSTOM PROFILE NAME> {with-<OPTIONS>}
            Example:
            # authselect select custom/custom-profile with-sudo with-faillock without-nullok

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.5.1,800-53|IA-2,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv7|16,CSF|PR.AC-1,ITSG-33|IA-2,LEVEL|1S,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM14b,NIAv2|AM2,NIAv2|AM8,TBA-FIISB|35.1,TBA-FIISB|36.1

Policy Value:
cmd: /usr/bin/authselect current
expect: 
system: Linux

Actual Value:
The command '/usr/bin/authselect current' returned : 

No existing configuration detected."
"""5.3.3 Ensure authselect includes with-faillock - 'authselect'"" : [FAILED]

The pam_faillock.so module maintains a list of failed authentication attempts per user during a specified interval and locks the account in case there were more than deny consecutive failed authentications. It stores the failure records into per-user files in the tally directory
        Rationale:
        Locking out user IDs after n unsuccessful consecutive login attempts mitigates brute force password attacks against your systems.

Solution:
Run the following command to include the with-faillock option
        # authselect select <PROFILE NAME> with-faillock
            Example:
            # authselect select custom/custom-profile with-sudo with-faillock without-nullok

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.5.1,800-53|IA-2,CN-L3|7.1.3.1(a),CN-L3|7.1.3.1(e),CN-L3|8.1.4.1(a),CN-L3|8.1.4.2(a),CN-L3|8.5.4.1(a),CSCv7|16.7,CSF|PR.AC-1,ITSG-33|IA-2,LEVEL|1S,NESA|T2.3.8,NESA|T5.3.1,NESA|T5.4.2,NESA|T5.5.1,NESA|T5.5.2,NESA|T5.5.3,NIAv2|AM14b,NIAv2|AM2,NIAv2|AM8,TBA-FIISB|35.1,TBA-FIISB|36.1

Policy Value:
cmd: /usr/bin/authselect current | /usr/bin/grep with-faillock
expect: ^[\s]*-[\s]*with-faillock[\s]*$
system: Linux

Actual Value:
The command '/usr/bin/authselect current | /usr/bin/grep with-faillock' did not return any result"
"""5.3.3 Ensure authselect includes with-faillock - 'authselect.conf'"" : [FAILED]

The pam_faillock.so module maintains a list of failed authentication attempts per user during a specified interval and locks the account in case there were more than deny consecutive failed authentications. It stores the failure records into per-user files in the tally directory
        Rationale:
        Locking out user IDs after n unsuccessful consecutive login attempts mitigates brute force password attacks against your systems.

Solution:
Run the following command to include the with-faillock option
        # authselect select <PROFILE NAME> with-faillock
            Example:
            # authselect select custom/custom-profile with-sudo with-faillock without-nullok

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.8,800-53|AC-7,CN-L3|8.1.4.1(b),CSCv7|16.7,ITSG-33|AC-7,LEVEL|1S,NESA|T5.5.1,NIAv2|AM24,TBA-FIISB|36.2.4,TBA-FIISB|45.1.2,TBA-FIISB|45.2.1,TBA-FIISB|45.2.2

Policy Value:
cmd: /usr/bin/grep with-faillock /etc/authselect/authselect.conf
expect: ^[\s]*with-faillock[\s]*$
system: Linux

Actual Value:
The command '/usr/bin/grep with-faillock /etc/authselect/authselect.conf' returned : 

/usr/bin/grep: /etc/authselect/authselect.conf: No such file or directory"
"""5.4.1 Ensure password creation requirements are configured - dcredit"" : [FAILED]

The pam_pwquality.so module checks the strength of passwords. It performs checks such as making sure a password is not a dictionary word, it is a certain length, contains a mix of characters (e.g. alphabet, numeric, other) and more. The following are definitions of the pam_pwquality.so options.
        try_first_pass - retrieve the password from a previous stacked PAM module. If not available, then prompt the user for a password.
        retry=3 - Allow 3 tries before sending back a failure.
        minlen=14 - password must be 14 characters or more
        ** Either of the following can be used to enforce complex passwords:**
        minclass=4 - provide at least four classes of characters for the new password
        OR
        dcredit=-1 - provide at least one digit
        ucredit=-1 - provide at least one uppercase character
        ocredit=-1 - provide at least one special character
        lcredit=-1 - provide at least one lowercase character
        The settings shown above are one possible policy. Alter these values to conform to your own organization's password policies
        Rationale:
        Strong passwords protect systems from being hacked through brute force methods.

Solution:
Edit the file /etc/security/pwquality.conf and add or modify the following line for password length to conform to site policy
        minlen = 14
        Edit the file /etc/security/pwquality.conf and add or modify the following line for password complexity to conform to site policy
        minclass = 4
        OR
        dcredit = -1 ucredit = -1 ocredit = -1 lcredit = -1
        Run the following to update the system-auth and password-auth files
        CP=$(authselect current | awk 'NR == 1 {print $3}' | grep custom/) for FN in system-auth password-auth; do 	[[ -n $CP ]] && PTF=/etc/authselect/$CP/$FN || PTF=/etc/authselect/$FN 	[[ -z $(grep -E '^s*passwords+requisites+pam_pwquality.sos+.*enforce-for-roots*.*$' $PTF) ]] && sed -ri 's/^s*(passwords+requisites+pam_pwquality.sos+)(.*)$/12 enforce-for-root/' $PTF 	[[ -n $(grep -E '^s*passwords+requisites+pam_pwquality.sos+.*s+retry=S+s*.*$' $PTF) ]] && sed -ri '/pwquality/s/retry=S+/retry=3/' $PTF || sed -ri 's/^s*(passwords+requisites+pam_pwquality.sos+)(.*)$/12 retry=3/' $PTF done authselect apply-changes
        Notes:
        all default authselect profiles have pam_pwquality enabled with the expectation that options will be specified in pwquality.conf

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.5.7,800-53|IA-5(1),CIP|007-6-R5,CN-L3|7.1.2.7(e),CN-L3|7.1.3.1(b),CSCv7|4.4,CSF|PR.AC-1,HIPAA|164.308(a)(5)(ii)(D),ISO/IEC-27001|A.9.4.3,ITSG-33|IA-5(1),LEVEL|1S,NESA|T5.2.3,NIAv2|AM19a,NIAv2|AM19b,NIAv2|AM19c,NIAv2|AM19d,NIAv2|AM22a,PCI-DSSv3.1|8.2.3,PCI-DSSv3.2|8.2.3,SWIFT-CSCv1|4.1,TBA-FIISB|26.2.1,TBA-FIISB|26.2.4

Policy Value:
expect: ^[\s]*dcredit[\s]*=[\s]*-1[\s]*$
file: /etc/security/pwquality.conf
regex: ^[\s]*dcredit[\s]*=
system: Linux

Actual Value:
The file ""/etc/security/pwquality.conf"" does not contain ""^[\s]*dcredit[\s]*="""
"""5.4.1 Ensure password creation requirements are configured - lcredit"" : [FAILED]

The pam_pwquality.so module checks the strength of passwords. It performs checks such as making sure a password is not a dictionary word, it is a certain length, contains a mix of characters (e.g. alphabet, numeric, other) and more. The following are definitions of the pam_pwquality.so options.
        try_first_pass - retrieve the password from a previous stacked PAM module. If not available, then prompt the user for a password.
        retry=3 - Allow 3 tries before sending back a failure.
        minlen=14 - password must be 14 characters or more
        ** Either of the following can be used to enforce complex passwords:**
        minclass=4 - provide at least four classes of characters for the new password
        OR
        dcredit=-1 - provide at least one digit
        ucredit=-1 - provide at least one uppercase character
        ocredit=-1 - provide at least one special character
        lcredit=-1 - provide at least one lowercase character
        The settings shown above are one possible policy. Alter these values to conform to your own organization's password policies
        Rationale:
        Strong passwords protect systems from being hacked through brute force methods.

Solution:
Edit the file /etc/security/pwquality.conf and add or modify the following line for password length to conform to site policy
        minlen = 14
        Edit the file /etc/security/pwquality.conf and add or modify the following line for password complexity to conform to site policy
        minclass = 4
        OR
        dcredit = -1 ucredit = -1 ocredit = -1 lcredit = -1
        Run the following to update the system-auth and password-auth files
        CP=$(authselect current | awk 'NR == 1 {print $3}' | grep custom/) for FN in system-auth password-auth; do 	[[ -n $CP ]] && PTF=/etc/authselect/$CP/$FN || PTF=/etc/authselect/$FN 	[[ -z $(grep -E '^s*passwords+requisites+pam_pwquality.sos+.*enforce-for-roots*.*$' $PTF) ]] && sed -ri 's/^s*(passwords+requisites+pam_pwquality.sos+)(.*)$/12 enforce-for-root/' $PTF 	[[ -n $(grep -E '^s*passwords+requisites+pam_pwquality.sos+.*s+retry=S+s*.*$' $PTF) ]] && sed -ri '/pwquality/s/retry=S+/retry=3/' $PTF || sed -ri 's/^s*(passwords+requisites+pam_pwquality.sos+)(.*)$/12 retry=3/' $PTF done authselect apply-changes
        Notes:
        all default authselect profiles have pam_pwquality enabled with the expectation that options will be specified in pwquality.conf

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.5.7,800-53|IA-5(1),CIP|007-6-R5,CN-L3|7.1.2.7(e),CN-L3|7.1.3.1(b),CSCv7|4.4,CSF|PR.AC-1,HIPAA|164.308(a)(5)(ii)(D),ISO/IEC-27001|A.9.4.3,ITSG-33|IA-5(1),LEVEL|1S,NESA|T5.2.3,NIAv2|AM19a,NIAv2|AM19b,NIAv2|AM19c,NIAv2|AM19d,NIAv2|AM22a,PCI-DSSv3.1|8.2.3,PCI-DSSv3.2|8.2.3,SWIFT-CSCv1|4.1,TBA-FIISB|26.2.1,TBA-FIISB|26.2.4

Policy Value:
expect: ^[\s]*lcredit[\s]*=[\s]*-1[\s]*$
file: /etc/security/pwquality.conf
regex: ^[\s]*lcredit[\s]*=
system: Linux

Actual Value:
The file ""/etc/security/pwquality.conf"" does not contain ""^[\s]*lcredit[\s]*="""
"""5.4.1 Ensure password creation requirements are configured - minlen"" : [FAILED]

The pam_pwquality.so module checks the strength of passwords. It performs checks such as making sure a password is not a dictionary word, it is a certain length, contains a mix of characters (e.g. alphabet, numeric, other) and more. The following are definitions of the pam_pwquality.so options.
        try_first_pass - retrieve the password from a previous stacked PAM module. If not available, then prompt the user for a password.
        retry=3 - Allow 3 tries before sending back a failure.
        minlen=14 - password must be 14 characters or more
        ** Either of the following can be used to enforce complex passwords:**
        minclass=4 - provide at least four classes of characters for the new password
        OR
        dcredit=-1 - provide at least one digit
        ucredit=-1 - provide at least one uppercase character
        ocredit=-1 - provide at least one special character
        lcredit=-1 - provide at least one lowercase character
        The settings shown above are one possible policy. Alter these values to conform to your own organization's password policies
        Rationale:
        Strong passwords protect systems from being hacked through brute force methods.

Solution:
Edit the file /etc/security/pwquality.conf and add or modify the following line for password length to conform to site policy
        minlen = 14
        Edit the file /etc/security/pwquality.conf and add or modify the following line for password complexity to conform to site policy
        minclass = 4
        OR
        dcredit = -1 ucredit = -1 ocredit = -1 lcredit = -1
        Run the following to update the system-auth and password-auth files
        CP=$(authselect current | awk 'NR == 1 {print $3}' | grep custom/) for FN in system-auth password-auth; do 	[[ -n $CP ]] && PTF=/etc/authselect/$CP/$FN || PTF=/etc/authselect/$FN 	[[ -z $(grep -E '^s*passwords+requisites+pam_pwquality.sos+.*enforce-for-roots*.*$' $PTF) ]] && sed -ri 's/^s*(passwords+requisites+pam_pwquality.sos+)(.*)$/12 enforce-for-root/' $PTF 	[[ -n $(grep -E '^s*passwords+requisites+pam_pwquality.sos+.*s+retry=S+s*.*$' $PTF) ]] && sed -ri '/pwquality/s/retry=S+/retry=3/' $PTF || sed -ri 's/^s*(passwords+requisites+pam_pwquality.sos+)(.*)$/12 retry=3/' $PTF done authselect apply-changes
        Notes:
        all default authselect profiles have pam_pwquality enabled with the expectation that options will be specified in pwquality.conf

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.5.7,800-53|IA-5(1),CIP|007-6-R5,CN-L3|7.1.2.7(e),CN-L3|7.1.3.1(b),CSCv7|4.4,CSF|PR.AC-1,HIPAA|164.308(a)(5)(ii)(D),ISO/IEC-27001|A.9.4.3,ITSG-33|IA-5(1),LEVEL|1S,NESA|T5.2.3,NIAv2|AM19a,NIAv2|AM19b,NIAv2|AM19c,NIAv2|AM19d,NIAv2|AM22a,PCI-DSSv3.1|8.2.3,PCI-DSSv3.2|8.2.3,SWIFT-CSCv1|4.1,TBA-FIISB|26.2.1,TBA-FIISB|26.2.4

Policy Value:
expect: ^[\s]*minlen[\s]*=[\s]*(1[4-9]|[2-9][0-9])[\s]*$
file: /etc/security/pwquality.conf
regex: ^[\s]*minlen[\s]*=
system: Linux

Actual Value:
The file ""/etc/security/pwquality.conf"" does not contain ""^[\s]*minlen[\s]*="""
"""5.4.1 Ensure password creation requirements are configured - ocredit"" : [FAILED]

The pam_pwquality.so module checks the strength of passwords. It performs checks such as making sure a password is not a dictionary word, it is a certain length, contains a mix of characters (e.g. alphabet, numeric, other) and more. The following are definitions of the pam_pwquality.so options.
        try_first_pass - retrieve the password from a previous stacked PAM module. If not available, then prompt the user for a password.
        retry=3 - Allow 3 tries before sending back a failure.
        minlen=14 - password must be 14 characters or more
        ** Either of the following can be used to enforce complex passwords:**
        minclass=4 - provide at least four classes of characters for the new password
        OR
        dcredit=-1 - provide at least one digit
        ucredit=-1 - provide at least one uppercase character
        ocredit=-1 - provide at least one special character
        lcredit=-1 - provide at least one lowercase character
        The settings shown above are one possible policy. Alter these values to conform to your own organization's password policies
        Rationale:
        Strong passwords protect systems from being hacked through brute force methods.

Solution:
Edit the file /etc/security/pwquality.conf and add or modify the following line for password length to conform to site policy
        minlen = 14
        Edit the file /etc/security/pwquality.conf and add or modify the following line for password complexity to conform to site policy
        minclass = 4
        OR
        dcredit = -1 ucredit = -1 ocredit = -1 lcredit = -1
        Run the following to update the system-auth and password-auth files
        CP=$(authselect current | awk 'NR == 1 {print $3}' | grep custom/) for FN in system-auth password-auth; do 	[[ -n $CP ]] && PTF=/etc/authselect/$CP/$FN || PTF=/etc/authselect/$FN 	[[ -z $(grep -E '^s*passwords+requisites+pam_pwquality.sos+.*enforce-for-roots*.*$' $PTF) ]] && sed -ri 's/^s*(passwords+requisites+pam_pwquality.sos+)(.*)$/12 enforce-for-root/' $PTF 	[[ -n $(grep -E '^s*passwords+requisites+pam_pwquality.sos+.*s+retry=S+s*.*$' $PTF) ]] && sed -ri '/pwquality/s/retry=S+/retry=3/' $PTF || sed -ri 's/^s*(passwords+requisites+pam_pwquality.sos+)(.*)$/12 retry=3/' $PTF done authselect apply-changes
        Notes:
        all default authselect profiles have pam_pwquality enabled with the expectation that options will be specified in pwquality.conf

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.5.7,800-53|IA-5(1),CIP|007-6-R5,CN-L3|7.1.2.7(e),CN-L3|7.1.3.1(b),CSCv7|4.4,CSF|PR.AC-1,HIPAA|164.308(a)(5)(ii)(D),ISO/IEC-27001|A.9.4.3,ITSG-33|IA-5(1),LEVEL|1S,NESA|T5.2.3,NIAv2|AM19a,NIAv2|AM19b,NIAv2|AM19c,NIAv2|AM19d,NIAv2|AM22a,PCI-DSSv3.1|8.2.3,PCI-DSSv3.2|8.2.3,SWIFT-CSCv1|4.1,TBA-FIISB|26.2.1,TBA-FIISB|26.2.4

Policy Value:
expect: ^[\s]*ocredit[\s]*=[\s]*-1[\s]*$
file: /etc/security/pwquality.conf
regex: ^[\s]*ocredit[\s]*=
system: Linux

Actual Value:
The file ""/etc/security/pwquality.conf"" does not contain ""^[\s]*ocredit[\s]*="""
"""5.4.1 Ensure password creation requirements are configured - ucredit"" : [FAILED]

The pam_pwquality.so module checks the strength of passwords. It performs checks such as making sure a password is not a dictionary word, it is a certain length, contains a mix of characters (e.g. alphabet, numeric, other) and more. The following are definitions of the pam_pwquality.so options.
        try_first_pass - retrieve the password from a previous stacked PAM module. If not available, then prompt the user for a password.
        retry=3 - Allow 3 tries before sending back a failure.
        minlen=14 - password must be 14 characters or more
        ** Either of the following can be used to enforce complex passwords:**
        minclass=4 - provide at least four classes of characters for the new password
        OR
        dcredit=-1 - provide at least one digit
        ucredit=-1 - provide at least one uppercase character
        ocredit=-1 - provide at least one special character
        lcredit=-1 - provide at least one lowercase character
        The settings shown above are one possible policy. Alter these values to conform to your own organization's password policies
        Rationale:
        Strong passwords protect systems from being hacked through brute force methods.

Solution:
Edit the file /etc/security/pwquality.conf and add or modify the following line for password length to conform to site policy
        minlen = 14
        Edit the file /etc/security/pwquality.conf and add or modify the following line for password complexity to conform to site policy
        minclass = 4
        OR
        dcredit = -1 ucredit = -1 ocredit = -1 lcredit = -1
        Run the following to update the system-auth and password-auth files
        CP=$(authselect current | awk 'NR == 1 {print $3}' | grep custom/) for FN in system-auth password-auth; do 	[[ -n $CP ]] && PTF=/etc/authselect/$CP/$FN || PTF=/etc/authselect/$FN 	[[ -z $(grep -E '^s*passwords+requisites+pam_pwquality.sos+.*enforce-for-roots*.*$' $PTF) ]] && sed -ri 's/^s*(passwords+requisites+pam_pwquality.sos+)(.*)$/12 enforce-for-root/' $PTF 	[[ -n $(grep -E '^s*passwords+requisites+pam_pwquality.sos+.*s+retry=S+s*.*$' $PTF) ]] && sed -ri '/pwquality/s/retry=S+/retry=3/' $PTF || sed -ri 's/^s*(passwords+requisites+pam_pwquality.sos+)(.*)$/12 retry=3/' $PTF done authselect apply-changes
        Notes:
        all default authselect profiles have pam_pwquality enabled with the expectation that options will be specified in pwquality.conf

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.5.7,800-53|IA-5(1),CIP|007-6-R5,CN-L3|7.1.2.7(e),CN-L3|7.1.3.1(b),CSCv7|4.4,CSF|PR.AC-1,HIPAA|164.308(a)(5)(ii)(D),ISO/IEC-27001|A.9.4.3,ITSG-33|IA-5(1),LEVEL|1S,NESA|T5.2.3,NIAv2|AM19a,NIAv2|AM19b,NIAv2|AM19c,NIAv2|AM19d,NIAv2|AM22a,PCI-DSSv3.1|8.2.3,PCI-DSSv3.2|8.2.3,SWIFT-CSCv1|4.1,TBA-FIISB|26.2.1,TBA-FIISB|26.2.4

Policy Value:
expect: ^[\s]*ucredit[\s]*=[\s]*-1[\s]*$
file: /etc/security/pwquality.conf
regex: ^[\s]*ucredit[\s]*=
system: Linux

Actual Value:
The file ""/etc/security/pwquality.conf"" does not contain ""^[\s]*ucredit[\s]*="""
"""5.4.2 Ensure lockout for failed password attempts is configured - password-auth 'auth [default=die] pam_faillock.so'"" : [FAILED]

Lock out users after n unsuccessful consecutive login attempts.
        deny= - Number of attempts before the account is locked
        unlock_time= - Time in seconds before the account is unlocked
        Set the lockout number and unlock time to follow local site policy.
        Rationale:
        Locking out user IDs after n unsuccessful consecutive login attempts mitigates brute force password attacks against your systems.

Solution:
Set password lockouts and unlock times to conform to site policy Run the following to update the system-auth and password-auth files. This script will update/add the deny=5 and unlock_time=900 options. This script should be modified as needed to follow local site policy.
        CP=$(authselect current | awk 'NR == 1 {print $3}' | grep custom/) for FN in system-auth password-auth; do 	[[ -n $CP ]] && PTF=/etc/authselect/$CP/$FN || PTF=/etc/authselect/$FN 	[[ -n $(grep -E '^s*auths+requireds+pam_faillock.sos+.*deny=S+s*.*$' $PTF) ]] && sed -ri '/pam_faillock.so/s/deny=S+/deny=5/g' $PTF || sed -ri 's/^^s*(auths+requireds+pam_faillock.sos+)(.*[^{}])({.*}|)$/12 deny=5 3/' $PTF 	[[ -n $(grep -E '^s*auths+requireds+pam_faillock.sos+.*unlock_time=S+s*.*$' $PTF) ]] && sed -ri '/pam_faillock.so/s/unlock_time=S+/unlock_time=900/g' $PTF || sed -ri 's/^s*(auths+requireds+pam_faillock.sos+)(.*[^{}])({.*}|)$/12 unlock_time=900 3/' $PTF done authselect apply-changes
        Notes:
        Additional module options may be set, recommendation only covers those listed here.
        If a user has been locked out because they have reached the maximum consecutive failure count defined by deny= in the pam_faillock.so module, the user can be unlocked by issuing the command faillock -u --reset. This command sets the failed count to 0, effectively unlocking the user.
        Use of the ""audit"" keyword may log credentials in the case of user error during authentication. This risk should be evaluated in the context of the site policies of your organization.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.8,800-53|AC-7,CN-L3|8.1.4.1(b),CSCv7|16.7,ITSG-33|AC-7,LEVEL|1S,NESA|T5.5.1,NIAv2|AM24,TBA-FIISB|36.2.4,TBA-FIISB|45.1.2,TBA-FIISB|45.2.1,TBA-FIISB|45.2.2

Policy Value:
expect: ^[\s]*auth[\s]+\[default=die\][\s]+pam_faillock\.so[\s]+authfail[\s]+audit[\s]+deny=5[\s]+unlock_time=900[\s]*$
file: /etc/pam.d/password-auth
regex: ^[\s]*auth[\s]+\[default=die\][\s]+pam_faillock\.so[\s]*
system: Linux

Actual Value:
The file ""/etc/pam.d/password-auth"" does not contain ""^[\s]*auth[\s]+\[default=die\][\s]+pam_faillock\.so[\s]*"""
"""5.4.2 Ensure lockout for failed password attempts is configured - password-auth 'auth [success=1 default=bad] pam_unix.so'"" : [FAILED]

Lock out users after n unsuccessful consecutive login attempts.
        deny= - Number of attempts before the account is locked
        unlock_time= - Time in seconds before the account is unlocked
        Set the lockout number and unlock time to follow local site policy.
        Rationale:
        Locking out user IDs after n unsuccessful consecutive login attempts mitigates brute force password attacks against your systems.

Solution:
Set password lockouts and unlock times to conform to site policy Run the following to update the system-auth and password-auth files. This script will update/add the deny=5 and unlock_time=900 options. This script should be modified as needed to follow local site policy.
        CP=$(authselect current | awk 'NR == 1 {print $3}' | grep custom/) for FN in system-auth password-auth; do 	[[ -n $CP ]] && PTF=/etc/authselect/$CP/$FN || PTF=/etc/authselect/$FN 	[[ -n $(grep -E '^s*auths+requireds+pam_faillock.sos+.*deny=S+s*.*$' $PTF) ]] && sed -ri '/pam_faillock.so/s/deny=S+/deny=5/g' $PTF || sed -ri 's/^^s*(auths+requireds+pam_faillock.sos+)(.*[^{}])({.*}|)$/12 deny=5 3/' $PTF 	[[ -n $(grep -E '^s*auths+requireds+pam_faillock.sos+.*unlock_time=S+s*.*$' $PTF) ]] && sed -ri '/pam_faillock.so/s/unlock_time=S+/unlock_time=900/g' $PTF || sed -ri 's/^s*(auths+requireds+pam_faillock.sos+)(.*[^{}])({.*}|)$/12 unlock_time=900 3/' $PTF done authselect apply-changes
        Notes:
        Additional module options may be set, recommendation only covers those listed here.
        If a user has been locked out because they have reached the maximum consecutive failure count defined by deny= in the pam_faillock.so module, the user can be unlocked by issuing the command faillock -u --reset. This command sets the failed count to 0, effectively unlocking the user.
        Use of the ""audit"" keyword may log credentials in the case of user error during authentication. This risk should be evaluated in the context of the site policies of your organization.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.8,800-53|AC-7,CN-L3|8.1.4.1(b),CSCv7|16.7,ITSG-33|AC-7,LEVEL|1S,NESA|T5.5.1,NIAv2|AM24,TBA-FIISB|36.2.4,TBA-FIISB|45.1.2,TBA-FIISB|45.2.1,TBA-FIISB|45.2.2

Policy Value:
expect: ^[\s]*auth[\s]+\[success=1[\s]+default=bad\][\s]+pam_unix.so[\s]*$
file: /etc/pam.d/password-auth
regex: ^[\s]*auth[\s]+\[success=1[\s]+default=bad\][\s]*
system: Linux

Actual Value:
The file ""/etc/pam.d/password-auth"" does not contain ""^[\s]*auth[\s]+\[success=1[\s]+default=bad\][\s]*"""
"""5.4.2 Ensure lockout for failed password attempts is configured - password-auth 'auth required pam_faillock.so'"" : [FAILED]

Lock out users after n unsuccessful consecutive login attempts.
        deny= - Number of attempts before the account is locked
        unlock_time= - Time in seconds before the account is unlocked
        Set the lockout number and unlock time to follow local site policy.
        Rationale:
        Locking out user IDs after n unsuccessful consecutive login attempts mitigates brute force password attacks against your systems.

Solution:
Set password lockouts and unlock times to conform to site policy Run the following to update the system-auth and password-auth files. This script will update/add the deny=5 and unlock_time=900 options. This script should be modified as needed to follow local site policy.
        CP=$(authselect current | awk 'NR == 1 {print $3}' | grep custom/) for FN in system-auth password-auth; do 	[[ -n $CP ]] && PTF=/etc/authselect/$CP/$FN || PTF=/etc/authselect/$FN 	[[ -n $(grep -E '^s*auths+requireds+pam_faillock.sos+.*deny=S+s*.*$' $PTF) ]] && sed -ri '/pam_faillock.so/s/deny=S+/deny=5/g' $PTF || sed -ri 's/^^s*(auths+requireds+pam_faillock.sos+)(.*[^{}])({.*}|)$/12 deny=5 3/' $PTF 	[[ -n $(grep -E '^s*auths+requireds+pam_faillock.sos+.*unlock_time=S+s*.*$' $PTF) ]] && sed -ri '/pam_faillock.so/s/unlock_time=S+/unlock_time=900/g' $PTF || sed -ri 's/^s*(auths+requireds+pam_faillock.sos+)(.*[^{}])({.*}|)$/12 unlock_time=900 3/' $PTF done authselect apply-changes
        Notes:
        Additional module options may be set, recommendation only covers those listed here.
        If a user has been locked out because they have reached the maximum consecutive failure count defined by deny= in the pam_faillock.so module, the user can be unlocked by issuing the command faillock -u --reset. This command sets the failed count to 0, effectively unlocking the user.
        Use of the ""audit"" keyword may log credentials in the case of user error during authentication. This risk should be evaluated in the context of the site policies of your organization.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.8,800-53|AC-7,CN-L3|8.1.4.1(b),CSCv7|16.7,ITSG-33|AC-7,LEVEL|1S,NESA|T5.5.1,NIAv2|AM24,TBA-FIISB|36.2.4,TBA-FIISB|45.1.2,TBA-FIISB|45.2.1,TBA-FIISB|45.2.2

Policy Value:
expect: ^[\s]*auth[\s]+required[\s]+pam_faillock\.so[\s]+preauth[\s]+audit[\s]+silent[\s]+deny=5[\s]+unlock_time=900[\s]*$
file: /etc/pam.d/password-auth
regex: ^[\s]*auth[\s]+required[\s]+pam_faillock\.so[\s]*
system: Linux

Actual Value:
The file ""/etc/pam.d/password-auth"" does not contain ""^[\s]*auth[\s]+required[\s]+pam_faillock\.so[\s]*"""
"""5.4.2 Ensure lockout for failed password attempts is configured - password-auth 'auth sufficient pam_faillock.so'"" : [FAILED]

Lock out users after n unsuccessful consecutive login attempts.
        deny= - Number of attempts before the account is locked
        unlock_time= - Time in seconds before the account is unlocked
        Set the lockout number and unlock time to follow local site policy.
        Rationale:
        Locking out user IDs after n unsuccessful consecutive login attempts mitigates brute force password attacks against your systems.

Solution:
Set password lockouts and unlock times to conform to site policy Run the following to update the system-auth and password-auth files. This script will update/add the deny=5 and unlock_time=900 options. This script should be modified as needed to follow local site policy.
        CP=$(authselect current | awk 'NR == 1 {print $3}' | grep custom/) for FN in system-auth password-auth; do 	[[ -n $CP ]] && PTF=/etc/authselect/$CP/$FN || PTF=/etc/authselect/$FN 	[[ -n $(grep -E '^s*auths+requireds+pam_faillock.sos+.*deny=S+s*.*$' $PTF) ]] && sed -ri '/pam_faillock.so/s/deny=S+/deny=5/g' $PTF || sed -ri 's/^^s*(auths+requireds+pam_faillock.sos+)(.*[^{}])({.*}|)$/12 deny=5 3/' $PTF 	[[ -n $(grep -E '^s*auths+requireds+pam_faillock.sos+.*unlock_time=S+s*.*$' $PTF) ]] && sed -ri '/pam_faillock.so/s/unlock_time=S+/unlock_time=900/g' $PTF || sed -ri 's/^s*(auths+requireds+pam_faillock.sos+)(.*[^{}])({.*}|)$/12 unlock_time=900 3/' $PTF done authselect apply-changes
        Notes:
        Additional module options may be set, recommendation only covers those listed here.
        If a user has been locked out because they have reached the maximum consecutive failure count defined by deny= in the pam_faillock.so module, the user can be unlocked by issuing the command faillock -u --reset. This command sets the failed count to 0, effectively unlocking the user.
        Use of the ""audit"" keyword may log credentials in the case of user error during authentication. This risk should be evaluated in the context of the site policies of your organization.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.8,800-53|AC-7,CN-L3|8.1.4.1(b),CSCv7|16.7,ITSG-33|AC-7,LEVEL|1S,NESA|T5.5.1,NIAv2|AM24,TBA-FIISB|36.2.4,TBA-FIISB|45.1.2,TBA-FIISB|45.2.1,TBA-FIISB|45.2.2

Policy Value:
expect: ^[\s]*auth[\s]+sufficient[\s]+pam_faillock\.so[\s]+authsucc[\s]+audit[\s]+deny=5[\s]+unlock_time=900[\s]*$
file: /etc/pam.d/password-auth
regex: ^[\s]*auth[\s]+sufficient[\s]+pam_faillock\.so[\s]*
system: Linux

Actual Value:
The file ""/etc/pam.d/password-auth"" does not contain ""^[\s]*auth[\s]+sufficient[\s]+pam_faillock\.so[\s]*"""
"""5.4.2 Ensure lockout for failed password attempts is configured - system-auth 'auth [default=die] pam_faillock.so'"" : [FAILED]

Lock out users after n unsuccessful consecutive login attempts.
        deny= - Number of attempts before the account is locked
        unlock_time= - Time in seconds before the account is unlocked
        Set the lockout number and unlock time to follow local site policy.
        Rationale:
        Locking out user IDs after n unsuccessful consecutive login attempts mitigates brute force password attacks against your systems.

Solution:
Set password lockouts and unlock times to conform to site policy Run the following to update the system-auth and password-auth files. This script will update/add the deny=5 and unlock_time=900 options. This script should be modified as needed to follow local site policy.
        CP=$(authselect current | awk 'NR == 1 {print $3}' | grep custom/) for FN in system-auth password-auth; do 	[[ -n $CP ]] && PTF=/etc/authselect/$CP/$FN || PTF=/etc/authselect/$FN 	[[ -n $(grep -E '^s*auths+requireds+pam_faillock.sos+.*deny=S+s*.*$' $PTF) ]] && sed -ri '/pam_faillock.so/s/deny=S+/deny=5/g' $PTF || sed -ri 's/^^s*(auths+requireds+pam_faillock.sos+)(.*[^{}])({.*}|)$/12 deny=5 3/' $PTF 	[[ -n $(grep -E '^s*auths+requireds+pam_faillock.sos+.*unlock_time=S+s*.*$' $PTF) ]] && sed -ri '/pam_faillock.so/s/unlock_time=S+/unlock_time=900/g' $PTF || sed -ri 's/^s*(auths+requireds+pam_faillock.sos+)(.*[^{}])({.*}|)$/12 unlock_time=900 3/' $PTF done authselect apply-changes
        Notes:
        Additional module options may be set, recommendation only covers those listed here.
        If a user has been locked out because they have reached the maximum consecutive failure count defined by deny= in the pam_faillock.so module, the user can be unlocked by issuing the command faillock -u --reset. This command sets the failed count to 0, effectively unlocking the user.
        Use of the ""audit"" keyword may log credentials in the case of user error during authentication. This risk should be evaluated in the context of the site policies of your organization.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.8,800-53|AC-7,CN-L3|8.1.4.1(b),CSCv7|16.7,ITSG-33|AC-7,LEVEL|1S,NESA|T5.5.1,NIAv2|AM24,TBA-FIISB|36.2.4,TBA-FIISB|45.1.2,TBA-FIISB|45.2.1,TBA-FIISB|45.2.2

Policy Value:
expect: ^[\s]*auth[\s]+\[default=die\][\s]+pam_faillock\.so[\s]+authfail[\s]+audit[\s]+deny=5[\s]+unlock_time=900[\s]*$
file: /etc/pam.d/system-auth
regex: ^[\s]*auth[\s]+\[default=die\][\s]+pam_faillock\.so[\s]*
system: Linux

Actual Value:
The file ""/etc/pam.d/system-auth"" does not contain ""^[\s]*auth[\s]+\[default=die\][\s]+pam_faillock\.so[\s]*"""
"""5.4.2 Ensure lockout for failed password attempts is configured - system-auth 'auth [success=1 default=bad] pam_unix.so'"" : [FAILED]

Lock out users after n unsuccessful consecutive login attempts.
        deny= - Number of attempts before the account is locked
        unlock_time= - Time in seconds before the account is unlocked
        Set the lockout number and unlock time to follow local site policy.
        Rationale:
        Locking out user IDs after n unsuccessful consecutive login attempts mitigates brute force password attacks against your systems.

Solution:
Set password lockouts and unlock times to conform to site policy Run the following to update the system-auth and password-auth files. This script will update/add the deny=5 and unlock_time=900 options. This script should be modified as needed to follow local site policy.
        CP=$(authselect current | awk 'NR == 1 {print $3}' | grep custom/) for FN in system-auth password-auth; do 	[[ -n $CP ]] && PTF=/etc/authselect/$CP/$FN || PTF=/etc/authselect/$FN 	[[ -n $(grep -E '^s*auths+requireds+pam_faillock.sos+.*deny=S+s*.*$' $PTF) ]] && sed -ri '/pam_faillock.so/s/deny=S+/deny=5/g' $PTF || sed -ri 's/^^s*(auths+requireds+pam_faillock.sos+)(.*[^{}])({.*}|)$/12 deny=5 3/' $PTF 	[[ -n $(grep -E '^s*auths+requireds+pam_faillock.sos+.*unlock_time=S+s*.*$' $PTF) ]] && sed -ri '/pam_faillock.so/s/unlock_time=S+/unlock_time=900/g' $PTF || sed -ri 's/^s*(auths+requireds+pam_faillock.sos+)(.*[^{}])({.*}|)$/12 unlock_time=900 3/' $PTF done authselect apply-changes
        Notes:
        Additional module options may be set, recommendation only covers those listed here.
        If a user has been locked out because they have reached the maximum consecutive failure count defined by deny= in the pam_faillock.so module, the user can be unlocked by issuing the command faillock -u --reset. This command sets the failed count to 0, effectively unlocking the user.
        Use of the ""audit"" keyword may log credentials in the case of user error during authentication. This risk should be evaluated in the context of the site policies of your organization.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.8,800-53|AC-7,CN-L3|8.1.4.1(b),CSCv7|16.7,ITSG-33|AC-7,LEVEL|1S,NESA|T5.5.1,NIAv2|AM24,TBA-FIISB|36.2.4,TBA-FIISB|45.1.2,TBA-FIISB|45.2.1,TBA-FIISB|45.2.2

Policy Value:
expect: ^[\s]*auth[\s]+\[success=1[\s]+default=bad\][\s]+pam_unix.so[\s]*$
file: /etc/pam.d/system-auth
regex: ^[\s]*auth[\s]+\[success=1[\s]+default=bad\][\s]*
system: Linux

Actual Value:
The file ""/etc/pam.d/system-auth"" does not contain ""^[\s]*auth[\s]+\[success=1[\s]+default=bad\][\s]*"""
"""5.4.2 Ensure lockout for failed password attempts is configured - system-auth 'auth required pam_faillock.so'"" : [FAILED]

Lock out users after n unsuccessful consecutive login attempts.
        deny= - Number of attempts before the account is locked
        unlock_time= - Time in seconds before the account is unlocked
        Set the lockout number and unlock time to follow local site policy.
        Rationale:
        Locking out user IDs after n unsuccessful consecutive login attempts mitigates brute force password attacks against your systems.

Solution:
Set password lockouts and unlock times to conform to site policy Run the following to update the system-auth and password-auth files. This script will update/add the deny=5 and unlock_time=900 options. This script should be modified as needed to follow local site policy.
        CP=$(authselect current | awk 'NR == 1 {print $3}' | grep custom/) for FN in system-auth password-auth; do 	[[ -n $CP ]] && PTF=/etc/authselect/$CP/$FN || PTF=/etc/authselect/$FN 	[[ -n $(grep -E '^s*auths+requireds+pam_faillock.sos+.*deny=S+s*.*$' $PTF) ]] && sed -ri '/pam_faillock.so/s/deny=S+/deny=5/g' $PTF || sed -ri 's/^^s*(auths+requireds+pam_faillock.sos+)(.*[^{}])({.*}|)$/12 deny=5 3/' $PTF 	[[ -n $(grep -E '^s*auths+requireds+pam_faillock.sos+.*unlock_time=S+s*.*$' $PTF) ]] && sed -ri '/pam_faillock.so/s/unlock_time=S+/unlock_time=900/g' $PTF || sed -ri 's/^s*(auths+requireds+pam_faillock.sos+)(.*[^{}])({.*}|)$/12 unlock_time=900 3/' $PTF done authselect apply-changes
        Notes:
        Additional module options may be set, recommendation only covers those listed here.
        If a user has been locked out because they have reached the maximum consecutive failure count defined by deny= in the pam_faillock.so module, the user can be unlocked by issuing the command faillock -u --reset. This command sets the failed count to 0, effectively unlocking the user.
        Use of the ""audit"" keyword may log credentials in the case of user error during authentication. This risk should be evaluated in the context of the site policies of your organization.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.8,800-53|AC-7,CN-L3|8.1.4.1(b),CSCv7|16.7,ITSG-33|AC-7,LEVEL|1S,NESA|T5.5.1,NIAv2|AM24,TBA-FIISB|36.2.4,TBA-FIISB|45.1.2,TBA-FIISB|45.2.1,TBA-FIISB|45.2.2

Policy Value:
expect: ^[\s]*auth[\s]+sufficient[\s]+pam_faillock\.so[\s]+authsucc[\s]+audit[\s]+deny=5[\s]+unlock_time=900[\s]*$
file: /etc/pam.d/system-auth
regex: ^[\s]*auth[\s]+sufficient[\s]+pam_faillock\.so[\s]*
system: Linux

Actual Value:
The file ""/etc/pam.d/system-auth"" does not contain ""^[\s]*auth[\s]+sufficient[\s]+pam_faillock\.so[\s]*"""
"""5.4.2 Ensure lockout for failed password attempts is configured - system-auth 'auth sufficient pam_faillock.so'"" : [FAILED]

Lock out users after n unsuccessful consecutive login attempts.
        deny= - Number of attempts before the account is locked
        unlock_time= - Time in seconds before the account is unlocked
        Set the lockout number and unlock time to follow local site policy.
        Rationale:
        Locking out user IDs after n unsuccessful consecutive login attempts mitigates brute force password attacks against your systems.

Solution:
Set password lockouts and unlock times to conform to site policy Run the following to update the system-auth and password-auth files. This script will update/add the deny=5 and unlock_time=900 options. This script should be modified as needed to follow local site policy.
        CP=$(authselect current | awk 'NR == 1 {print $3}' | grep custom/) for FN in system-auth password-auth; do 	[[ -n $CP ]] && PTF=/etc/authselect/$CP/$FN || PTF=/etc/authselect/$FN 	[[ -n $(grep -E '^s*auths+requireds+pam_faillock.sos+.*deny=S+s*.*$' $PTF) ]] && sed -ri '/pam_faillock.so/s/deny=S+/deny=5/g' $PTF || sed -ri 's/^^s*(auths+requireds+pam_faillock.sos+)(.*[^{}])({.*}|)$/12 deny=5 3/' $PTF 	[[ -n $(grep -E '^s*auths+requireds+pam_faillock.sos+.*unlock_time=S+s*.*$' $PTF) ]] && sed -ri '/pam_faillock.so/s/unlock_time=S+/unlock_time=900/g' $PTF || sed -ri 's/^s*(auths+requireds+pam_faillock.sos+)(.*[^{}])({.*}|)$/12 unlock_time=900 3/' $PTF done authselect apply-changes
        Notes:
        Additional module options may be set, recommendation only covers those listed here.
        If a user has been locked out because they have reached the maximum consecutive failure count defined by deny= in the pam_faillock.so module, the user can be unlocked by issuing the command faillock -u --reset. This command sets the failed count to 0, effectively unlocking the user.
        Use of the ""audit"" keyword may log credentials in the case of user error during authentication. This risk should be evaluated in the context of the site policies of your organization.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.8,800-53|AC-7,CN-L3|8.1.4.1(b),CSCv7|16.7,ITSG-33|AC-7,LEVEL|1S,NESA|T5.5.1,NIAv2|AM24,TBA-FIISB|36.2.4,TBA-FIISB|45.1.2,TBA-FIISB|45.2.1,TBA-FIISB|45.2.2

Policy Value:
expect: ^[\s]*auth[\s]+sufficient[\s]+pam_faillock\.so[\s]+authsucc[\s]+audit[\s]+deny=5[\s]+unlock_time=900[\s]*$
file: /etc/pam.d/system-auth
regex: ^[\s]*auth[\s]+sufficient[\s]+pam_faillock\.so[\s]*
system: Linux

Actual Value:
The file ""/etc/pam.d/system-auth"" does not contain ""^[\s]*auth[\s]+sufficient[\s]+pam_faillock\.so[\s]*"""
"""5.4.3 Ensure password reuse is limited - password-auth"" : [FAILED]

The /etc/security/opasswd file stores the users' old passwords and can be checked to ensure that users are not recycling recent passwords.
        remember=<5> - Number of old passwords to remember
            Rationale:
            Forcing users not to reuse their past 5 passwords make it less likely that an attacker will be able to guess the password.
            Note that these change only apply to accounts configured on the local system.

Solution:
Set remembered password history to conform to site policy. Run the folloing script to add or modify the pam_pwhistory.so and pam_unix.so lines to include the remember option:
            CP=$(authselect current | awk 'NR == 1 {print $3}' | grep custom/) [[ -n $CP ]] && PTF=/etc/authselect/$CP/system-auth || PTF=/etc/authselect/system-auth [[ -n $(grep -E '^s*passwords+(sufficients+pam_unix|requi(red|site)s+pam_pwhistory).sos+([^#]+s+)*remember=S+s*.*$' $PTF) ]] && sed -ri 's/^s*(passwords+(requisite|sufficient)s+(pam_pwquality.so|pam_unix.so)s+)(.*)(remember=S+s*)(.*)$/14 remember=5 6/' $PTF || sed -ri 's/^s*(passwords+(requisite|sufficient)s+(pam_pwquality.so|pam_unix.so)s+)(.*)$/14 remember=5/' $PTF authselect apply-changes
            Notes:
            Additional module options may be set, recommendation only covers those listed here.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.5.8,800-53|IA-5(1),CSCv7|16,CSF|PR.AC-1,HIPAA|164.308(a)(5)(ii)(D),ISO/IEC-27001|A.9.4.3,ITSG-33|IA-5(1),LEVEL|1S,NESA|T5.2.3,NIAv2|AM22c,PCI-DSSv3.1|8.2.5,PCI-DSSv3.2|8.2.5,SWIFT-CSCv1|4.1,TBA-FIISB|26.2.3

Policy Value:
expect: remember[\s]*=[\s]*([5-9]|[1-9][0-9]+)
file: /etc/pam.d/password-auth
regex: ^[\s]*password[\s]+(sufficient[\s]+pam_unix\.so|required[\s]+pam_pwhistory\.so).*remember
system: Linux

Actual Value:
The file ""/etc/pam.d/password-auth"" does not contain ""^[\s]*password[\s]+(sufficient[\s]+pam_unix\.so|required[\s]+pam_pwhistory\.so).*remember"""
"""5.4.3 Ensure password reuse is limited - system-auth"" : [FAILED]

The /etc/security/opasswd file stores the users' old passwords and can be checked to ensure that users are not recycling recent passwords.
        remember=<5> - Number of old passwords to remember
            Rationale:
            Forcing users not to reuse their past 5 passwords make it less likely that an attacker will be able to guess the password.
            Note that these change only apply to accounts configured on the local system.

Solution:
Set remembered password history to conform to site policy. Run the folloing script to add or modify the pam_pwhistory.so and pam_unix.so lines to include the remember option:
            CP=$(authselect current | awk 'NR == 1 {print $3}' | grep custom/) [[ -n $CP ]] && PTF=/etc/authselect/$CP/system-auth || PTF=/etc/authselect/system-auth [[ -n $(grep -E '^s*passwords+(sufficients+pam_unix|requi(red|site)s+pam_pwhistory).sos+([^#]+s+)*remember=S+s*.*$' $PTF) ]] && sed -ri 's/^s*(passwords+(requisite|sufficient)s+(pam_pwquality.so|pam_unix.so)s+)(.*)(remember=S+s*)(.*)$/14 remember=5 6/' $PTF || sed -ri 's/^s*(passwords+(requisite|sufficient)s+(pam_pwquality.so|pam_unix.so)s+)(.*)$/14 remember=5/' $PTF authselect apply-changes
            Notes:
            Additional module options may be set, recommendation only covers those listed here.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.5.8,800-53|IA-5(1),CSCv7|16,CSF|PR.AC-1,HIPAA|164.308(a)(5)(ii)(D),ISO/IEC-27001|A.9.4.3,ITSG-33|IA-5(1),LEVEL|1S,NESA|T5.2.3,NIAv2|AM22c,PCI-DSSv3.1|8.2.5,PCI-DSSv3.2|8.2.5,SWIFT-CSCv1|4.1,TBA-FIISB|26.2.3

Policy Value:
expect: remember[\s]*=[\s]*([5-9]|[1-9][0-9]+)
file: /etc/pam.d/system-auth
regex: ^[\s]*password[\s]+(sufficient[\s]+pam_unix\.so|required[\s]+pam_pwhistory\.so).*remember
system: Linux

Actual Value:
The file ""/etc/pam.d/system-auth"" does not contain ""^[\s]*password[\s]+(sufficient[\s]+pam_unix\.so|required[\s]+pam_pwhistory\.so).*remember"""
"""5.5.1.4 Ensure inactive password lock is 30 days or less"" : [FAILED]

User accounts that have been inactive for over a given period of time can be automatically disabled. It is recommended that accounts that are inactive for 30 days after password expiration be disabled.
        Rationale:
        Inactive accounts pose a threat to system security since the users are not logging in to notice failed login attempts or other anomalies.

Solution:
Run the following command to set the default password inactivity period to 30 days:
        # useradd -D -f 30
        Modify user parameters for all users with a password set to match:
        # chage --inactive 30 <user>
            Notes:
            You can also check this setting in /etc/shadow directly. The 7th field should be 30 or less for all users with a password.
            Note: A value of -1 would disable this setting.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-53|AC-2(3),CIP|004-6-R5,CN-L3|7.1.3.2(e),CN-L3|8.1.4.2(c),CSCv7|4.4,CSF|PR.AC-1,CSF|PR.AC-4,ISO/IEC-27001|A.9.2.1,ISO/IEC-27001|A.9.2.6,ITSG-33|AC-2(3),LEVEL|1S,NIAv2|AM26,PCI-DSSv3.1|8.1.4,PCI-DSSv3.2|8.1.4,TBA-FIISB|36.2.2

Policy Value:
expect: ^[\s]*INACTIVE[\s]*=[\s]*(30|[1-2][0-9]|[1-9])[\s]*$
file: /etc/default/useradd
regex: ^[\s]*INACTIVE[\s]*=[\s]*
system: Linux

Actual Value:
Non-compliant file(s):
      /etc/default/useradd - regex '^[\s]*INACTIVE[\s]*=[\s]*' found - expect '^[\s]*INACTIVE[\s]*=[\s]*(30|[1-2][0-9]|[1-9])[\s]*$' not found in the following lines:
          4: INACTIVE=-1"
"""5.5.1.5 Ensure all users last password change date is in the past"" : [WARNING]

All users should have a password change date in the past.
        Rationale:
        If a users recorded password change date is in the future then they could bypass any set password expiration.

        NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
Investigate any users with a password change date in the future and correct them. Locking the account, expiring the password, or resetting the password manually may be appropriate.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.5.7,800-53|IA-5,CIP|007-6-R5,CN-L3|7.1.2.7(e),CN-L3|7.1.3.1(b),CSCv7|4.4,CSF|PR.AC-1,HIPAA|164.308(a)(5)(ii)(D),ISO/IEC-27001|A.9.4.3,ITSG-33|IA-5,LEVEL|1S,NESA|T5.2.3,NIAv2|AM19a,NIAv2|AM19b,NIAv2|AM19c,NIAv2|AM19d,NIAv2|AM22a,PCI-DSSv3.1|8.2.3,PCI-DSSv3.2|8.2.3,SWIFT-CSCv1|4.1,TBA-FIISB|26.2.1,TBA-FIISB|26.2.4

Policy Value:
cmd: for i in $(/usr/bin/cat /etc/shadow |cut -d: -f1); do /usr/bin/echo ''; /usr/bin/echo $i; /usr/bin/echo '------'; now=$(date '+%b %d, %Y'); /usr/bin/echo -n 'Current Date : '; /usr/bin/echo $now; change_date=$(chage --list $i |grep 'Last password change'| cut -d: -f2|awk '{$1=$1};1'); /usr/bin/echo -n 'Last Password Change : '; /usr/bin/echo $change_date; done
expect: MANUAL_REVIEW
system: Linux

Actual Value:
The command 'for i in $(/usr/bin/cat /etc/shadow |cut -d: -f1); do /usr/bin/echo ''; /usr/bin/echo $i; /usr/bin/echo '------'; now=$(date '+%b %d, %Y'); /usr/bin/echo -n 'Current Date : '; /usr/bin/echo $now; change_date=$(chage --list $i |grep 'Last password change'| cut -d: -f2|awk '{$1=$1};1'); /usr/bin/echo -n 'Last Password Change : '; /usr/bin/echo $change_date; done' returned : 

root
------
Current Date : Mar 04, 2021
Last Password Change : never

bin
------
Current Date : Mar 04, 2021
Last Password Change : Apr 15, 2020

daemon
------
Current Date : Mar 04, 2021
Last Password Change : Apr 15, 2020

adm
------
Current Date : Mar 04, 2021
Last Password Change : Apr 15, 2020

lp
------
Current Date : Mar 04, 2021
Last Password Change : Apr 15, 2020

sync
------
Current Date : Mar 04, 2021
Last Password Change : Apr 15, 2020

shutdown
------
Current Date : Mar 04, 2021
Last Password Change : Apr 15, 2020

halt
------
Current Date : Mar 04, 2021
Last Password Change : Apr 15, 2020

mail
------
Current Date : Mar 04, 2021
Last Password Change : Apr 15, 2020

operator
------
Current Date : Mar 04, 2021
Last Password Change : Apr 15, 2020

games
------
Current Date : Mar 04, 2021
Last Password Change : Apr 15, 2020

ftp
------
Current Date : Mar 04, 2021
Last Password Change : Apr 15, 2020

nobody
------
Current Date : Mar 04, 2021
Last Password Change : Apr 15, 2020

dbus
------
Current Date : Mar 04, 2021
Last Password Change : Feb 23, 2021

systemd-coredump
------
Current Date : Mar 04, 2021
Last Password Change : Feb 23, 2021

systemd-resolve
------
Current Date : Mar 04, 2021
Last Password Change : Feb 23, 2021

tss
------
Current Date : Mar 04, 2021
Last Password Change : Feb 23, 2021

polkitd
------
Current Date : Mar 04, 2021
Last Password Change : Feb 23, 2021

unbound
------
Current Date : Mar 04, 2021
Last Password Change : Feb 23, 2021

sssd
------
Current Date : Mar 04, 2021
Last Password Change : Feb 23, 2021

sshd
------
Current Date : Mar 04, 2021
Last Password Change : Feb 23, 2021

rngd
------
Current Date : Mar 04, 2021
Last Password Change : Feb 23, 2021

tcpdump
------
Current Date : Mar 04, 2021
Last Password Change : Feb 26, 2021"
"""5.5.2 Ensure system accounts are secured - 'login shell'"" : [FAILED]

There are a number of accounts provided with most distributions that are used to manage applications and are not intended to provide an interactive shell.
        Rationale:
        It is important to make sure that accounts that are not being used by regular users are prevented from being used to provide an interactive shell. By default, most distributions set the password field for these accounts to an invalid string, but it is also recommended that the shell field in the password file be set to the nologin shell. This prevents the account from potentially being used to run any commands.

Solution:
Run the commands appropriate for your distribution: Set the shell for any accounts returned by the audit to nologin:
        # usermod -s $(which nologin) <user>
            Lock any non root accounts returned by the audit:
            # usermod -L <user>
                The following command will set all system accounts to a non login shell:
                awk -F: '($1!=""root"" && $1!=""sync"" && $1!=""shutdown"" && $1!=""halt"" && $1!~/^+/ && $3<'""$(awk '/^s*UID_MIN/{print $2}' /etc/login.defs)""' && $7!=""'""$(which nologin)""'"" && $7!=""/bin/false"") {print $1}' /etc/passwd | while read user do usermod -s $(which nologin) $user done
                The following command will automatically lock not root system accounts:
                awk -F: '($1!=""root"" && $1!~/^+/ && $3<'""$(awk '/^s*UID_MIN/{print $2}' /etc/login.defs)""') {print $1}' /etc/passwd | xargs -I '{}' passwd -S '{}' | awk '($2!=""L"" && $2!=""LK"") {print $1}' | while read user do usermod -L $user done
                Notes:
                The root, sync, shutdown, and halt users are exempted from requiring a non-login shell.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.5,800-53|AC-6(1),CSCv7|16,CSF|PR.AC-4,ISO/IEC-27001|A.9.4.4,ITSG-33|AC-6(1),LEVEL|1S,NESA|T5.1.1,NESA|T5.4.4,NESA|T5.5.4,NESA|T5.6.1,NESA|T7.5.3,NIAv2|AM31,NIAv2|GS3,NIAv2|GS4,NIAv2|GS8c,NIAv2|VL3b,SWIFT-CSCv1|5.1

Policy Value:
cmd: /usr/bin/awk -F: '($1!=""root"" && $1!=""sync"" && $1!=""shutdown"" && $1!=""halt"" && $1!~/^\+/ && $3<'""$(/usr/bin/awk '/^[\s]*UID_MIN/{print $2}' /etc/login.defs)""' && $7!=""'""$(which nologin)""'"" && $7!=""/bin/false"") {print}' /etc/passwd | /usr/bin/awk '{print} END {if (NR == 0) print ""pass"" ; else print ""fail""}'
expect: ^pass$
system: Linux

Actual Value:
The command '/usr/bin/awk -F: '($1!=""root"" && $1!=""sync"" && $1!=""shutdown"" && $1!=""halt"" && $1!~/^\+/ && $3<'""$(/usr/bin/awk '/^[\s]*UID_MIN/{print $2}' /etc/login.defs)""' && $7!=""'""$(which nologin)""'"" && $7!=""/bin/false"") {print}' /etc/passwd | /usr/bin/awk '{print} END {if (NR == 0) print ""pass"" ; else print ""fail""}'' returned : 

bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
adm:x:3:4:adm:/var/adm:/sbin/nologin
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
mail:x:8:12:mail:/var/spool/mail:/sbin/nologin
operator:x:11:0:operator:/root:/sbin/nologin
games:x:12:100:games:/usr/games:/sbin/nologin
ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin
dbus:x:81:81:System message bus:/:/sbin/nologin
systemd-coredump:x:999:997:systemd Core Dumper:/:/sbin/nologin
systemd-resolve:x:193:193:systemd Resolver:/:/sbin/nologin
tss:x:59:59:Account used by the trousers package to sandbox the tcsd daemon:/dev/null:/sbin/nologin
polkitd:x:998:996:User for polkitd:/:/sbin/nologin
unbound:x:997:994:Unbound DNS resolver:/etc/unbound:/sbin/nologin
sssd:x:996:993:User for sssd:/:/sbin/nologin
sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin
rngd:x:995:992:Random Number Generator Daemon:/var/lib/rngd:/sbin/nologin
tcpdump:x:72:72::/:/sbin/nologin
fail"
"""5.5.3 Ensure default user shell timeout is 900 seconds or less - bashrc"" : [FAILED]

The default TMOUT determines the shell timeout for users. The TMOUT value is measured in seconds.
        Rationale:
        Having no timeout value associated with a shell could allow an unauthorized user access to another user's shell session (e.g. user walks away from their computer and doesn't lock the screen). Setting a timeout value at least reduces the risk of this happening.

Solution:
Edit the /etc/bashrc, /etc/profile and /etc/profile.d/*.sh files (and the appropriate files for any other shell supported on your system) and add or edit any umask parameters as follows:
        readonly TMOUT=900 ; export TMOUT
        Note that setting the value to readonly prevents unwanted modification during runtime.
        Notes:
        The audit and remediation in this recommendation apply to bash and shell. If other shells are supported on the system, it is recommended that their configuration files also are checked. Other methods of setting a timeout exist for other shells not covered here.
        Ensure that the timeout conforms to your local policy.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.11,800-53|AC-12,CN-L3|7.1.2.2(d),CN-L3|7.1.3.7(b),CN-L3|8.1.4.1(b),CSCv7|16.11,ITSG-33|AC-12,LEVEL|1S,NIAv2|NS49

Policy Value:
expect: ^[\s]*TMOUT[\s]*=[\s]*(900|[1-8][0-9]{2}|[0-9]{1,2})[\s]*$
file: /etc/bashrc
regex: ^[\s]*TMOUT[\s]*
system: Linux

Actual Value:
The file ""/etc/bashrc"" does not contain ""^[\s]*TMOUT[\s]*"""
"""5.5.3 Ensure default user shell timeout is 900 seconds or less - profile"" : [FAILED]

The default TMOUT determines the shell timeout for users. The TMOUT value is measured in seconds.
        Rationale:
        Having no timeout value associated with a shell could allow an unauthorized user access to another user's shell session (e.g. user walks away from their computer and doesn't lock the screen). Setting a timeout value at least reduces the risk of this happening.

Solution:
Edit the /etc/bashrc, /etc/profile and /etc/profile.d/*.sh files (and the appropriate files for any other shell supported on your system) and add or edit any umask parameters as follows:
        readonly TMOUT=900 ; export TMOUT
        Note that setting the value to readonly prevents unwanted modification during runtime.
        Notes:
        The audit and remediation in this recommendation apply to bash and shell. If other shells are supported on the system, it is recommended that their configuration files also are checked. Other methods of setting a timeout exist for other shells not covered here.
        Ensure that the timeout conforms to your local policy.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.11,800-53|AC-12,CN-L3|7.1.2.2(d),CN-L3|7.1.3.7(b),CN-L3|8.1.4.1(b),CSCv7|16.11,ITSG-33|AC-12,LEVEL|1S,NIAv2|NS49

Policy Value:
expect: ^(readonly)?[\s]*TMOUT[\s]*=[\s]*(900|[1-8][0-9]{2}|[0-9]{1,2})[\s]*
file: /etc/profile
regex: ^(readonly)?[\s]*TMOUT[\s]*
system: Linux

Actual Value:
Non-compliant file(s):
      /etc/profile - regex '^(readonly)?[\s]*TMOUT[\s]*' found - expect '^(readonly)?[\s]*TMOUT[\s]*=[\s]*(900|[1-8][0-9]{2}|[0-9]{1,2})[\s]*' not found in the following lines:
          87: readonly TMOUT"
"""5.6 Ensure root login is restricted to system console"" : [FAILED]

The file /etc/securetty contains a list of valid terminals that may be logged in directly as root.
        Rationale:
        Since the system console has special properties to handle emergency situations, it is important to ensure that the console is in a physically secure location and that unauthorized consoles have not been defined.

Solution:
Remove entries for any consoles that are not in a physically secure location.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-53|AC-6(3),CSCv7|5.1,CSF|PR.AC-4,ISO/IEC-27001|A.9.1.2,ISO/IEC-27001|A.9.4.4,ITSG-33|AC-6(3),LEVEL|1NS,NESA|T5.1.1,NESA|T5.5.4,SWIFT-CSCv1|5.1

Policy Value:
cmd: /usr/bin/grep -v ""console"" /etc/securetty | /usr/bin/awk '{ print } END { if (NR==0) print ""none"" }'
dont_echo_cmd: YES
expect: none
system: Linux

Actual Value:
The command returned : 

tty1
tty2
tty3
tty4
tty5
tty6
vc1
vc2
vc3
vc4
vc5
vc6
vc7
vc8
vc9
vc10
vc11
ttyS0
ttyS1"
"""5.7 Ensure access to the su command is restricted - wheel group contains root"" : [FAILED]

The su command allows a user to run a command or shell as another user. The program has been superseded by sudo , which allows for more granular control over privileged access. Normally, the su command can be executed by any user. By uncommenting the pam_wheel.so statement in /etc/pam.d/su , the su command will only allow users in the wheel group to execute su .
        Rationale:
        Restricting the use of su , and using sudo in its place, provides system administrators better control of the escalation of user privileges to execute privileged commands. The sudo utility also provides a better logging and audit mechanism, as it can log each command executed via sudo , whereas su can only record that a user executed the su program.

Solution:
Add the following line to the /etc/pam.d/su file:
        auth required pam_wheel.so use_uid
        Create a comma separated list of users in the wheel statement in the /etc/group file:
        wheel:x:<GID>:root,<user list>
            Example:
            wheel:x:10:root,user1,user2,user3

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.1.1,800-53|AC-2,CN-L3|7.1.3.2(d),CSCv7|5.1,CSF|DE.CM-1,CSF|DE.CM-3,CSF|PR.AC-1,CSF|PR.AC-4,ISO/IEC-27001|A.9.2.1,ITSG-33|AC-2,LEVEL|1S,NESA|T5.2.1,NESA|T5.2.2,NIAv2|AM28,NIAv2|NS5j,NIAv2|SS14e

Policy Value:
cmd: /usr/bin/grep ^wheel: /etc/group
dont_echo_cmd: YES
expect: ^wheel:x:10:root(,|$)
system: Linux

Actual Value:
The command returned : 

wheel:x:10:"
"""6.1.13 Audit SUID executables"" : [WARNING]

The owner of a file can set the file's permissions to run with the owner's or group's permissions, even if the user running the program is not the owner or a member of the group. The most common reason for a SUID program is to enable users to perform functions (such as changing their password) that require root privileges.
        Rationale:
        There are valid reasons for SUID programs, but it is important to identify and review such programs to ensure they are legitimate.

        NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
Ensure that no rogue SUID programs have been introduced into the system. Review the files returned by the action in the Audit section and confirm the integrity of these binaries.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-53|AC-6(8),CSCv7|5.1,CSF|PR.AC-4,LEVEL|1NS

Policy Value:
name: find_suid_sgid_files
system: Linux

Actual Value:
The following 19 files are SUID or SGID:

  /usr/bin/chage
     owner: root, group: root, permissions: 4755

  /usr/bin/gpasswd
     owner: root, group: root, permissions: 4755

  /usr/bin/newgrp
     owner: root, group: root, permissions: 4755

  /usr/bin/mount
     owner: root, group: root, permissions: 4755

  /usr/bin/su
     owner: root, group: root, permissions: 4755

  /usr/bin/umount
     owner: root, group: root, permissions: 4755

  /usr/bin/write
     owner: root, group: tty, permissions: 2755

  /usr/bin/passwd
     owner: root, group: root, permissions: 4755

  /usr/bin/crontab
     owner: root, group: root, permissions: 4755

  /usr/bin/pkexec
     owner: root, group: root, permissions: 4755

  /usr/bin/sudo
     owner: root, group: root, permissions: 4111

  /usr/sbin/grub2-set-bootflag
     owner: root, group: root, permissions: 4755

  /usr/sbin/unix_chkpwd
     owner: root, group: root, permissions: 4755

  /usr/sbin/pam_timestamp_check
     owner: root, group: root, permissions: 4755

  /usr/sbin/userhelper
     owner: root, group: root, permissions: 4711

  /usr/lib/polkit-1/polkit-agent-helper-1
     owner: root, group: root, permissions: 4755

  /usr/libexec/dbus-1/dbus-daemon-launch-helper
     owner: root, group: dbus, permissions: 4750

  /usr/libexec/utempter/utempter
     owner: root, group: utmp, permissions: 2711

  /usr/libexec/openssh/ssh-keysign
     owner: root, group: ssh_keys, permissions: 2555"
"""6.1.14 Audit SGID executables"" : [WARNING]

The owner of a file can set the file's permissions to run with the owner's or group's permissions, even if the user running the program is not the owner or a member of the group. The most common reason for a SGID program is to enable users to perform functions (such as changing their password) that require root privileges.
        Rationale:
        There are valid reasons for SGID programs, but it is important to identify and review such programs to ensure they are legitimate. Review the files returned by the action in the audit section and check to see if system binaries have a different md5 checksum than what from the package. This is an indication that the binary may have been replaced.

        NOTE: Nessus has provided the target output to assist in reviewing the benchmark to ensure target compliance.

Solution:
Ensure that no rogue SGID programs have been introduced into the system. Review the files returned by the action in the Audit section and confirm the integrity of these binaries.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-53|AC-6(8),CSCv7|5.1,CSF|PR.AC-4,LEVEL|1NS

Policy Value:
name: find_suid_sgid_files
system: Linux

Actual Value:
The following 19 files are SUID or SGID:

  /usr/bin/chage
     owner: root, group: root, permissions: 4755

  /usr/bin/gpasswd
     owner: root, group: root, permissions: 4755

  /usr/bin/newgrp
     owner: root, group: root, permissions: 4755

  /usr/bin/mount
     owner: root, group: root, permissions: 4755

  /usr/bin/su
     owner: root, group: root, permissions: 4755

  /usr/bin/umount
     owner: root, group: root, permissions: 4755

  /usr/bin/write
     owner: root, group: tty, permissions: 2755

  /usr/bin/passwd
     owner: root, group: root, permissions: 4755

  /usr/bin/crontab
     owner: root, group: root, permissions: 4755

  /usr/bin/pkexec
     owner: root, group: root, permissions: 4755

  /usr/bin/sudo
     owner: root, group: root, permissions: 4111

  /usr/sbin/grub2-set-bootflag
     owner: root, group: root, permissions: 4755

  /usr/sbin/unix_chkpwd
     owner: root, group: root, permissions: 4755

  /usr/sbin/pam_timestamp_check
     owner: root, group: root, permissions: 4755

  /usr/sbin/userhelper
     owner: root, group: root, permissions: 4711

  /usr/lib/polkit-1/polkit-agent-helper-1
     owner: root, group: root, permissions: 4755

  /usr/libexec/dbus-1/dbus-daemon-launch-helper
     owner: root, group: dbus, permissions: 4750

  /usr/libexec/utempter/utempter
     owner: root, group: utmp, permissions: 2711

  /usr/libexec/openssh/ssh-keysign
     owner: root, group: ssh_keys, permissions: 2555"
"""6.1.6 Ensure permissions on /etc/passwd- are configured"" : [FAILED]

The /etc/passwd- file contains backup user account information.
        Rationale:
        It is critical to ensure that the /etc/passwd- file is protected from unauthorized access. Although it is protected by default, the file permissions could be changed either inadvertently or through malicious actions.

Solution:
Run the following command to set permissions on /etc/passwd- :
        # chown root:root /etc/passwd-  # chmod u-x,go-rwx /etc/passwd-

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.4.2,800-53|CM-6,CN-L3|8.1.10.6(d),CSCv7|16.4,CSF|PR.IP-1,ITSG-33|CM-6,LEVEL|1S,NESA|T3.2.1,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3

Policy Value:
file: /etc/passwd-
group: root
mask: 177
owner: root
system: Linux

Actual Value:
The file /etc/passwd- with fmode owner: root group: root mode: 0644 attr: -------------------- uid: 0 gid: 0 uneven permissions : FALSE  does not match the policy value owner: root group: root mask: 0177 uneven permissions : TRUE 

/etc/passwd-"
"""6.2.9 Ensure users' dot files are not group or world writable"" : [FAILED]

While the system administrator can establish secure permissions for users' ""dot"" files, the users can easily override these.
        Rationale:
        Group or world-writable user configuration files may enable malicious users to steal or modify other users' data or to gain another user's system privileges.

Solution:
Making global modifications to users' files without alerting the user community can result in unexpected outages and unhappy users. Therefore, it is recommended that a monitoring policy be established to report user dot file permissions and determine the action to be taken in accordance with site policy.
        Notes:
        On some distributions the /sbin/nologin should be replaced with /usr/sbin/nologin.

See Also: https://workbench.cisecurity.org/files/2485

Reference: 800-171|3.13.1,800-171|3.13.5,800-53|SC-7,CN-L3|8.1.10.6(j),CSCv7|14.6,CSF|DE.CM-1,CSF|PR.AC-5,CSF|PR.DS-5,CSF|PR.PT-4,ISO/IEC-27001|A.13.1.3,ITSG-33|SC-7,LEVEL|1S,NESA|T4.5.4,NIAv2|GS1,NIAv2|GS2a,NIAv2|GS2b,PCI-DSSv3.1|2.2.4,PCI-DSSv3.2|2.2.4,SWIFT-CSCv1|2.3,TBA-FIISB|43.1

Policy Value:
cmd: /usr/bin/grep -E -v '^(halt|sync|shutdown)' /etc/passwd | /usr/bin/awk -F: '($7 != ""'""$(which nologin)""'"" && $7 != ""/bin/false"") { print $1 "" "" $6 }'| while read user dir; do if [ ! -d ""$dir"" ]; then /usr/bin/echo ""The home directory ($dir) of user $user does not exist.""; else for file in $dir/.[A-Za-z0-9]*; do if [ ! -h ""$file"" -a -f ""$file"" ]; then fileperm=$(ls -ld $file | cut -f1 -d"" ""); if [ $(echo $fileperm | cut -c6)  != ""-"" ]; then /usr/bin/echo ""Group Write permission set on file $file""; fi; if [ $(echo $fileperm | cut -c9) != ""-"" ]; then /usr/bin/echo ""Other Write permission set on file $file""; fi; fi; done; fi; done | awk '{ print } END { if (NR==0) print ""All dot files have proper permissions"" }'
dont_echo_cmd: YES
expect: All dot files have proper permissions
system: Linux

Actual Value:
The command returned : 

The home directory (/dev/null) of user tss does not exist.
The home directory (/var/lib/rngd) of user rngd does not exist."
"A local file overwrite vulnerability exists in curl 7.20.0 to and including 7.70.0 due to the -J (--remove-header-name)
being allowed to be used with -i (--include). An authenticated, local attacker can exploit this, via use of a malicious
server to trick curl to overwrite files on the local host."
"The SSH server is configured to support Cipher Block Chaining (CBC)
encryption.  This may allow an attacker to recover the plaintext message
from the ciphertext. 

Note that this plugin only checks for the options of the SSH server and
does not check for vulnerable software versions."
>>>>>>> Trial-Run-1
